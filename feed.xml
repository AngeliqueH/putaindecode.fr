<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Putain de Code !</title>
        <description>On voulait mettre une baseline mais on a pas été foutu d&#x27;en trouver une</description>
        <link>/</link>
        <generator>happyplan 0.4.0-alpha.8</generator>
        <lastBuildDate>Thu, 07 November 2013 00:00:00 +0100</lastBuildDate>

          <item>
              <title>Comment contribuer ?</title>
              <description><![CDATA[

<p>Ici, chez Putain de Code, dans notre building 8 étages vitres teintées avec
masseuses et coke à volonté et à n&#39;importe quelle heure de la journée, on sait
qu&#39;on va forcément t&#39;aider à comprendre pas mal de trucs, mais on sait aussi
qu&#39;on peut faire des fois des erreurs dans les articles (à cause de la coke)
ou tout simplement qu&#39;il existe des types encore plus hipster
qu&#39;<a href="http://putaindecode.fr/le-crew/#mlbli">_mlb</a> et qui voudront profiter de
notre renomée inter<del>nationale</del>galactique pour se faire un peu de visibilité
en proposant un post. Du coup, on s&#39;attend vraiment à ce que tu aides à faire
avancer le bouzin, que t&#39;apportes ta pierre à l&#39;édifice quoi (oui on t&#39;apprend
des expressions aussi), ou ta PR au repo comme on dit dans le monde des
développeurs des internets.</p>
<h2 id="github">GitHub</h2>
<ul>
<li><p>Déjà, si t&#39;en as pas, crée toi un compte GitHub (avant qu&#39;on te caillasse),
et vu que tu commences à lire des ressources sur notre site, crois moi que
tu vas commencer à le faire chauffer plus vite que prévu.</p>
</li>
<li><p>Ensuite il faut que tu installes tout le nécessaire pour bosser sur un
<em>repo</em> GitHub (oui on va commencer à utiliser des anglicismes dès maintenant
donc habitues toi y, <em>repo</em> = dépôt de code, comme tu peux le constater, la
francisation, c&#39;est moche), on va te faire un post qui va regrouper tout ce
qu&#39;il te faut pour installer et configurer Git pour bosser sur GitHub.</p>
</li>
<li><p>Après, il faut que tu crées ce qu&#39;on appelle un <em>fork</em> du repo. Un fork
c&#39;est juste ta propre copie du repo. Bah ouais, tu vas pas directement
travailler sur notre repo et nous le crader sans qu&#39;on puisse bouger
l&#39;orteil. Non monsieur, sur GitHub on est des gens civilisés et on créé sa
propre copie dans son coin avant de demander à papa si on a le droit
d&#39;apporter les modifs sur le repo principal.</p>
</li>
<li><p>Pour ça, clique sur le bouton <em>Fork</em> en haut à droite du repo. GitHub va
créer une copie du repo sur ton propre compte GitHub, où tu pourras
travailler tranquillement.</p>
<figure>
  <img src="/github/fork-button.jpg" alt="Bouton Fork">
  <figcaption>Clique au fond à droite</figcaption>
</figure>
</li>
<li><p>Maintenant que t&#39;as enfin notre magnifique repo dans ton compte, tu devrais
te sentir honoré. Une fois que t&#39;as appelé toute ta famille et les 3
pèquenauds qui te servent d&#39;amis, tu dois pouvoir y coder dessus sur ton PC.
On va partir du principe que tu t&#39;appelles Clint. Et que ton nom c&#39;est
Horris. T&#39;as donc choisi comme pseudo GitHub <code>clinthorris</code> (oui t&#39;aurais du
réfléchir toi aussi). Donc tu te débrouilles pour aller dans un dossier vide
et tu vas cloner notre repo. Cloner = faire une copie d&#39;un repo distant (sur
les serveurs de GitHub par exemple) en local (ton vieux Pentium II sous XP
dans notre cas). Ensuite il faut que tu te rendes dans ce dossier en ligne
de commande (sous Windows tu y vas avec l&#39;invite de commande mais on te
prévient qu&#39;on va pas être copains longtemps, trouve un OS décent putain,
sous Mac OS X tu utilises le terminal, et sous Linux je pense qu&#39;on a pas à
t&#39;expliquer).</p>
<pre><code>$ git clone https://github.com/clinthorris/website.git putaindecode</code></pre>
</li>
<li><p>Ensuite tu dois ajouter ce qu&#39;on appelle une remote. Une remote c&#39;est une
référence du repo principal, le beau, le grand, le nôtre. En gros, ça va te
servir que si tu fais une modification ou une contribution sur notre site
aujourd&#39;hui, et que dans un mois tu veuilles encore en faire, tu pourras
facilement rattraper tout ce qu&#39;on aura fait entre temps. La remote en
rapport avec le repo principal, on l&#39;appelle souvent <em>upstream</em></p>
<pre><code>  $ cd putaindecode
  $ git remote add upstream https://github.com/putaindecode/website.git
  $ git fetch upstream</code></pre>
</li>
<li><p>Alors là, normalement, t&#39;as le dossier propre et frais, pêché du matin. Vu
que notre site pète la classe, et qu&#39;on l&#39;a fait en utilisant quand même des
technos ultra cool genre <a href="https://github.com/happyplan/happyplan">HappyPlan</a>
(un truc fait par @_kud et @MoOx, t&#39;en profiteras pour aller jeter un oeil,
fais pas ton rat, t&#39;es pas pressé), node, bower, toussa, il va falloir que
t&#39;installes les dépendances, les requirements, et toute la ribambelle de
fichiers qui vont bien. Pour faire ça, c&#39;est pas compliqué, tu vas lire le
README.md à la racine du repo. On fait exprès de pas te le dire ici parce
que c&#39;est un peu une convention pour tous les projets susceptibles d&#39;être
utilisés en Open Source, et que ça te fait pas de mal de commencer à
apprendre à bien bosser.</p>
</li>
<li><p>Une fois ton site tout installé, t&#39;as plus qu&#39;à aller dans ton dossier grâce
à la ligne de commande, et à taper <code>$ happyplan</code>, tu verras tout un tas de
trucs grunt s&#39;exécuter, ne t&#39;inquiètes pas. À la fin du processus, ça
devrait te lancer le site en local dans le browser. Là j&#39;espère que tu te
rends compte qu&#39;avec une seule ligne de commande on t&#39;a fait tourner un site
complet. Et là on te voit déjà en train de baver et te rappeler tes longues
soirées en train d&#39;installer PHP, MySQL, un WordPress, la bonne version des
plugins, de la conf à n&#39;en plus finir... ah qu&#39;est-ce que tu pouvais être
niais. Ça a quand même bien plus la classe notre solution, non ?</p>
</li>
<li><p>Maintenant que t&#39;as tout, t&#39;as plus qu&#39;à lancer <del>notepad++</del> ton éditeur
favori et te préparer à modifier ou proposer les fichiers que tu veux. Ce
que t&#39;as à retenir, c&#39;est que tu vas surtout bosser dans le dossier <code>/src</code></p>
</li>
</ul>
<h2 id="correction-d-un-post-existant">Correction d&#39;un post existant</h2>
<p>Bon ok, on a compris, t&#39;es timide, tu te sens pas encore prêt à nous écrire un
magnifique post sur ton tout dernier projet, tu préfères juste nous aider à
améliorer notre contenu. Bah on te remercie quand même tu vois, parce qu&#39;on
est des types sympas.</p>
<ul>
<li><p>Alors déjà, on aime pas juste donner une liste d&#39;ordres sans expliquer pour
que tu puisses comprendre ce que tu fais. Donc notre site, il a été fait
grâce à HappyPlan (un générateur de site statique bien pimpé, parce que oui,
y&#39;a pas que Wordpress pour faire un site) qui lui même est basé sur grunt
(un esclave qui te permet d&#39;éxécuter des tâches répétitives en JavaScript)
et plein d&#39;autres truc cools. Donc, faudrait que tu jettes un coup d&#39;œil à
ces projets, histoire de savoir de quoi on cause, même si on va essayer de
t&#39;expliquer au mieux.</p>
</li>
<li><p>Donc, tous nos posts sont contenus dans <code>src/posts/</code>. Si jamais c&#39;est sur
autre chose qu&#39;un post, farfouille un peu et tu trouveras, les noms des
dossiers sont assez explicites et de toute façon les URLs sur notre site
ressemblent bizarrement (en vrai c&#39;est pas bizarre hein, t&#39;avais compris)
aux noms des dossiers.</p>
</li>
<li><p>Donc, une fois le fichier trouvé, tu remarqueras que la syntaxe à
l&#39;intérieur, c&#39;est pas du HTML. C&#39;est un truc bizzare avec des dièses et des
étoiles. On appelle ça du
<a href="http://fr.wikipedia.org/wiki/Markdown"><em>Markdown</em></a>. On va te laisser aller
chercher si tu veux connaitre plus en détail. Mais normalement en voyant le
reste du post autour de toi, tu devrais comprendre assez vite. Tu peux
toujours faire du HTML, mais franchement, le Markdown a été créé pour ce
genre de tâches, c&#39;est un bon moment pour l&#39;apprendre.</p>
</li>
<li><p>Avant de faire les modifications direct dans le fichier, on va te demander
de faire une branche, c&#39;est une bonne pratique et ça nous permettra de voir
exactement ce que t&#39;auras modifié, c&#39;est beaucoup plus simple. Du coup tu
fais simplement un :</p>
<pre><code>$ git checkout -b fix.nom-du-post</code></pre>
</li>
<li><p>Fais les modifications que tu veux dans le fichier, là on peut pas t&#39;aider,
c&#39;est à toi de jouer.</p>
</li>
<li><p>Normalement si t&#39;avais bien lancé le <code>happyplan</code> tout à l&#39;heure, y&#39;a un
processus <em>watch</em> (en gros un truc qui surveilles ton projet) qui est lancé
et qui détecte que t&#39;as changé un fichier, du coup, grâce au watch couplé à
un processus appelé <em>livereload</em> ton navigateur va rafraichir les fichiers
nécessaires en direct. T&#39;as rien à faire c&#39;est magique. Enfin si, tu dois juste
retourner dans ton browser ça devrait déjà être à jour.</p>
</li>
<li><p>Une fois que tout est bon, tu peux passer à l&#39;étape de validation de tes
modifications (étape commune pour la modification d&#39;un post existant ou la
proposition d&#39;un nouveau)</p>
</li>
</ul>
<h2 id="proposition-d-un-nouveau-post">Proposition d&#39;un nouveau post</h2>
<ul>
<li><p>Alors pour proposer un nouveau post déjà, il te faut une idée. Et on te
prévient que si tu nous sort un post sur la liste des plugins jQuery les
plus en vogue cette semaine, on va te trouver. On va chercher ton IP, on va
tracer ton adresse, et on va te trouver. Et tu vas comprendre que parmi
nous, y&#39;a des types qui sont pas du tout copains avec jQuery et qui sont pas
tendres du tout.</p>
</li>
<li><p>Il faut aussi que tu fasses attention à ne pas bosser sur le même post que
quelqu&#39;un d&#39;autre et pour ça tu dois aller jeter un coup d&#39;oeil du côté des
issues en cours avec le label <code>post</code>. Allez, on est sympa, t&#39;as <a href="https://github.com/putaindecode/website/issues?labels=post&amp;page=1&amp;state=open">le
lien</a>.</p>
</li>
<li><p>Bref, une fois ton idée trouvée, il faut que tu crées le post pour pouvoir
commencer à écrire dans le fichier. Tout d&#39;abord tu vas devoir créer une
nouvelle branche. C&#39;est une pratique qu&#39;on demande à tout le monde, même
nous en interne on bosse sur des branches. Donc tout d&#39;abord :</p>
<pre><code>$ git checkout -b post.titre-court-du-post</code></pre>
<p>Ensuite il va falloir que tu crées le fichier nécessaire pour le brouillon
du post.</p>
<pre><code>$ happyplan newpost --name=&quot;Nom du post&quot; --tags=&quot;tags, separes, virgules&quot;
$ mkdir src/posts/nom-du-post
$ mv src/posts/nom-du-post.html.hbs src/posts/nom-du-post/index.html.hbs</code></pre>
<p>Ça va te créer un fichier dans <code>/src/posts/</code> avec le nom qui va bien.
Tu remarqueras qu&#39;on la déplacé dans un dossier, histoire d&#39;avoir des URLs
simples et sympa. Puis si t&#39;as de la merde à fourrer pour ton article, tu sais
où la mettre du coup.</p>
</li>
<li><p>Tu peux maintenant éditer ton fichier en MarkDown dans la partie dédié,
tout en faisant attention si tu te mets à toucher l&#39;entête créé
automatiquement (celui où il y a layout, title et tags).
Laisse bien la clé <code>draft: true</code> bien entendu.
Amuse toi, créé ton contenu, rédige bien tout comme tu veux.
Techniquement, dans ce dossier <code>posts</code> tu peux faire autant de brouillons
que tu veux pour peut que tu spécifies bien une clé <code>draft</code> pour chaque post.</p>
</li>
<li><p>Tu devrais pouvoir te balader sur le site est trouver ton article sur la page
des brouillons: <a href="http://localhost:4242/posts/drafts.html">http://localhost:4242/posts/drafts.html</a> .
Avec la tâche <code>$ happyplan</code> lancée normalement tout se rafraichira
automatiquement.
Si ce n&#39;est pas le cas, lance la tâche <code>$ happyplan</code>.
Si là tu as une erreur qui t&#39;échappes, on t&#39;invite à
<a href="https://github.com/putaindecode/website/issues/new">ouvrir une issue</a>.</p>
</li>
<li><p>En l&#39;état tu devrais pouvoir consulter sur le site lancé localement ton post,
voir s&#39;il sort correctement et s&#39;il est présentable à ton goût.
Tu pourras le consulter sur une URL du type
<code>http://localhost:4242/post/nom-du-post/</code>. Mais tu le sais déjà puisque t&#39;as
bien suivi et que t&#39;es passé par la page des brouillons.</p>
</li>
<li><p>Une fois que tout est bon, tu peux passer à l&#39;étape de validation de tes
modifications (étape commune pour la modification d&#39;un post existant ou la
proposition d&#39;un nouveau)</p>
</li>
</ul>
<h2 id="validation-de-tes-modifications">Validation de tes modifications</h2>
<ul>
<li><p>Il faut tout d&#39;abord pousser tes modifications sur ton <code>fork</code>. Pour ça on va
d&#39;abord ajouter les fichier que tu as modifié à l&#39;index de fichiers à
commit. Tu peux faire ça tout simplement avec un :</p>
<pre><code>$ git add -A src/posts/nom-du-post</code></pre>
<p>Cette commande ajoute tous les fichiers dans le dossier que tu as créé.
Si tu as ajouter des fichiers à l&#39;exterieur de ce dossier, tu devras les
ajouter. Exemple:</p>
<pre><code>$ git add src/media/memes/trollface.jpg</code></pre>
<p>Ensuite on va dire à git de valider ces modifications de code :</p>
<pre><code>$ git commit -m &quot;Un petit message sympa expliquant le correctif/post&quot;</code></pre>
<p>Et on va finir en disant qu&#39;on veut envoyer tout ça sur ton fork qui est
situé sur GitHub :</p>
<pre><code>$ git push -u</code></pre>
</li>
<li><p>Voila ! Si tu vas voir ton <code>fork</code> sur GitHub tu verras ton commit et les
modifications que tu as apportées normalement. Il ne te reste plus qu&#39;à nous
soumettre ces modifications. Pour ça tu vas faire ce qu&#39;on appelle une Pull
Request (PR)</p>
</li>
<li><p>Il te suffit de cliquer sur le bouton vert qui représente 2 flèches en sens
inverse à côté du nom de ta branche en dessous du nombre de commits /
branches / etc.</p>
<figure>
  <img src="/github/pull-request-button.jpg" alt="Bouton Pull Request">
  <figcaption>C&#39;est bon tu le vois là le bouton ?</figcaption>
</figure>
</li>
<li><p>Sélectionnes les bonnes branches et ajoute nous un beau titre et une belle
description de Pull Request en essayant au moins de commencer par <code>Post:
Nom du post</code> ou `Fix: Nom du post</p>
</li>
<li><p>Et voila ! Tu n&#39;as qu&#39;à attendre de nos nouvelles maintenant. D&#39;ailleurs au
passage, si tu veux, tu peux en profiter pour nous suivre <a href="http://twitter.com/putaindecode">sur
twitter</a>, et tu pourras nous lâcher un
message avec ta PR ou ton issue en lien, histoire de nous mettre la pression.</p>
</li>
</ul>
<h2 id="hey-tu-veux-mieux-comprendre-git-">Hey ! Tu veux mieux comprendre Git ?</h2>
<p>Pour découvrir Git plus en détails, on t&#39;invite à lire notre article
<a href="posts/git/versionner-avec-git/">Versionner avec Git</a></p>

]]></description>
              <pubDate>Tue, 05 November 2013 01:00:00 +0100</pubDate>
              <link>/dist/posts/comment-contribuer/index.html</link>
              <guid isPermaLink="true">/dist/posts/comment-contribuer/index.html</guid>
          </item>

          <item>
              <title>Versionner avec Git</title>
              <description><![CDATA[

<p>Chez Putain de Code, on aime se servir de <a href="http://git-scm.org/">Git</a> (et de GitHub, mais
c&#39;est une autre histoire), même si certains d&#39;entre nous (comme Lionel) ne s&#39;en
servent pas forcément bien.</p>
<p>Pour éviter ce genre de mésaventures, on s&#39;est dit qu&#39;on allait consacrer une
série d&#39;articles à ce merveilleux gestionnaire de versions, et de vous en faire
profiter par la même occasion.</p>
<p>Et si Git permet de faire à peu près ce qu&#39;on veut sur un dépôt, vous verrez
qu&#39;on peut assez facilement réparer ses erreurs (et même celles des autres
parfois !).</p>
<h2 id="c-est-quoi-git-">C&#39;est quoi Git ?</h2>
<p>Si vous êtes un développeur un tant soit peu consciencieux, vous utilisez un
gestionnaire de versions pour suivre l&#39;évolution de votre code. Non,
<a href="http://roland.entierement.nu/blog/2008/01/22/cpold-la-poudre-verte-du-suivi-de-versions.html">CPOLD</a> n&#39;est pas un gestionnaire de versions.</p>
<p>Git, c&#39;est un gestionnaire de versions décentralisé, aussi connu sous le terme
de DVCS (pour Distributed Version Control System) pour les amateurs.</p>
<p>Le terme <em>distribué</em> est très important car c&#39;est ce qui le différencie d&#39;autres
gestionnaires historiquement plus connus comme Subversion (SVN) ou le vénérable
CVS.</p>
<p>Ça veut dire que chaque développeur possède sa propre copie du dépôt, chez lui,
localement, contraîrement à un gestionnaire centralisé ou tout est… centralisé
sur un même serveur (merci Captain Obvious).</p>
<p>Git est principalement utilisable en ligne de commande, mais il existe des
interfaces graphiques sous les principaux OS du marché (OS X, Linux, Windows).
Ici on va traiter de la ligne de commande, car c&#39;est l&#39;arme de base du bon
développeur.</p>
<p>Je vous passe l&#39;installation, référez-vous à la documentation officielle pour
cette partie. (Ça se résume souvent à un <code>nom-du-package-manager install git</code>)</p>
<h2 id="comment-a-marche-">Comment ça marche ?</h2>
<p>Avant d&#39;attaquer la partie pratique, on va s&#39;attarder un peu à comment Git
fonctionne, parce qu&#39;à mon sens c&#39;est essentiel pour comprendre rapidement ce
qu&#39;il est possible de faire et pour se construire un modèle mental des
opérations.</p>
<p>Dans Git les commits sont tous reliés avec leur(s) parent(s) comme les maillons
d&#39;une chaîne qui pourrait avoir des bifurcations. Chaque commit stocke des
informations sur l&#39;état du dépôt à un instant donné (l&#39;état complet, pas
uniquement un diff).</p>
<p>On construit cette chaîne et ses bifurcations en créant des commits, en
branchant et en fusionant une branche dans une autre.</p>
<p>Enfin, une dernière chose que vous devez garder en tête c&#39;est qu&#39;un commit est
définitif dans le sens ou on ne pourra jamais modifier son contenu (on pourra
par contre le remplacer par un autre). Comme il est unique, il a un numéro qui
est un haché <code>SHA1</code> de diverses informations.</p>
<p>Ces <code>SHA1</code> sont utilisé à foison, habituez-y vous !</p>
<p>Voilà, maintenant sortons nous les doigts et regardons comment ça marche
concrètement.</p>
<h2 id="cr-er-ou-r-cup-rer-un-repo">Créer ou récupérer un repo</h2>
<p>Il y a deux manières de créer un dépôt Git : soit on en veut un tout neuf et on
utilise <code>git init</code>, soit on veut cloner un dépôt déjà existant et on utilise le
bien nommé <code>git clone</code>.</p>
<p>Appellé sans argument, <code>git init</code> initialise un dépôt dans le dossier courant,
on peut lui passer un nom de dépôt en argument pour le créer dans un
sous-dossier spécifique du dossier courant.</p>
<p>Du côté de <code>git clone</code>, on va passer l&#39;adresse d&#39;un dépôt, et optionnellement un
nom local pour le dépôt. Il va récupérer le dépôt à l&#39;adresse spécifiée (c&#39;est
bien foutu hein ?) puis le mettre soit dans un dossier du même nom soit dans un
dossier du nom spécifié en dernier argument.</p>
<p>Par exemple, si je veux cloner le dépôt du site :</p>
<pre><code class="language-console">$ git clone https://github.com/putaindecode/website.git</code></pre>
<p>Ça va créer un dossier <code>website</code> avec le contenu du dépôt.</p>
<p><code>clone</code> accepte plusieurs types d&#39;adresse : HTTP(S), SSH, protocole Git dédié et
même des chemins locaux pour cloner un dépôt situé ailleurs sur le système de
fichiers.</p>
<p>Pour la suite, il va falloir se placer dans un dépôt avec le petit <code>cd</code> qui va
bien pour lancer les vraies commandes intéressantes de Git.</p>
<h2 id="premiers-commits">Premiers commits</h2>
<p>Pour commencer à s&#39;amuser, écrivez un bout de code dans un fichier et
sauvegardez le :</p>
<pre><code class="language-console">$ cat &gt; putain_de_hello_world.rb
puts &quot;Hello, putain de codeur !&quot;
^D</code></pre>
<p>On va tout se suite introduire l&#39;un des concepts déroutants de Git, <em>l&#39;Index</em>.
Git utilise trois zones distinctes pour les fichiers : le dossier de travail
(<em>Working Dir</em>) qui contient les fichiers dans leur version actuelle, <em>l&#39;Index</em>
qui permet de stocker les modifications et <code>HEAD</code> qui pointe vers le dernier
commit.</p>
<p>L&#39;idée, c&#39;est qu&#39;on peut modifier les fichiers comme on le souhaite, et
constuire le commit avec seulement les modifications que l&#39;on souhaite voir
apparaître.</p>
<p>Cette possibilité permet d&#39;avoir des commits atomiques, c&#39;est à dire qui
introduisent une modification simple. Ça évite de se retrouver avec un commit
mammouth qui change tout le programme d&#39;un coup et qui est un enfer pour le
futur développeur qui revient sur le code et qui cherche à comprendre la logique
de sa construction. Ce développeur, c&#39;est vous dans 1 ou 2 semaines.</p>
<p>Pour info, vous verrez parfois <em>l&#39;Index</em> appellé <em>Staging Area</em>, ou encore
<em>Cache</em>.</p>
<p>Git fournit des commandes pour passer les fichiers d&#39;un état à l&#39;autre. Elles
sont certes parfois un peu obscures, mais dans l&#39;ensemble c&#39;est pas si
difficile.</p>
<p>Dans notre cas, notre fichier n&#39;est même pas encore suivi par Git ! Vous pouvez
vérifier ça en utilisant <code>git status</code>, dont vous ne pourrez bientôt plus vous
passer :</p>
<pre><code class="language-console">$ git status
# Sur la branche master
#
# Validation initiale.
#
# Fichiers non suivis:
#   (utilisez &quot;git add &lt;fichier&gt;...&quot; pour inclure dans ce qui sera validé)
#
#    putain_de_hello_world.rb
Aucune modification indexée mais des fichiers non suivis sont présents (utilisez &quot;git add&quot; pour les suivre)</code></pre>
<p>Pour pallier celà, on utilise <code>git add</code> pour l&#39;ajouter direct à l&#39;index.</p>
<p>Dans notre cas, ça donne <code>git add putain_de_hello_world.rb</code></p>
<p>On peut utilise <code>git add</code> pour ajouter des dossiers entiers, des motifs, … Mais
soyez vigilants, c&#39;est une bonne source d&#39;erreurs souvent chiantes.</p>
<p>Vous pouvez vérifier que <code>git add</code> a bien marché avec la commande <code>git status</code>,</p>
<pre><code class="language-console">$ git status
# Sur la branche master
#
# Validation initiale.
#
# Modifications qui seront validées :
#   (utilisez &quot;git rm --cached &lt;fichier&gt;...&quot; pour désindexer)
#
#    nouveau : putain_de_hello_world.rb
#</code></pre>
<p>Ok c&#39;est prêt ! On lance maintenant <code>git commit</code> pour créer notre premier commit
(pas con le <em>naming</em> de la commande hein ?). Si tout se passe bien vous devriez
avoir un éditeur qui s&#39;ouvre pour écrire un message de commit. Prenez l&#39;habitude
de décrire votre changement sur la première ligne succintement et, si vous avez
besoin de détails, sautez une ligne et détaillez les modifications.</p>
<p>Un petit <code>git status</code> nous confirme qu&#39;on s&#39;est pas foiré (la preuve, tout est
propre) :</p>
<pre><code class="language-console">$ git status
# Sur la branche master
rien à valider, la copie de travail est propre</code></pre>
<h2 id="inspecter">Inspecter</h2>
<p>Bon, c&#39;est bien beau de commiter, mais à un moment on arrive sur un projet en
cours et on aimerait bien savoir où on en est. Pour ça vous pouvez utiliser un
outil graphique (il y en a pour <a href="https://wiki.gnome.org/Gitg">Linux</a>, <a href="http://gitx.frim.nl/">OS X</a> et même sûrement
Windows) ou retrousser vos poils de barbe et sortir le bon vieux <code>git log</code>.</p>
<p>C&#39;est un vrai couteau-suisse qui va vous permettre d&#39;inspecter tout l&#39;historique
de votre dépôt, avec des options en veux-tu en voilà pour personnaliser
l&#39;affichage.</p>
<p>Un <code>git log</code> basique ça ressemble à ça :</p>
<pre><code class="language-console">$ git log
commit 8120de7b7139e46b9cbc1c3ee89a02962dbc198e
Author: madx &lt;madx+github@yapok.org&gt;
Date:   Mon Nov 4 23:28:11 2013 +0100

    Premier commit</code></pre>
<p>Oui, c&#39;est le commit que je viens de faire dans la partie précédente. Comment
j&#39;en suis sûr ? Car je peux utiliser <code>git show</code> pour afficher les détails d&#39;un
objet Git (il n&#39;y a pas que des commits, mais on verra ça une prochaine fois).</p>
<p><code>git show</code> prend en argument le fameux <code>SHA1</code> du commit :</p>
<pre><code class="language-console">$ git show 8120de7b7139e46b9cbc1c3ee89a02962dbc198e
commit 8120de7b7139e46b9cbc1c3ee89a02962dbc198e
Author: madx &lt;madx+github@yapok.org&gt;
Date:   Mon Nov 4 23:28:11 2013 +0100

    Premier commit

diff --git a/putain_de_hello_world.rb b/putain_de_hello_world.rb
new file mode 100644
index 0000000..ded37dc
--- /dev/null
+++ b/putain_de_hello_world.rb
@@ -0,0 +1 @@
+puts &quot;Hello, putain de codeur !!!&quot;</code></pre>
<p>Dit comme ça, ça a pas l&#39;air de casser trois pattes à un canard, mais c&#39;est la
base de la base de la praticité. Je vous fait pas l&#39;insulte de vous expliquer le
détails, vous êtes sans doute assez malins pour comprendre ce que git raconte
sur la sortie de ces deux commandes.</p>
<p>Remarquez que <code>git show</code> affiche en bonus les différences introduites par un
fichier. Ces différences on peut aussi les voir avant de commiter avec <code>git
diff</code>, ce qui est bien pratique.</p>
<p>Entraînez vous maintenant à faire des commits, à inspecter et à farfouiller les
pages de <code>man</code>, c&#39;est la meilleure façon d&#39;apprendre. Après on va attaquer le
gros morceau, celui qui fait la force de Git.</p>
<figure>
  <img src="/memes/mind_blown.gif" alt="Mind blown">
</figure>

<h2 id="branchement-et-fusions">Branchement et fusions</h2>
<p>Créer une branche, ça permet de travailler sur une fonctionnalité ou un bug
précis, sans encombrer la ligne de conduite principale, qui peut évoluer sous
d&#39;autres contraintes.</p>
<p>Dans Git, les branches sont une partie essentielle de quasiment tout <em>workflow</em>,
et leur manipulation est très rapide et très légère.</p>
<p>Pour en revenir à mon histoire de maillon, créer une branche revient à créer un
point à partir duquel deux chaînes vont être possibles.</p>
<p>C&#39;est aussi simple qu&#39;un <code>git branch le-nom-de-ma-branche</code>. Cette commande se
contente de créer la branche, pour se positionner dessus on utilise <code>git
checkout</code> qui permet de naviguer de branche en branche tel Tarzan sur ses
lianes.</p>
<p>Comme c&#39;est super chiant à écrire, il existe un raccourci bien pratique : <code>git
checkout -b</code>, auquel on passe un nom de branche comme pour <code>git branch</code>.</p>
<p>Une fois qu&#39;on est bien sur la branche, tous les commits suivants seront liés à
cette branche.</p>
<p>On peut utiliser <code>git branch</code> sans argument pour lister les branches, celle avec
un petit asterisque devant c&#39;est la branche courante.</p>
<p>Essayons ça avec notre petit dépôt :</p>
<pre><code class="language-console">$ git branch
* master
$ git checkout -b add-shebang
Basculement sur la nouvelle branche &#39;add-shebang&#39;
$ vim putain_de_hello_world.rb
$ git status
# Sur la branche add-shebang
# Modifications qui ne seront pas validées :
#   (utilisez &quot;git add &lt;fichier&gt;...&quot; pour mettre à jour ce qui sera validé)
#   (utilisez &quot;git checkout -- &lt;fichier&gt;...&quot; pour annuler les modifications dans la copie de travail)
#
#    modifié : putain_de_hello_world.rb
#
aucune modification n&#39;a été ajoutée au commit (utilisez &quot;git add&quot; ou &quot;git commit -a&quot;)
$ git add putain_de_hello_world.rb
$ git commit
[add-shebang 5d48735] Add shebang
 1 file changed, 1 insertion(+)
$ git log --pretty=oneline --decorate
5d48735fcc805d51e2e294df5d9d22d481250789 (HEAD, add-shebang) Add shebang
8120de7b7139e46b9cbc1c3ee89a02962dbc198e (master) Premier commit</code></pre>
<p>Comme vous le voyez grâce à l&#39;option <code>--decorate--</code> de <code>git log</code>, on a bien
notre branche qui pointe sur le dernier commit fait, alors que la branche de
base fournie par Git, <code>master</code>, reste au commit précédent.</p>
<p>Dernière étape avant la fin de cette article : le redouté et redoutable
<code>merge</code> !</p>
<p>Pour fusionner nos deux branches on va utiliser cette commande en se plaçant sur
la branche dans laquelle on va fusionner et en passant en argument la branche à
fusionner.</p>
<p>Si vous avez bien suivi, on va donc faire les choses suivantes :</p>
<pre><code class="language-console">$ git checkout master
Basculement sur la branche &#39;master&#39;
$ git merge add-shebang
Updating 8120de7..5d48735
Fast-forward
 putain_de_hello_world.rb | 1 +
 1 file changed, 1 insertion(+)</code></pre>
<p>Vous remarquez que Git signale <em>Fast-forward</em>. Comme le commit pointé par
<code>add-shebang</code> est un fils direct de celui de <code>master</code>, Git se contente de faire
pointer <code>master</code> sur celui-ci, ce qui est beaucoup plus rapide.</p>
<p>Dans le cas où on a eu des modifications sur <code>master</code> entre temps, on aurait eu
une vraie fusion des contenus des commits, avec éventuellement une résolution de
conflits, mais on verra ça dans un prochain article !</p>
<h2 id="la-suite">La suite</h2>
<p>On a vu les bases, et très bientôt on va approfondir le sujet, en voyant
notamment comment collaborer, comment résoudre des conflits ou des problèmes
d&#39;utilisation de Git, tout ça dans la joie et la bonne humeur.</p>
<h2 id="r-f-rences">Références</h2>
<p>Si vous voulez en savoir plus sur Git, la <a href="http://git-scm.com/documentation">documentation officielle</a> est plutôt
bien foutue.</p>
<p>Si vous aimez les petites références rapides et illustrées, le <a href="http://rogerdudler.github.io/git-guide/">Git
Guide</a> de Roger Dudler est une bonne manière d&#39;apprendre.</p>
<h2 id="hey-tu-veux-appliquer-a-pour-contribuer-putain-de-code-">Hey ! Tu veux appliquer ça pour contribuer à Putain de Code ?</h2>
<p>Pas de problème, on a écrit un post exprès :
<a href="posts/comment-contribuer/">Comment contribuer</a> !</p>

]]></description>
              <pubDate>Wed, 06 November 2013 01:00:00 +0100</pubDate>
              <link>/dist/posts/git/versionner-avec-git/index.html</link>
              <guid isPermaLink="true">/dist/posts/git/versionner-avec-git/index.html</guid>
          </item>

          <item>
              <title>HTML ? Hâche-Thé-Aime-Elle vous dites ?</title>
              <description><![CDATA[

<p>Ahh, le HTML. LE <a href="http://fr.wikipedia.org/wiki/HTML">H.T.M.L</a>. Sacré langage hein ?</p>
<p>On le connait tous ce fameux truc qu&#39;on retrouve dans pas mal d&#39;URLs : <code>.html</code>.
Oui d&#39;accord par le passé on avait l&#39;extension de radin <code>.htm</code>, mais elle n&#39;a
clairement pas duré.</p>
<p>Vous vous demandez déjà ce qu&#39;il-y-a à raconter sur l&#39;HTML peut être ? Et bien,
je ne suis pas là pour vous apprendre toutes les balises, leurs enfants, parents,
les cousins cousines, patati patata… Ah ça non, j&#39;ai autre chose à faire,
et vous aussi. Et si c&#39;est ce que vous cherchez, vous trouverez ce qu&#39;il vous
faut sur <a href="http://docs.webplatform.org/wiki/html/elements">tout</a>
<a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element">un</a>
<a href="http://www.w3.org/html/wg/drafts/html/CR/dom.html#elements">tas</a>
<a href="http://en.wikipedia.org/wiki/HTML_element">d&#39;autres</a>
<a href="http://www.vectorskin.com/referentiels-standards-w3c/balises-html5/">sites</a>.</p>
<p>Ce que je vais faire par contre, c&#39;est tenter de partager un document sérieux
(dans le fond hein) avec tout pleins de conseils super pertinents pour que vous
écriviez de l&#39;HTML comme personne.
Non je déconne. En fait, ça va être la grosse marrade avec les trucs
les plus nazes que je peux vous raconter. C&#39;est parti mon jQuéri.</p>
<h2 id="l-ancien-testament">L&#39;ancien testament</h2>
<p>Si vous avez ouvert ne serait-ce que quelques documents HTML dans votre vie,
vous avez du croiser ce qu&#39;on appelle un <a href="http://fr.wikipedia.org/wiki/Doctype">doctype</a>
qui ressemble à ça:</p>
<pre><code class="language-html">&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;
   &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;</code></pre>
<p>Vous pourrez remarquer dans ce <del>petit</del> gros bout de code bien relou qu&#39;il y&#39;a
une <a href="http://fr.wikipedia.org/wiki/Uniform_Resource_Locator">URL</a>:
c&#39;est tout simplement la DTD (doctype) du langage en question.
Avec les spécifications pour la validation, toussa toussa…
Si vous avez 2 minutes, allez jeter un coup d&#39;oeil.</p>
<p>Je ne vais pas vous le cacher, et même si en théorie, par héritage de SGML/XML
ça part d&#39;une bonne intention, dans la pratique ça sert juste à se toucher la
nouille sur la validation.
Car aujourd&#39;hui HTML (5) n&#39;est clairement plus du XML.</p>
<p>Oui bon ok, moi même à une époque j&#39;ai eu ma passe où je collais ce petit badge
partout dans mes footers:</p>
<figure>
  <a href="http://validator.w3.org/check?uri=referer">
    <img src="http://www.w3.org/Icons/valid-xhtml10"
        alt="Valid XHTML 1.0 Transitional" height="31" width="88" />
  </a>
  <figcaption>Ça pète la classe hein ?</figcaption>
</figure>

<p>Mais bon les conneries, ça va un moment.
Pour info, j&#39;ai du valider le code suivant pour obtenir ce logo:</p>
<pre><code class="language-html">&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;
   &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;
 &lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot;&gt;
&lt;head&gt;
  &lt;title&gt; &lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;

&lt;/body&gt;
&lt;/html&gt;</code></pre>
<p>Ben dites donc, c&#39;est propre tout ça. Un petit document tout vide mais déjà
bien rempli.
Mais attendez en 2013, on peut pas faire mieux ? Oh si !</p>
<h2 id="le-nouveau-testament">Le nouveau testament</h2>
<pre><code class="language-html">&lt;!doctype html&gt;
&lt;title&gt; &lt;/title&gt;</code></pre>
<p>Il faut savoir qu&#39;un simple document <em>valide</em>, peut se résumer à ça.
Oui oui mes cocos, ce document est parfaitement valide. Voilà j&#39;voulais vous le
dire. Arrêtez d&#39;utiliser des doctypes dans tous les sens, ça ne sert à rien.
Sachant la qualité du code qu&#39;on trouve sur les internets, les navigateurs
s&#39;arrêtent au parsing lorsqu&#39;ils voient ça <code>&lt;!doctype html</code>
(C&#39;est <a href="http://paulrouget.com/">Paul Rouget</a> qui me l&#39;a dit, je le crois donc
sur parole).
Et après ma petite parenthèse ci dessous, je vais vous expliquer pourquoi.</p>
<p>Car je sais ce que certains vont me rétorquer.</p>
<blockquote>
<p>Oui mais moi monsieur, je valide en <strong>XHTML 1.1 Strict Turbo X Prime Ultra</strong><br />
Puis ton document valide là, il sera valide quand HTML5 sera finalisé…</p>
</blockquote>
<p>Dans un sens ils n&#39;auraient pas tort. Mais dans la pratique, les navigateurs
s&#39;en contre branlent de savoir quel type d&#39;HTML vous utilisez
<small>(à moins que vous aimiez jouer avec la mort et que vous utilisez le
prologue XML lorsque vous servez de l&#39;XHTML…)</small>.
Car quand bien même vous utilisez un doctype à rallonge, il est tout à fait
possible que vous vous chiiez, et que vous laissiez des erreurs.
Oui, l&#39;erreur est humaine…
Puis HTML 5 est déjà bien implémenté dans les grandes lignes. Et ça car il est
presque rétrocompatible.
Vous devriez le comprendre d&#39;ici la fin de cet écrit. Ou pas. Mais je vous le
dit, il a été pensé dans ce sens.</p>
<p>Revenons à la validation. Du coup à quoi ça sert de valider ?
On va voir ça par un exemple digne des plus grands diplômes.</p>
<h2 id="ce-p-fout-la-merde-">Ce <code>&lt;p&gt;</code> fout la merde.</h2>
<p>Prenons le code suivant:</p>
<pre><code class="language-html">&lt;!doctype html&gt;
&lt;title&gt;Putain de page&lt;/title&gt;
&lt;style&gt;
  p {
    margin-top: 2em;
    margin-bottom: 10em;
  }
&lt;/style&gt;
&lt;h1&gt;Ma première putain de page html&lt;/h1&gt;
&lt;p&gt;
  Ouais mec t&#39;as vu ce code de ouf ?
  Il est trop bien parce que:
  &lt;ul&gt;
    &lt;li&gt;Il est &lt;del&gt;valide&lt;/del&gt;&lt;/li&gt;
    &lt;li&gt;Il est beau&lt;/li&gt;
  &lt;/ul&gt;
&lt;/p&gt;</code></pre>
<p>Certains d&#39;entre vous ont du remarquer la coquille.
Celle-là, mes élèves qui découvrent le HTML me la font à chaque fois lorsqu&#39;ils
codent leur super CV
(super exercice tavu, ils apprécient particulièrement le titre).</p>
<p>Toi là au fond, t&#39;as pas repéré le souci encore ?</p>
<p>Regarde plutôt le rendu:</p>
<iframe
  class="putainde-Post-iframe"
  height="350"
  src="/posts/html/hache-the-aime-elle-vous-dites/notvalid.html">
</iframe>

<blockquote>
<p>WAT ?
ET MON MARGIN BOTTOM KESSIFÉLÀ EN DEUBEULE ?</p>
</blockquote>
<p>Le rapport avec la validation me direz-vous ? Et bien plutôt que de perdre du
temps à comprendre le pourquoi du comment, en validant le code ci dessus,
l&#39;erreur vous est implicitement expliquée
(oui ce code n&#39;a qu&#39;une seule erreur à la validation).</p>
<blockquote>
<p>Line 17, Column 4: <strong>No p element in scope but a p end tag seen.</strong></p>
</blockquote>
<p>Typiquement, il faut savoir comprendre un message d&#39;erreur et savoir lire entre
les lignes. Pas faire &quot;mais monsieur, j&#39;comprends pas là&quot; (d&#39;ailleurs mes élèves
valident tous leur code, pour apprendre sur le tas, c&#39;est une bonne façon).</p>
<p>Celui là nous dit en gros : <em>je ne vois pas d&#39;element <strong>p</strong> à fermer dans le coin</em>.
Ca veut dire que… Ça veut dire que mon <strong>p</strong> ouvert n&#39;est pas reconnu ?
Mais attend qu&#39;est-ce que c&#39;est que cette histoire ?!</p>
<p>Si vous prenez 10 secondes pour inspecter ce code, vous allez vite vous
aperçevoir qu&#39;il est parsé ainsi:</p>
<pre><code class="language-html">&lt;p&gt;…&lt;/p&gt;
&lt;ul&gt;…&lt;/ul&gt;
&lt;p&gt;&lt;/p&gt;</code></pre>
<p><em>Mais qu&#39;est-ce que… ? Hein ? Mais ? Quoi ? Comment ?</em></p>
<p>Oui vous avez bien vu. L&#39;HTML est parsé n&#39;importe comment. Enfin non il est parsé
comme il peut, au mieux.
Je pense que là vous commencez à comprendre ?</p>
<p>Ce que j&#39;essaye de vous montrer par là, ce qu&#39;il faut toujours faire attention
entre ce qu&#39;on écrit et ce qu&#39;on pense avoir comme résultat, même avec du
<em>simple</em> HTML.</p>
<p><strong>Bon après j&#39;espère qu&#39;en 2013, vous avez tous le réflexe d&#39;inspecter
l&#39;HTML dès que vous avez un truc bizarre en CSS ou en JavaScript… Si
c&#39;est pas encore le cas, prenez l&#39;habitude.</strong></p>
<h2 id="mais-du-coup-le-navigateur-il-fait-n-importe-quoi-">Mais du coup le navigateur il fait n&#39;importe quoi ?</h2>
<p>Le navigateur essaye clairement de faire au mieux.
Si vous inspectez l&#39;exemple précédent, vous vous apercevrez aussi que je n&#39;ai
mis aucune balise <code>&lt;html&gt;</code>, <code>&lt;head&gt;</code> ou <code>&lt;body&gt;</code>.
Pourquoi ? Ben car le parseur le fait à ma place.
Mais pourquoi il fait ça ?
Tout simplement car on oublie (très - trop ?) souvent de bien écrire.
Comme quand j&#39;écris en.</p>
<p>La balise <a href="https://developer.mozilla.org/fr/docs/Web/HTML/Element/tbody"><code>&lt;tbody&gt;</code></a>
est un bon exemple.
Si vous inspectez vos tableaux HTML, vous verrez vite fait que cette balise, que
quasiment personne ne connait/utilise, est pourtant nécessaire/utile.
Mais du coup, si je me fais une petite requête JavaScript
<code>document.querySelectorAll(&#39;table &gt; tr&#39;)</code>,
il est fort possible que je n&#39;aie pas ce que je souhaite.
<a href="http://codepen.io/MoOx/pen/esFjx">La preuve</a>.</p>
<p>Voyons une autre exemple: mettons nous à la place d&#39;un navigateur si,
alors que je suis en XHTML 1.1 Strict, je lui glisse une balise <code>&lt;center&gt;</code>.</p>
<ul>
<li><p><strong>Cas 1.</strong> Je n&#39;ai pas fait attention au doctype et je veux vraiment une balise
<code>&lt;center&gt;</code> : bah là, rien à dire à part <em>Merci</em>. Le navigateur essaye clairement
de faire au mieux, et dans un cas comme celui là, on ne peut que le remercier.</p>
</li>
<li><p><strong>Cas 2.</strong> Je sais exactement dans quel doctype je suis, j&#39;ai conscience de ce
que je fais: je joue au con, tant pis pour ma gueule !</p>
</li>
</ul>
<p>Dans tous les cas, le navigateur va laisser passer cette balise au cas où que.
Puis bon faut avouer que c&#39;est super pratique cette balise hein ?
Comme <code>&lt;blink&gt;</code> et <code>&lt;marquee&gt;</code> quoi. ❤</p>
<figure>
  <img src="/memes/canthandlemyswag.gif" alt="Can&#39;t handle my swag">
  <figcaption><marquee>Marquee for the win.</marquee></figcaption>
</figure>

<h2 id="note-de-service">Note de service</h2>
<p>S&#39;il vous plaît mesdames messieurs, lorsque vous faites du CSS inline, ou que
vous incorporez un JavaScript, arrêtez vous à des choses simples,
qui fonctionnent :</p>
<ul>
<li><p><code>&lt;style&gt;</code> suffit. Pas besoin de mettre un type, un langage etc. Et ça vous
évitera des <a href="http://codepen.io/MoOx/pen/sEzuJ">prises de têtes à la con</a>.
Puis vous avez déjà utilisé autre chose que du CSS vous ?!</p>
</li>
<li><p><code>&lt;script&gt;</code>, idem, même sur IE 6.
Pareil que précédement, pas besoin de mettre un hideux
<code>&lt;script type=&quot;text/javascript&quot; language=&quot;JavaScript 1.1&quot;&gt;</code>.
La moindre faute de frappe ne pardonne pas.
Aucun intêret de se fatiguer, sauf si votre <a href="https://code.google.com/p/ruby-in-browser/">script n&#39;est pas du JavaScript</a>.</p>
</li>
</ul>
<h2 id="le-mot-de-la-fin">Le mot de la fin</h2>
<p>Ne soyez jamais sûr de vous, que ce soit pour écrire de l&#39;HTML ou faire une mise
en prod&#39; un vendredi soir à <a href="http://www.miximum.fr/tranche_vie/62-le-bug-de-17h30">17h30</a>.
Faites pas les malins. Ne sous-estimez pas HTML.
Si ça merde quelque part, vérifiez plus loin que le bout de votre nez, que votre
règle CSS qui marche pas, ou votre morceau de JavaScript buggé.</p>
<h2 id="-aller-plus-loiiin-allez-plus-haaauuut-https-www-youtube-com-watch-v-bcylqudsn5g-t-39s-"><a href="https://www.youtube.com/watch?v=BCYLQUdsN5g&amp;t=39s">Aller plus loiiin, allez plus haaauuut… !</a></h2>
<ul>
<li><a href="https://github.com/necolas/idiomatic-html" lang="en">idiomatic-html</a>
(<a href="http://fr.wikipedia.org/wiki/Idiomatique">ceci n&#39;est pas une contraction d&#39;<em>idiot</em> et d&#39;<em>automatique</em></a>).</li>
<li><a href="https://github.com/necolas/idiomatic-css" lang="en">idiomatic-css</a> (traduction incluse)</li>
<li>Validation automatique dans un workflow Grunt:<ul>
<li><a href="https://github.com/praveenvijayan/grunt-html-validation">praveenvijayan/grunt-html-validation</a></li>
<li><a href="https://github.com/jzaefferer/grunt-html">jzaefferer/grunt-html</a> (basé sur validator.nu)</li>
</ul>
</li>
</ul>

]]></description>
              <pubDate>Thu, 07 November 2013 01:00:00 +0100</pubDate>
              <link>/dist/posts/html/hache-the-aime-elle-vous-dites/index.html</link>
              <guid isPermaLink="true">/dist/posts/html/hache-the-aime-elle-vous-dites/index.html</guid>
          </item>

    </channel>
</rss>
