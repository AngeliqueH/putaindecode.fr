<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Putain de Code !</title>
        <description>On voulait mettre une baseline mais on a pas été foutu d&#x27;en trouver une</description>
        <link>/</link>
        <generator>happyplan 0.4.0-alpha.8</generator>
        <lastBuildDate>Tue, 05 November 2013 00:00:00 +0100</lastBuildDate>

          <item>
              <title>This is a fucking example</title>
              <description>

{{#markdown}}

{{/markdown}}
</description>
              <pubDate>Tue, 05 November 2013 15:56:41 +0100</pubDate>
              <link>/en/posts/example.html</link>
              <guid isPermaLink="true">/en/posts/example.html</guid>
          </item>

          <item>
              <title>Structurer son projet avec Revel et Mgo</title>
              <description>

{{#markdown}}
Tu te sens l’âme d’un rebelle ? Tu veux tester de la techno atypique ? Ça tombe 
bien, aujourd’hui on est là pour ça.  Je t’apprends sûrement pas ce qu’est le 
langage Go, apparu fin 2009 comme un véritable ovni, de toutes façons c’est pas 
le but de cet article. Si tu ne connais pas, je t’invite à aller sur la 
[homepage du projet](http://goo.gl/EF1rIa) et à parcourir le 
[go-tour anglais](http://goo.gl/7z0uzx) ou 
[celui en français](http://goo.gl/XMwsIY), c&#x27;est un showcase complet du langage.

##Les technos utilisées

###[Golang](http://golang.org)

Langage compilé, communément considéré comme “désorienté objet”, c’est une 
alternative solide au C/C++ qui prône un découpage modulaire (par “package”) des
applications. Il est prédisposé à une utilisation en développement web grâce à 
un package natif de gestion des réseaux et du protocole http.

###[Revel](http://robfig.github.io/revel/)

Framework développé en Go et pour Go. Il intègre tout ce qu’il faut pour 
développer une application web : rechargement du code à chaud, gestion des urls 
par routing, parsing des paramètres GET et POST, mécanisme de validation des 
données, gestion de sessions, gestion du cache, framework de tests et même 
moteur de tâches planifiées cron-likes. Il a pour particularité d’être 
complètement agnostique à l’heure actuelle sur la partie modèle et ne fourni 
aucun ORM, ODM, ni même l’ombre d’un driver pour Mysql.

###[Mgo](http://labix.org/mgo)

Driver Go complet pour MongoDB, permettant d’établir la connexion et d’envoyer 
des requêtes. Il dispose d’un mécanisme de mapping des documents mongodb sur les
type struct de Go.

###[MongoDB](http://www.mongodb.org/)

Base de données NoSql agile et scalable, les documents sont stockés au format 
json dans des collections. Le requêtage se fait en manipulant des objets et des 
fonctions javascript.

##Attends, attends ... Pourquoi Go ?
Le premier vrai argument, c&#x27;est la **performance**. Sans rentrer dans 
l&#x27;explication hyper poussée d&#x27;un [benchmark](http://goo.gl/3dqA7q), on peut 
affirmer sans trop de risque que Go se hisse au moins au niveau de node.js. On 
va pas risquer de vexer les autres membres du crew avec des affirmations 
trollesques dès le premier post.

On peut aussi ajouter que Go est un **langage moderne**, qui inclut toutes les 
**petites friandises pour attirer le développeur** curieux et assoiffé de 
qualité. Framework de tests et outil de mise en forme du code sont natifs et 
permettent à la techno d&#x27;échapper aux interminables guerres de conventions : 

&gt; De toutes façons le no-newline avant &quot;{&quot; c&#x27;est vraiment pour les pourritures 
&gt; responsables de 99% des maux de la Terre.  
&gt; - &lt;cite&gt;Un évangeliste du PSR&lt;/cite&gt;

Troisième argument de choix en Go : la **simplicité de parallélisation**. 
Personne ne viendra te dire *&quot;ça c&#x27;est synchrone, sry bro.&quot;* ou *&quot;ça c&#x27;est 
asynchrone, callback it bitch.&quot;*. Tout repose sur le mot clef qui a donné son 
nom au langage (ou l&#x27;inverse) &#x60;go&#x60;. Tu peux te faire un &#x60;go myFunc()&#x60; et paf ! 
Tout ce qui est appelé dans myFunc() saute sur un thread séparé. Et pour gérer 
la synchronicité entre plusieurs thread il y a un mécanisme de canaux. Ce sont 
des files FIFO (the First In is the First Out) dont la lecture est bloquante 
(il existe des techniques évoluées pour faire du polling, cf 
[gotour#68](http://goo.gl/ijKHTq)). 

Pour finir, cerise sur le gateau, **Go compile vite**, extrêment vite, et ça va
sauver ton intégrité mentale sur les gros projets. Par contre c&#x27;est foutu pour
tes pauses cafés aux prétextes douteux.

##Let’s Go (#nojoke, siriouz bizness)
On va partir du principe que tu as Go et Revel prêts pour la baston. On attaque 
direct à sec par le classique “revel new” puisqu&#x27;on va partir de la structure de
base.

&#x60;&#x60;&#x60;
revel new github.com/OwlyCode/PutainDeProjet
&#x60;&#x60;&#x60;

Là théoriquement, tu te retrouves avec la structure par défaut du boilerplate 
revel, quelque chose comme ça:

- app
  - controllers
  - views
- conf
- messages
- public
- tests

C’est là qu’on se met au boulot. On a de quoi faire un site complet avec ça mais
 aucune trace de gestion de base de données là dedans. On commence donc par 
 créer un dossier &#x60;app/modules&#x60; et un sous dossier &#x60;app/modules/mongo&#x60;. C’est 
 dans ce dossier que va se trouver notre gestionnaire de connexion à mongoDB. 
 En fait ce n’est rien de plus qu’un binding entre Revel et Mgo :

&#x60;&#x60;&#x60;go
package mongo

import (
    &quot;github.com/robfig/revel&quot;
    &quot;labix.org/v2/mgo&quot;
    &quot;sync&quot;
)

// Extension du controlleur.
type Mongo struct {
    *revel.Controller
    MongoSession  *mgo.Session
    MongoDatabase *mgo.Database
}

// Stockage global de la session dont la visibilité est restreinte au package.
var session *mgo.Session

// Singleton
var dial sync.Once

// Renvoie la session mgo en cours, si aucune n&#x27;existe, elle est créée.
func GetSession() *mgo.Session {

    host, _ := revel.Config.String(&quot;mongo.host&quot;)

    // Grâce au package sync cette fonction n&#x27;est appelée 
    // qu&#x27;une seule fois et de manière synchrone.
    dial.Do(func() { 
        var err error
        session, err = mgo.Dial(host)
        if err != nil {
            panic(err)
        }
    })

    return session
}

// Alimente les propriétés affectées au controlleur 
func (c *Mongo) Bind() revel.Result {
    // Oublie pas de mettre mongo.database dans le app.conf, genre &quot;localhost&quot;
    databaseName, _ := revel.Config.String(&quot;mongo.database&quot;)
    
    c.MongoSession = GetSession()
    c.MongoDatabase = c.MongoSession.DB(databaseName)

    return nil
}

// Fonction appelée au chargement de l&#x27;application.
// Elle effectue un appel a notre fonction Bind avant 
// chaque execution du controlleur.
func init() {
    revel.InterceptMethod((*Mongo).Bind, revel.BEFORE)
}
&#x60;&#x60;&#x60;

On a créé notre connexion à mongo, mais maintenant on va aussi l’utiliser. Dans 
le contrôleur, rien de plus simple : 

&#x60;&#x60;&#x60;go
import (
    &quot;github.com/robfig/revel&quot;
    &quot;github.com/OwlyCode/PutainDeProjet/app/modules/mongo&quot;
)

type AppController struct {
    *revel.Controller
    mongo.Mongo
}

func (c *AppController) Index() revel.Result {
    usersCollection := c.MongoDatabase.C(&quot;users&quot;)
    // tu peux maintenant manipuler ta mgo.Collection.
    // [ ... ]
}
&#x60;&#x60;&#x60;

Mais tu peux aussi l’appeler ailleurs dans le projet, par exemple dans un autre 
module :

&#x60;&#x60;&#x60;go
import (
    &quot;github.com/OwlyCode/PutainDeProjet/app/modules/mongo&quot;
)

func DoStuff(user *models.User) {
    session := mongo.GetSession()
    // tu peux maintenant manipuler ta mgo.Session.
    // [ ... ]
}
&#x60;&#x60;&#x60;

**C&#x27;est bien beau de copier coller mais ...**  
... tu te demandes certainement pourquoi on a créé un dossier &#x60;app/modules&#x60;, si 
c’est pour n’y mettre qu’un sous dossier mongo dedans. Et c’est une très bonne 
question. En fait, notre dossier mongo représente un module du projet bien 
délimité. A l’avenir, si tu veux aussi brancher du mysql, et bien y a juste à 
créer &#x60;app/modules/mysql&#x60;. Rien ne change pour l’existant et tu ne pollues pas 
la racine de ton projet. L’autre avantage c’est qu’en un coup d’oeil dans ce 
dossier tu as un aperçu direct des features de l’application.

Enfin, l&#x27;approche module, c&#x27;est aussi un gage de MVC. Admettons qu&#x27;on veuille 
coder une application de facturation, il nous suffit de créer un dossier 
&#x60;app/modules/invoicing&#x60; et de travailler dans ce dossier sur toute la partie 
métier. Comme par exemple le calcul des totaux, le calcul de la TVA etc... Grâce
 à cette approche, on garde des contrôleurs très fins et restreints à ce que 
 doit être leur rôle premier : faire communiquer le modèle et la vue.

##Modèles globaux, modèles locaux
J’ai évoqué plus haut dans la liste des technos une feature hyper sexy de mgo : 
le mapping des documents mongodb en json sur les types struct. Ce qui veut dire 
qu’avec mgo, on peut définir des modèles bien structurés. Certains seront 
communs à toute l’application, par exemple un utilisateur, mais d’autres seront 
spécifiques à un module, comme par exemple une facture.

Une bonne pratique est d’approcher le rangement des modèles selon cette 
structure:

- app
  - controllers
  - __models__
  - modules
    - invoicing
      - engine
      - __models__
    - mongo
  - views
- conf
- messages
- public
- tests

Le but du jeu évidemment c&#x27;est d&#x27;avoir le moins de modèles globaux possibles. 
Idéalement, si le dossier &#x60;app/models&#x60; n&#x27;existe pas ce n&#x27;est pas plus mal. Mais 
attention à ne pas chercher à l&#x27;éliminer au prix de la modularité du code. Il 
vaut mieux avoir un modèle explicitement déclaré comme global plutot que de 
l&#x27;isoler dans un module et de rendre tous les autres modules du projet 
dépendants de ce dernier.

Pourquoi c&#x27;est important ? C&#x27;est surtout parce que ça pose les bonnes questions 
et amène les bonnes remarques. &quot;Vais-je avoir besoin de ce modèle réellement 
PARTOUT ?&quot;, &quot;C&#x27;est étrange j&#x27;ai créé deux modules mais au final je passe mon 
temps à faire des va-et-vient de l&#x27;un à l&#x27;autre... Peut être que je devrais les 
fusionner.&quot; ou encore &quot;90% de mon projet se trouve dans un seul module, il y a 
peut être un problème.&quot;. Mais au delà de ça, ça te permets d&#x27;isoler des modules 
quasi autonomes (deux ou trois coups d&#x27;abstraction avec des interfaces et ça 
roule). Tu pourras plus tard les sortir de ton projet si par exemple tu veux les
réutiliser sur un autre (svn include pour les ancêtres, git submodules pour les
autres).

##Pour aller plus loin
Isoler distinctement le gestionnaire de connexion, la logique métier et les 
modèles dans des modules est une première étape vers une architecture propre et 
évolutive. Tu peux même pousser ça plus loin en utilisant des interfaces comme 
je l&#x27;ai brièvement mentionné un peu plus tôt, c&#x27;est même d&#x27;ailleurs ce que je te
conseille. Si tu veux creuser ce sujet là tu trouveras pas mal de monde qui s&#x27;y
intéresse en fouinant sur le 
[groupe de discussion des utilisateurs golang](http://goo.gl/qePO51). 
Tu as par exemple ce gars là qui a
[remplacé sa dépendance à la librairie mgo par des interfaces](http://goo.gl/HZmrHJ) 
pour éviter d&#x27;inclure le package a chaque fois et faciliter ses tests. Tu peux 
envisager de faire la même chose pour découpler tes modèles et la logique métier
.

En attendant il ne me reste qu&#x27;à te souhaiter une bonne coding night, tu as 
toutes les armes nécessaires pour gérer mongo dans ton projet revel. ;-)

{{/markdown}}
</description>
              <pubDate>Tue, 05 November 2013 15:56:41 +0100</pubDate>
              <link>/posts/backend/golang-structurer-revel-et-mgo/index.html</link>
              <guid isPermaLink="true">/posts/backend/golang-structurer-revel-et-mgo/index.html</guid>
          </item>

          <item>
              <title>Comment contribuer ?</title>
              <description>

{{#markdown}}
Ici, chez Putain de Code, dans notre building 8 étages vitres teintées avec
masseuses et coke à volonté et à n&#x27;importe quelle heure de la journée, on sait
qu&#x27;on va forcément t&#x27;aider à comprendre pas mal de trucs, mais on sait aussi
qu&#x27;on peut faire des fois des erreurs dans les articles (à cause de la coke)
ou tout simplement qu&#x27;il existe des types encore plus hipster
qu&#x27;[\_mlb](http://putaindecode.fr/le-crew/#mlbli) et qui voudront profiter de
notre renomée inter~~nationale~~galactique pour se faire un peu de visibilité
en proposant un post. Du coup, on s&#x27;attend vraiment à ce que tu aides à faire
avancer le bouzin, que t&#x27;apportes ta pierre à l&#x27;édifice quoi (oui on t&#x27;apprend
des expressions aussi), ou ta PR au repo comme on dit dans le monde des
développeurs des internets.

## GitHub

* Déjà, si t&#x27;en as pas, crée toi un compte GitHub (avant qu&#x27;on te caillasse),
  et vu que tu commences à lire des ressources sur notre site, crois moi que
  tu vas commencer à le faire chauffer plus vite que prévu.

* Ensuite il faut que tu installes tout le nécessaire pour bosser sur un
  *repo* GitHub (oui on va commencer à utiliser des anglicismes dès maintenant
  donc habitues toi y, *repo* = dépôt de code, comme tu peux le constater, la
  francisation, c&#x27;est moche), on va te faire un post qui va regrouper tout ce
  qu&#x27;il te faut pour installer et configurer Git pour bosser sur GitHub.

* Après, il faut que tu crées ce qu&#x27;on appelle un *fork* du repo. Un fork
  c&#x27;est juste ta propre copie du repo. Bah ouais, tu vas pas directement
  travailler sur notre repo et nous le crader sans qu&#x27;on puisse bouger
  l&#x27;orteil. Non monsieur, sur GitHub on est des gens civilisés et on créé sa
  propre copie dans son coin avant de demander à papa si on a le droit
  d&#x27;apporter les modifs sur le repo principal.

* Pour ça, clique sur le bouton *Fork* en haut à droite du repo. GitHub va
  créer une copie du repo sur ton propre compte GitHub, où tu pourras
  travailler tranquillement.

  &lt;figure&gt;
    ![Bouton Fork]({{ happyplan.baseUrls.media }}/github/fork-button.jpg)
    &lt;figcaption&gt;Clique au fond à droite&lt;/figcaption&gt;
  &lt;/figure&gt;

* Maintenant que t&#x27;as enfin notre magnifique repo dans ton compte, tu devrais
  te sentir honoré. Une fois que t&#x27;as appelé toute ta famille et les 3
  pèquenauds qui te servent d&#x27;amis, tu dois pouvoir y coder dessus sur ton PC.
  On va partir du principe que tu t&#x27;appelles Clint. Et que ton nom c&#x27;est
  Horris. T&#x27;as donc choisi comme pseudo GitHub &#x60;clinthorris&#x60; (oui t&#x27;aurais du
  réfléchir toi aussi). Donc tu te débrouilles pour aller dans un dossier vide
  et tu vas cloner notre repo. Cloner = faire une copie d&#x27;un repo distant (sur
  les serveurs de GitHub par exemple) en local (ton vieux Pentium II sous XP
  dans notre cas). Ensuite il faut que tu te rendes dans ce dossier en ligne
  de commande (sous Windows tu y vas avec l&#x27;invite de commande mais on te
  prévient qu&#x27;on va pas être copains longtemps, trouve un OS décent putain,
  sous Mac OS X tu utilises le terminal, et sous Linux je pense qu&#x27;on a pas à
  t&#x27;expliquer).

  &#x60;&#x60;&#x60;
  $ git clone https://github.com/clinthorris/website.git putaindecode
  &#x60;&#x60;&#x60;

* Ensuite tu dois ajouter ce qu&#x27;on appelle une remote. Une remote c&#x27;est une
  référence du repo principal, le beau, le grand, le nôtre. En gros, ça va te
  servir que si tu fais une modification ou une contribution sur notre site
  aujourd&#x27;hui, et que dans un mois tu veuilles encore en faire, tu pourras
  facilement rattraper tout ce qu&#x27;on aura fait entre temps. La remote en
  rapport avec le repo principal, on l&#x27;appelle souvent *upstream*

    &#x60;&#x60;&#x60;
    $ cd putaindecode
    $ git remote add upstream https://github.com/putaindecode/website.git
    $ git fetch upstream
    &#x60;&#x60;&#x60;

* Alors là, normalement, t&#x27;as le dossier propre et frais, pêché du matin. Vu
  que notre site pète la classe, et qu&#x27;on l&#x27;a fait en utilisant quand même des
  technos ultra cool genre [HappyPlan](https://github.com/happyplan/happyplan)
  (un truc fait par @_kud et @MoOx, t&#x27;en profiteras pour aller jeter un oeil,
  fais pas ton rat, t&#x27;es pas pressé), node, bower, toussa, il va falloir que
  t&#x27;installes les dépendances, les requirements, et toute la ribambelle de
  fichiers qui vont bien. Pour faire ça, c&#x27;est pas compliqué, tu vas lire le
  README.md à la racine du repo. On fait exprès de pas te le dire ici parce
  que c&#x27;est un peu une convention pour tous les projets susceptibles d&#x27;être
  utilisés en Open Source, et que ça te fait pas de mal de commencer à
  apprendre à bien bosser.

* Une fois ton site tout installé, t&#x27;as plus qu&#x27;à aller dans ton dossier grâce
  à la ligne de commande, et à taper &#x60;$ happyplan&#x60;, tu verras tout un tas de
  trucs grunt s&#x27;exécuter, ne t&#x27;inquiètes pas. À la fin du processus, ça
  devrait te lancer le site en local dans le browser. Là j&#x27;espère que tu te
  rends compte qu&#x27;avec une seule ligne de commande on t&#x27;a fait tourner un site
  complet. Et là on te voit déjà en train de baver et te rappeler tes longues
  soirées en train d&#x27;installer PHP, MySQL, un WordPress, la bonne version des
  plugins, de la conf à n&#x27;en plus finir... ah qu&#x27;est-ce que tu pouvais être
  niais. Ça a quand même bien plus la classe notre solution, non ?

* Maintenant que t&#x27;as tout, t&#x27;as plus qu&#x27;à lancer ~~notepad++~~ ton éditeur
  favori et te préparer à modifier ou proposer les fichiers que tu veux. Ce
  que t&#x27;as à retenir, c&#x27;est que tu vas surtout bosser dans le dossier &#x60;/src&#x60;

## Correction d&#x27;un post existant

Bon ok, on a compris, t&#x27;es timide, tu te sens pas encore prêt à nous écrire un
magnifique post sur ton tout dernier projet, tu préfères juste nous aider à
améliorer notre contenu. Bah on te remercie quand même tu vois, parce qu&#x27;on
est des types sympas.

* Alors déjà, on aime pas juste donner une liste d&#x27;ordres sans expliquer pour
  que tu puisses comprendre ce que tu fais. Donc notre site, il a été fait
  grâce à HappyPlan (un générateur de site statique bien pimpé, parce que oui,
  y&#x27;a pas que Wordpress pour faire un site) qui lui même est basé sur grunt
  (un esclave qui te permet d&#x27;éxécuter des tâches répétitives en JavaScript)
  et plein d&#x27;autres truc cools. Donc, faudrait que tu jettes un coup d&#x27;œil à
  ces projets, histoire de savoir de quoi on cause, même si on va essayer de
  t&#x27;expliquer au mieux.

* Donc, tous nos posts sont contenus dans &#x60;src/posts/&#x60;. Si jamais c&#x27;est sur
  autre chose qu&#x27;un post, farfouille un peu et tu trouveras, le nom des
  dossiers est assez explicite et de toute façon les URLs sur notre site
  ressemblent bizarrement (en vrai c&#x27;est pas bizarre hein, t&#x27;avais compris)
  aux noms des dossiers.

* Donc, une fois le fichier trouvé, tu remarqueras que la syntaxe à
  l&#x27;intérieur, c&#x27;est pas du HTML. C&#x27;est un truc bizzare avec des dièses et des
  étoiles. On appelle ça du
  [*Markdown*](http://fr.wikipedia.org/wiki/Markdown). On va te laisser aller
  chercher si tu veux connaitre plus en détail. Mais normalement en voyant le
  reste du post autour de toi, tu devrais comprendre assez vite. Tu peux
  toujours faire du HTML, mais franchement, le Markdown a été créé pour ce
  genre de tâches, c&#x27;est un bon moment pour l&#x27;apprendre.

* Avant de faire les modifications direct dans le fichier, on va te demander
  de faire une branche, c&#x27;est une bonne pratique et ça nous permettra de voir
  exactement ce que t&#x27;auras modifié, c&#x27;est beaucoup plus simple. Du coup tu
  fais simplement un :

  &#x60;&#x60;&#x60;
  $ git checkout -b fix.nom-du-post
  &#x60;&#x60;&#x60;

* Fais les modifications que tu veux dans le fichier, là on peut pas t&#x27;aider,
  c&#x27;est à toi de jouer.

* Normalement si t&#x27;avais bien lancé le &#x60;happyplan&#x60; tout à l&#x27;heure, y&#x27;a un
  processus *watch* (en gros un truc qui surveilles ton projet) qui est lancé
  et qui détecte que t&#x27;as changé un fichier, du coup, grâce au watch couplé à
  un processus appelé *livereload* ton navigateur va rafraichir les fichiers
  nécessaires en direct. T&#x27;as rien à faire c&#x27;est magique. Enfin si tu juste
  retourner dans ton browser ça devrait déjà être à jour.

* Une fois que tout est bon, tu peux passer à l&#x27;étape de validation de tes
  modifications (étape commune pour la modification d&#x27;un post existant ou la
  proposition d&#x27;un nouveau)

## Proposition d&#x27;un nouveau post

* Alors pour proposer un nouveau post déjà, il te faut une idée. Et on te
  prévient que si tu nous sort un post sur la liste des plugins jQuery les
  plus en vogue cette semaine, on va te trouver. On va chercher ton IP, on va
  tracer ton adresse, et on va te trouver. Et tu vas comprendre que parmi
  nous, y&#x27;a des types qui sont pas du tout copains avec jQuery et qui sont pas
  tendres du tout.

* Il faut aussi que tu fasses attention à ne pas bosser sur le même post que
  quelqu&#x27;un d&#x27;autre et pour ça tu dois aller jeter un coup d&#x27;oeil du côté des
  issues en cours avec le label &#x60;post&#x60;. Allez, on est sympa, t&#x27;as [le
  lien](https://github.com/putaindecode/website/issues?labels=post&amp;page=1&amp;state=open).

* Bref, une fois ton idée trouvée, il faut que tu crées le post pour pouvoir
  commencer à écrire dans le fichier. Tout d&#x27;abord tu vas devoir créer une
  nouvelle branche. C&#x27;est une pratique qu&#x27;on demande à tout le monde, même
  nous en interne on bosse sur des branches. Donc tout d&#x27;abord :

  &#x60;&#x60;&#x60;
  $ git checkout -b post.titre-court-du-post
  &#x60;&#x60;&#x60;

  Ensuite il va falloir que tu crées le fichier nécessaire pour le brouillon
  du post.

  &#x60;&#x60;&#x60;
  $ happyplan newpost --name=&quot;Nom du post&quot; --tags=&quot;tags, separes, virgules&quot;
  $ mkdir src/posts/nom-du-post
  $ mv src/posts/nom-du-post.html.hbs src/posts/nom-du-post/index.html.hbs
  &#x60;&#x60;&#x60;

  Ça va te créer un fichier dans &#x60;/src/posts/&#x60; avec le nom qui va bien.
  Tu remarqueras qu&#x27;on la déplacé dans un dossier, histoire d&#x27;avoir des URLs
  simples et sympa. Puis si t&#x27;as de la merde à fourrer pour ton article, tu sais
  où la mettre du coup.

* Tu peux maintenant éditer ton fichier en MarkDown dans la partie dédié,
  tout en faisant attention si tu te mets à toucher l&#x27;entête créé
  automatiquement (celui où il y a layout, title et tags).
  Laisse bien la clé &#x60;draft: true&#x60; bien entendu.
  Amuse toi, créé ton contenu, rédige bien tout comme tu veux.
  Techniquement, dans ce dossier &#x60;posts&#x60; tu peux faire autant de brouillons
  que tu veux pour peut que tu spécifies bien une clé &#x60;draft&#x60; pour chaque post.

* Tu devrais pouvoir te balader sur le site est trouver ton article sur la page
  des brouillons: http://localhost:4242/posts/drafts.html .
  Avec la tâche &#x60;$ happyplan&#x60; lancée normalement tout se rafraichira
  automatiquement.
  Si ce n&#x27;est pas le cas, lance la tâche &#x60;$ happyplan&#x60;.
  Si là tu as une erreur qui t&#x27;échappes, on t&#x27;invite à
  [ouvrir une issue](https://github.com/putaindecode/website/issues/new).

* En l&#x27;état tu devrais pouvoir consulter sur le site lancé localement ton post,
  voir s&#x27;il sort correctement et s&#x27;il est présentable à ton goût.
  Tu pourras le consulter sur une URL du type
  &#x60;http://localhost:4242/post/nom-du-post/&#x60;. Mais tu le sais déjà puisque t&#x27;as
  bien suivi et que t&#x27;es passé par la page des brouillons.

* Une fois que tout est bon, tu peux passer à l&#x27;étape de validation de tes
  modifications (étape commune pour la modification d&#x27;un post existant ou la
  proposition d&#x27;un nouveau)

## Validation de tes modifications

* Il faut tout d&#x27;abord pousser tes modifications sur ton &#x60;fork&#x60;. Pour ça on va
  d&#x27;abord ajouter les fichier que tu as modifié à l&#x27;index de fichiers à
  commit. Tu peux faire ça tout simplement avec un :

  &#x60;&#x60;&#x60;
  $ git add -A src/posts/nom-du-post
  &#x60;&#x60;&#x60;

  Cette commande ajoute tous les fichiers dans le dossier que tu as créé.
  Si tu as ajouter des fichiers à l&#x27;exterieur de ce dossier, tu devras les
  ajouter. Exemple:

  &#x60;&#x60;&#x60;
  $ git add src/media/memes/trollface.jpg
  &#x60;&#x60;&#x60;

  Ensuite on va dire à git de valider ces modifications de code :

  &#x60;&#x60;&#x60;
  $ git commit -m &quot;Un petit message sympa expliquant le correctif/post&quot;
  &#x60;&#x60;&#x60;

  Et on va finir en disant qu&#x27;on veut envoyer tout ça sur ton fork qui est
  situé sur GitHub :

  &#x60;&#x60;&#x60;
  $ git push -u
  &#x60;&#x60;&#x60;

* Voila ! Si tu vas voir ton &#x60;fork&#x60; sur GitHub tu verras ton commit et les
  modifications que tu as apportées normalement. Il ne te reste plus qu&#x27;à nous
  soumettre ces modifications. Pour ça tu vas faire ce qu&#x27;on appelle une Pull
  Request (PR)

* Il te suffit de cliquer sur le bouton vert qui représente 2 flèches en sens
  inverse à côté du nom de ta branche en dessous du nombre de commits /
  branches / etc.

  &lt;figure&gt;
    ![Bouton Pull Request]({{ happyplan.baseUrls.media }}/github/pull-request-button.jpg)
    &lt;figcaption&gt;C&#x27;est bon tu le vois là le bouton ?&lt;/figcaption&gt;
  &lt;/figure&gt;

* Sélectionnes les bonnes branches et ajoute nous un beau titre et une belle
  description de Pull Request en essayant au moins de commencer par &#x60;Post:
  Nom du post&#x60; ou &#x60;Fix: Nom du post

* Et voila ! Tu n&#x27;as qu&#x27;à attendre de nos nouvelles maintenant. D&#x27;ailleurs au
  passage, si tu veux, tu peux en profiter pour nous suivre [sur
  twitter](http://twitter.com/putaindecode), et tu pourras nous lâcher un
  message avec ta PR ou ton issue en lien, histoire de nous mettre la pression.
{{/markdown}}
</description>
              <pubDate>Tue, 05 November 2013 15:56:41 +0100</pubDate>
              <link>/posts/comment-contribuer/index.html</link>
              <guid isPermaLink="true">/posts/comment-contribuer/index.html</guid>
          </item>

          <item>
              <title>Vagrant, enlarge your VM</title>
              <description>

{{#markdown}}
Vagrant, au cas ou tu ne connaîtrais pas encore, permet de fournir des
environnements de développements reproductibles, facilement configurables et
qui se partagent entre les membres de l’équipe. En gros tu vas pouvoir décrire
et configurer des machines virtuelles (VM) depuis un seul fichier texte,
le &#x60;Vagrantfile&#x60;.  Plutôt pratique pour avoir un environnement de dev
équivalent à celui de la prod. Et tout cela avec un processus simplifié
à l&#x27;extrême.

# Et c’est pour qui le beau joujou ?
Vagrant s’adresse principalement à toi, mais aussi à un public
de **développeurs** qui souhaitent pouvoir mettre en place rapidement
un environnement de dev avec une machine virtuelle (genre apache-php-*sql)
sans y passer trop de temps.
Vagrant, c’est aussi pour des **devops** qui voudrait tester la mise en
place et le provisioning de leur infra.
Dans la doc, ils disent même que ça s’adresse aux designers
(pour dire si c’est simple) mais faut pas déconner non plus,
on a jamais vu un designer dégainer une console :)

Globalement le workflow vagrant se résume à 2-3 commandes,
  1. &#x60;vagrant init&#x60; au début du projet
Puis
  2. &#x60;vagrant up&#x60; pour lancer la VM.
  1. &#x60;vagrant halt&#x60;pour l’arrêter.

# Etape 1 - vagrant init
Vagrant fournit un support pour les principales plateformes de virtualisation,
appelées Provider dans la langue de Justin Bieber et avec par défaut celui
pour virtualbox.  Et  cerise sur le clafoutis, tu as aussi la possibilité
de configurer / provisionner tes box avec des scripts Chef ou Puppet
(ou juste un script shell si t’es old-school \o/ ).

Bon, je suppose que c’est encore un peu flou, alors voilà comme ça se présente.
Une fois installé ( http://downloads.vagrantup.com/ ), tu devrais avoir
une nouvelle commande de dispo.
Alors dégaine ton terminal et envoie un &#x60;vagrant init&#x60;. Ça devrait créer
un fichier &#x60;Vagrantfile&#x60;  qui va décrire ta machine virtuelle
(ne t’inquiète pas, c’est juste écrit en Ruby).
En gros de quelle box de base tu pars, comment tu la configures (réseaux,
dossier partagé entre la VM et le Host, ta machine réelle) et comment tu
la provisionnes (via un shell, avec un script Puppet...)

## La config de la box
Ensuite voilà les quelques points à paramétrer.
- &#x60;config.vm.box = &quot;base&quot;&#x60;pour spécifier le nom d’une box préalablement
téléchargée.
- &#x60;config.vm.box_url = &quot;http://domain.com/path/to/above.box&quot;&#x60; Tu remplaces
par l’url de la box de tes rêves. Tu peux trouver une liste assez complètes
de box plus ou moins configurées sur le site http://www.vagrantbox.es/
( ProTip™: Choisis bien le provider correspondant à ton gestionnaire de VM)
- &#x60;config.vm.network :forwarded_port, guest: 80, host: 8080&#x60; Pratique
pour accéder au serveur qui tourne sur la VM. Après tu retrouve un peu
les même options de config réseaux qu’avec virtualbox
(réseaux privés, connexion par pont...)
- &#x60;# config.vm.synced_folder &quot;../data&quot;, &quot;/vagrant_data&quot;&#x60; Avec ça,
tu vas pouvoir ajouter un répertoire qui sera partagé
avec ta machine virtuelle.
Par défaut, Vagrant te permet d’accéder au répertoire courant
depuis &#x60;/home/vagrant&#x60; dans la VM.

## le provisioning de box
Alors attention, c&#x27;est un des trucs cools avec vagrant. Avant, quand tu
voulais te monter une VM pour travailler, il fallait aussi la configurer,
installer les bonnes versions de chaque brique que le projet utilisé. Ça‎
pouvait être long, pénible, et surtout prendre du temps.
Avec Vagrant, tu peux automatiser cette partie, soit en utilisant simplement
un script, soit avec un moyen moderne comme Chef ou Puppet. Et si jamais t&#x27;as
besoin d&#x27;un truc particulier, une config que tu utilises souvent, tu peux
toujours packager la box que t&#x27;as configuré avec amour pour pouvoir la
réutiliser dès que l&#x27;occasion se présente. Sinon tu peux déjà trouver pas mal
de box déjà prêtes à l&#x27;emploi, avec ou sans support pour puppet, chef...

La suite du fichier contient des exemples de type de provisioning
(Puppet, Chef solo ou Chef server)
Et si jamais tu souhaites lancer un script de provisioning :

&#x60;&#x60;&#x60;ruby
Vagrant.configure(&quot;2&quot;) do |config|
  config.vm.provision &quot;shell&quot;, path: &quot;provision.sh&quot;
end
&#x60;&#x60;&#x60;

&gt; Vagrant te permet aussi de créer tes propres box déjà provisionnées via
la commande vagrant package. C’est assez pratique quand tu dois
télécharger-compiler-installer tout l’internet

# Etape 2 - vagrant up
Bon, la première fois risque de prendre du temps, parce que vagrant
va télécharger ta box, puis lancer le provisioning. Profites en pour faire
un tour sur http://vim-adventures.com/ et jouer un peu en attendant.

Une fois terminé, tu as maintenant une box dispo avec laquelle travailler.

# Etape 3 - Joie \o/.
Je pensais faire une troisième partie sur comment arrêter la VM mais
ça présente pas vraiment d’intérêt car ça tient en une ligne de commande.

Bref, le point important de tout ça, c’est que les autres relous de ton équipe
ne pourront plus dire que pourtant ça marche bien chez eux, et qu’ils
comprennent pas, c’est vraiment étrange... enfin sauf si ils sont
de mauvaise foi :)
- L’intégrateur n’aura plus à se taper 14 installations de trucs en
ligne de commande qu’il ne retient jamais, pour rajouter un bout de css
ou de js.
(ProTip™: là, ça rentre sur un post-it !)
- Le dev backend n’aura plus à pleurer quand on lui demande de remettre le nez
dans une projet vieux de 2 ans avec que des versions de php / ruby ou mysql
dépassées qui vont casser la superbe config qu’il a mis 1 semaine à fignoler
avec les dernières techno à la mode.
- l’admin sys pourra packager les box de chaque projets, provisionnées
et configurées et pour éviter d’avoir à configurer les postes des autres
dev à chaque changement de projet.

# Quelques commande pratiques
&gt; &#x60;vagrant ssh&#x60; te permet de te connecter en mode terminal
&gt; &#x60;vagrant status&#x60; pour les têtes ~~à claques~~ en l’air

# Quelques liens
* [la documentation officielle de ~~viagra~~ vagrant](http://docs.vagrantup.com/v2/)
* [Virtualisation sur OSx et accès à localhost](https://github.com/putaindecode/propositions-de-posts/issues/4)
* [Cuisinez vos serveurs comme un Chef – Première partie](http://jolicode.com/blog/cuisinez-vos-serveurs-comme-un-chef-premiere-partie)
{{/markdown}}
</description>
              <pubDate>Tue, 05 November 2013 15:56:41 +0100</pubDate>
              <link>/posts/env/vagrant-enlarge-your-vm/index.html</link>
              <guid isPermaLink="true">/posts/env/vagrant-enlarge-your-vm/index.html</guid>
          </item>

          <item>
              <title>Ceci est un putain de post</title>
              <description>

{{#markdown}}

{{/markdown}}
</description>
              <pubDate>Tue, 05 November 2013 15:56:41 +0100</pubDate>
              <link>/posts/exemple.html</link>
              <guid isPermaLink="true">/posts/exemple.html</guid>
          </item>

          <item>
              <title>Versionner avec Git</title>
              <description>

{{#markdown}}
Chez Putain de Code, on aime se servir de [Git][git:website] (et de GitHub, mais
c&#x27;est une autre histoire), même si certains d&#x27;entre nous (comme Lionel) ne s&#x27;en
servent pas forcément bien.

Pour éviter ce genre de mésaventures, on s&#x27;est dit qu&#x27;on allait consacrer une
série d&#x27;articles à ce merveilleux gestionnaire de versions, et de vous en faire
profiter par la même occasion.

Et si Git permet de faire à peu près ce qu&#x27;on veut sur un dépôt, vous verrez
qu&#x27;on peut assez facilement réparer ses erreurs (et même celles des autres
parfois !).


## C&#x27;est quoi Git ?

Si vous êtes un développeur un tant soit peu consciencieux, vous utilisez un
gestionnaire de versions pour suivre l&#x27;évolution de votre code. Non,
[CPOLD][cpold] n&#x27;est pas un gestionnaire de versions.

Git, c&#x27;est un gestionnaire de versions décentralisé, aussi connu sous le terme
de DVCS (pour Distributed Version Control System) pour les amateurs.

Le terme *distribué* est très important car c&#x27;est ce qui le différencie d&#x27;autres
gestionnaires historiquement plus connus comme Subversion (SVN) ou le vénérable
CVS.

Ça veut dire que chaque développeur possède sa propre copie du dépôt, chez lui,
localement, contraîrement à un gestionnaire centralisé ou tout est… centralisé
sur un même serveur (merci Captain Obvious).

Git est principalement utilisable en ligne de commande, mais il existe des
interfaces graphiques sous les principaux OS du marché (OS X, Linux, Windows).
Ici on va traiter de la ligne de commande, car c&#x27;est l&#x27;arme de base du bon
développeur.

Je vous passe l&#x27;installation, référez-vous à la documentation officielle pour
cette partie. (Ça se résume souvent à un &#x60;nom-du-package-manager install git&#x60;)

## Comment ça marche ?

Avant d&#x27;attaquer la partie pratique, on va s&#x27;attarder un peu à comment Git
fonctionne, parce qu&#x27;à mon sens c&#x27;est essentiel pour comprendre rapidement ce
qu&#x27;il est possible de faire et pour se construire un modèle mental des
opérations.

Dans Git les commits sont tous reliés avec leur(s) parent(s) comme les maillons
d&#x27;une chaîne qui pourrait avoir des bifurcations. Chaque commit stocke des
informations sur l&#x27;état du dépôt à un instant donné (l&#x27;état complet, pas
uniquement un diff).

On construit cette chaîne et ses bifurcations en créant des commits, en
branchant et en fusionant une branche dans une autre.

Enfin, une dernière chose que vous devez garder en tête c&#x27;est qu&#x27;un commit est
définitif dans le sens ou on ne pourra jamais modifier son contenu (on pourra
par contre le remplacer par un autre). Comme il est unique, il a un numéro qui
est un haché &#x60;SHA1&#x60; de diverses informations.

Ces &#x60;SHA1&#x60; sont utilisé à foison, habituez-y vous !

Voilà, maintenant sortons nous les doigts et regardons comment ça marche
concrètement.

## Créer ou récupérer un repo

Il y a deux manières de créer un dépôt Git : soit on en veut un tout neuf et on
utilise &#x60;git init&#x60;, soit on veut cloner un dépôt déjà existant et on utilise le
bien nommé &#x60;git clone&#x60;.

Appellé sans argument, &#x60;git init&#x60; initialise un dépôt dans le dossier courant,
on peut lui passer un nom de dépôt en argument pour le créer dans un
sous-dossier spécifique du dossier courant.

Du côté de &#x60;git clone&#x60;, on va passer l&#x27;adresse d&#x27;un dépôt, et optionnellement un
nom local pour le dépôt. Il va récupérer le dépôt à l&#x27;adresse spécifiée (c&#x27;est
bien foutu hein ?) puis le mettre soit dans un dossier du même nom soit dans un
dossier du nom spécifié en dernier argument.

Par exemple, si je veux cloner le dépôt du site :

&#x60;&#x60;&#x60; console
$ git clone https://github.com/putaindecode/website.git
&#x60;&#x60;&#x60;

Ça va créer un dossier &#x60;website&#x60; avec le contenu du dépôt.

&#x60;clone&#x60; accepte plusieurs types d&#x27;adresse : HTTP(S), SSH, protocole Git dédié et
même des chemins locaux pour cloner un dépôt situé ailleurs sur le système de
fichiers.

Pour la suite, il va falloir se placer dans un dépôt avec le petit &#x60;cd&#x60; qui va
bien pour lancer les vraies commandes intéressantes de Git.

## Premiers commits

Pour commencer à s&#x27;amuser, écrivez un bout de code dans un fichier et
sauvegardez le :

&#x60;&#x60;&#x60; console
$ cat &gt; putain_de_hello_world.rb
puts &quot;Hello, putain de codeur !&quot;
^D
&#x60;&#x60;&#x60;

On va tout se suite introduire l&#x27;un des concepts déroutants de Git, *l&#x27;Index*.
Git utilise trois zones distinctes pour les fichiers : le dossier de travail
(*Working Dir*) qui contient les fichiers dans leur version actuelle, *l&#x27;Index*
qui permet de stocker les modifications et &#x60;HEAD&#x60; qui pointe vers le dernier
commit.

L&#x27;idée, c&#x27;est qu&#x27;on peut modifier les fichiers comme on le souhaite, et
constuire le commit avec seulement les modifications que l&#x27;on souhaite voir
apparaître.

Cette possibilité permet d&#x27;avoir des commits atomiques, c&#x27;est à dire qui
introduisent une modification simple. Ça évite de se retrouver avec un commit
mammouth qui change tout le programme d&#x27;un coup et qui est un enfer pour le
futur développeur qui revient sur le code et qui cherche à comprendre la logique
de sa construction. Ce développeur, c&#x27;est vous dans 1 ou 2 semaines.

Pour info, vous verrez parfois *l&#x27;Index* appellé *Staging Area*.

Git fournit des commandes pour passer les fichiers d&#x27;un état à l&#x27;autre. Elles
sont certes parfois un peu obscures, mais dans l&#x27;ensemble c&#x27;est pas si
difficile.

Dans notre cas, notre fichier n&#x27;est même pas encore suivi par Git ! Vous pouvez
vérifier ça en utilisant &#x60;git status&#x60;,dont vous ne pourrez bientôt plus vous
passer :

Pour pallier celà, on utilise &#x60;git add&#x60; pour l&#x27;ajouter direct à l&#x27;index.

Dans notre cas, ça donne &#x60;git add putain_de_hello_world.rb&#x60;

On peut utilise &#x60;git add&#x60; pour ajouter des dossiers entiers, des motifs, … Mais
soyez vigilants, c&#x27;est une bonne source d&#x27;erreurs souvent chiantes.

&#x60;&#x60;&#x60; console
# Sur la branche master
#
# Validation initiale.
#
# Fichiers non suivis:
#   (utilisez &quot;git add &lt;fichier&gt;...&quot; pour inclure dans ce qui sera validé)
#
#	putain_de_hello_world.rb
Aucune modification indexée mais des fichiers non suivis sont présents (utilisez &quot;git add&quot; pour les suivre)
&#x60;&#x60;&#x60;

Vous pouvez vérifier que &#x60;git add&#x60; a bien marché avec la commande &#x60;git status&#x60;,

&#x60;&#x60;&#x60; console
$ git status
# Sur la branche master
#
# Validation initiale.
#
# Modifications qui seront validées :
#   (utilisez &quot;git rm --cached &lt;fichier&gt;...&quot; pour désindexer)
#
#	nouveau : putain_de_hello_world.rb
#
&#x60;&#x60;&#x60;

Ok c&#x27;est prêt ! On lance maintenant &#x60;git commit&#x60; pour créer notre premier commit
(pas con le *naming* de la commande hein ?). Si tout se passe bien vous devriez
avoir un éditeur qui s&#x27;ouvre pour écrire un message de commit. Prenez l&#x27;habitude
de décrire votre changement sur la première ligne succintement et, si vous avez
besoin de détails, sautez une ligne et détaillez les modifications.

Un petit &#x60;git status&#x60; nous confirme qu&#x27;on s&#x27;est pas foiré (la preuve, tout est
propre) :

&#x60;&#x60;&#x60; console
$ git status
# Sur la branche master
rien à valider, la copie de travail est propre
&#x60;&#x60;&#x60;

## Inspecter

Bon, c&#x27;est bien beau de commiter, mais à un moment on arrive sur un projet en
cours et on aimerait bien savoir où on en est. Pour ça vous pouvez utiliser un
outil graphique (il y en a pour [Linux][gitg], [OS X][gitx] et même sûrement
Windows) ou retrousser vos poils de barbe et sortir le bon vieux &#x60;git log&#x60;.

C&#x27;est un vrai couteau-suisse qui va vous permettre d&#x27;inspecter tout l&#x27;historique
de votre dépôt, avec des options en veux-tu en voilà pour personnaliser
l&#x27;affichage.

Un &#x60;git log&#x60; basique ça ressemble à ça :

&#x60;&#x60;&#x60; console
$ git log
commit 8120de7b7139e46b9cbc1c3ee89a02962dbc198e
Author: madx &lt;madx+github@yapok.org&gt;
Date:   Mon Nov 4 23:28:11 2013 +0100

    Premier commit
&#x60;&#x60;&#x60;

Oui, c&#x27;est le commit que je viens de faire dans la partie précédente. Comment
j&#x27;en suis sûr ? Car je peux utiliser &#x60;git show&#x60; pour afficher les détails d&#x27;un
objet Git (il n&#x27;y a pas que des commits, mais on verra ça une prochaine fois).

&#x60;git show&#x60; prend en argument le fameux &#x60;SHA1&#x60; du commit :

&#x60;&#x60;&#x60; console
$ git show 8120de7b7139e46b9cbc1c3ee89a02962dbc198e
commit 8120de7b7139e46b9cbc1c3ee89a02962dbc198e
Author: madx &lt;madx+github@yapok.org&gt;
Date:   Mon Nov 4 23:28:11 2013 +0100

    Premier commit

diff --git a/putain_de_hello_world.rb b/putain_de_hello_world.rb
new file mode 100644
index 0000000..ded37dc
--- /dev/null
+++ b/putain_de_hello_world.rb
@@ -0,0 +1 @@
+puts &quot;Hello, putain de codeur !!!&quot;
&#x60;&#x60;&#x60;

Dit comme ça, ça a pas l&#x27;air de casser trois pattes à un canard, mais c&#x27;est la
base de la base de la praticité. Je vous fait pas l&#x27;insulte de vous expliquer le
détails, vous êtes sans doute assez malins pour comprendre ce que git raconte
sur la sortie de ces deux commandes.

Remarquez que &#x60;git show&#x60; affiche en bonus les différences introduites par un
fichier. Ces différences on peut aussi les voir avant de commiter avec &#x60;git
diff&#x60;, ce qui est bien pratique.

Entraînez vous maintenant à faire des commits, à inspecter et à farfouiller les
pages de &#x60;man&#x60;, c&#x27;est la meilleure façon d&#x27;apprendre. Après on va attaquer le
gros morceau, celui qui fait la force de Git.

&lt;figure&gt;
  ![Mind blown]({{happyplan.baseUrls.media}}/memes/mind_blown.gif)
&lt;/figure&gt;

## Branchement et fusions

Créer une branche, ça permet de travailler sur une fonctionnalité ou un bug
précis, sans encombrer la ligne de conduite principale, qui peut évoluer sous
d&#x27;autres contraintes.

Dans Git, les branches sont une partie essentielle de quasiment tout *workflow*,
et leur manipulation est très rapide et très légère.

Pour en revenir à mon histoire de maillon, créer une branche revient à créer un
point à partir duquel deux chaînes vont être possibles.

C&#x27;est aussi simple qu&#x27;un &#x60;git branch le-nom-de-ma-branche&#x60;. Cette commande se
contente de créer la branche, pour se positionner dessus on utilise &#x60;git
checkout&#x60; qui permet de naviguer de branche en branche tel Tarzan sur ses
lianes.

Comme c&#x27;est super chiant à écrire, il existe un raccourci bien pratique : &#x60;git
checkout -b&#x60;, auquel on passe un nom de branche comme pour &#x60;git branch&#x60;.

Une fois qu&#x27;on est bien sur la branche, tous les commits suivants seront liés à
cette branche.

On peut utiliser &#x60;git branch&#x60; sans argument pour lister les branches, celle avec
un petit asterisque devant c&#x27;est la branche courante.

Essayons ça avec notre petit dépôt :

&#x60;&#x60;&#x60; console
$ git branch
* master
prout (master:8120de7) $ git checkout -b add-shebang
Basculement sur la nouvelle branche &#x27;add-shebang&#x27;
$ vi putain_de_hello_world.rb
$ git status
# Sur la branche add-shebang
# Modifications qui ne seront pas validées :
#   (utilisez &quot;git add &lt;fichier&gt;...&quot; pour mettre à jour ce qui sera validé)
#   (utilisez &quot;git checkout -- &lt;fichier&gt;...&quot; pour annuler les modifications dans la copie de travail)
#
#	modifié : putain_de_hello_world.rb
#
aucune modification n&#x27;a été ajoutée au commit (utilisez &quot;git add&quot; ou &quot;git commit -a&quot;)
$ git add putain_de_hello_world.rb
$ git commit
[add-shebang 5d48735] Add shebang
 1 file changed, 1 insertion(+)
$ git log --pretty=oneline --decorate
5d48735fcc805d51e2e294df5d9d22d481250789 (HEAD, add-shebang) Add shebang
8120de7b7139e46b9cbc1c3ee89a02962dbc198e (master) Premier commit
&#x60;&#x60;&#x60;

Comme vous le voyez grâce à l&#x27;option &#x60;--decorate--&#x60; de &#x60;git log&#x60;, on a bien
notre branche qui pointe sur le dernier commit fait, alors que la branche de
base fournie par Git, &#x60;master&#x60;, reste au commit précédent.

Dernière étape avant la fin de cette article : le redouté et redoutable
&#x60;merge&#x60; !

Pour fusionner nos deux branches on va utiliser cette commande en se plaçant sur
la branche dans laquelle on va fusionner et en passant en argument la branche à
fusionner.

Si vous avez bien suivi, on va donc faire les choses suivantes :

&#x60;&#x60;&#x60; console
$ git checkout master
Basculement sur la branche &#x27;master&#x27;
$ git merge add-shebang
Updating 8120de7..5d48735
Fast-forward
 putain_de_hello_world.rb | 1 +
 1 file changed, 1 insertion(+)
&#x60;&#x60;&#x60;

Vous remarquez que Git signale *Fast-forward*. Comme le commit pointé par
&#x60;add-shebang&#x60; est un fils direct de celui de &#x60;master&#x60;, Git se contente de faire
pointer &#x60;master&#x60; sur celui-ci, ce qui est beaucoup plus rapide.

Dans le cas où on a eu des modifications sur &#x60;master&#x60; entre temps, on aurait eu
une vraie fusion des contenus des commits, avec éventuellement une résolution de
conflits, mais on verra ça dans un prochain article !

## La suite

On a vu les bases, et très bientôt on va approfondir le sujet, en voyant
notamment comment collaborer, comment résoudre des conflits ou des problèmes
d&#x27;utilisation de Git, tout ça dans la joie et la bonne humeur.

## Références

Si vous voulez en savoir plus sur Git, la [documentation officielle][git:doc] est plutôt
bien foutue.

Si vous aimez les petites références rapides et illustrées, le [Git
Guide][git-guide] de Roger Dudler est une bonne manière d&#x27;apprendre.

[git:website]: http://git-scm.org/
[git:doc]: http://git-scm.com/documentation
[git-guide]: http://rogerdudler.github.io/git-guide/
[cpold]: http://roland.entierement.nu/blog/2008/01/22/cpold-la-poudre-verte-du-suivi-de-versions.html
[gitx]: http://gitx.frim.nl/
[gitg]: https://wiki.gnome.org/Gitg
{{/markdown}}
</description>
              <pubDate>Tue, 05 November 2013 15:56:41 +0100</pubDate>
              <link>/posts/git/versionner-avec-git/index.html</link>
              <guid isPermaLink="true">/posts/git/versionner-avec-git/index.html</guid>
          </item>

          <item>
              <title>HTML ? Hâche-Thé-Aime-Elle vous dites ?</title>
              <description>

{{#markdown}}
Ahh, le HTML. LE [H.T.M.L](http://fr.wikipedia.org/wiki/HTML). Sacré langage hein ?

On le connait tous ce fameux truc qu&#x27;on retrouve dans pas mal d&#x27;URLs : &#x60;.html&#x60;.
Oui d&#x27;accord par le passé on avait l&#x27;extension de radin &#x60;.htm&#x60;, mais elle n&#x27;a
clairement pas duré.

Vous vous demandez déjà ce qu&#x27;il-y-a à raconter sur l&#x27;HTML peut être ? Et bien,
je ne suis pas là pour vous apprendre toutes les balises, leurs enfants, parents,
les cousins cousines, patati patata… Ah ça non, j&#x27;ai autre chose à faire,
et vous aussi. Et si c&#x27;est ce que vous cherchez, vous trouverez ce qu&#x27;il vous
faut sur [tout](http://docs.webplatform.org/wiki/html/elements)
[un](https://developer.mozilla.org/en-US/docs/Web/HTML/Element)
[tas](http://www.w3.org/html/wg/drafts/html/CR/dom.html#elements)
[d&#x27;autres](http://en.wikipedia.org/wiki/HTML_element)
[sites](http://www.vectorskin.com/referentiels-standards-w3c/balises-html5/).

Ce que je vais faire par contre, c&#x27;est tenter de partager un document sérieux
(dans le fond hein) avec tout pleins de conseils super pertinents pour que vous
écriviez de l&#x27;HTML comme personne.
Non je déconne. En fait, ça va être la grosse marrade avec les trucs
les plus nazes que je peux vous raconter. C&#x27;est partie mon jQuéri.

## L&#x27;ancien testament

Si vous avez ouvert ne serait-ce que quelques documents HTML dans votre vie,
vous avez du croiser ce qu&#x27;on appelle un [doctype](http://fr.wikipedia.org/wiki/Doctype)
qui ressemble à ça:

&#x60;&#x60;&#x60;html
&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;
   &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;
&#x60;&#x60;&#x60;

Vous pourrez remarquer dans ce ~~petit~~ gros bout de code bien relou qu&#x27;il y&#x27;a
une [URL](http://fr.wikipedia.org/wiki/Uniform_Resource_Locator):
c&#x27;est tout simplement la DTD (doctype) du langage en question.
Avec les spécifications pour la validation, toussa toussa…
Si vous avez 2 minutes, allez jeter un coup d&#x27;oeil.

Je ne vais pas vous le cacher, et même si en théorie, par héritage de SGML/XML
ça part d&#x27;une bonne intention, dans la pratique ça sert juste à se toucher la
nouille sur la validation.
Car aujourd&#x27;hui HTML (5) n&#x27;est clairement plus du XML.

Oui bon ok, moi même à une époque j&#x27;ai eu ma passe où je collais ce petit badge
partout dans mes footers:

&lt;figure&gt;
  &lt;a href=&quot;http://validator.w3.org/check?uri=referer&quot;&gt;
    &lt;img src=&quot;http://www.w3.org/Icons/valid-xhtml10&quot;
        alt=&quot;Valid XHTML 1.0 Transitional&quot; height=&quot;31&quot; width=&quot;88&quot; /&gt;
  &lt;/a&gt;
  &lt;figcaption&gt;Ça pète la classe hein ?&lt;/figcaption&gt;
&lt;/figure&gt;

Mais bon les conneries, ça va un moment.
Pour info, j&#x27;ai du valider le code suivant pour obtenir ce logo:

&#x60;&#x60;&#x60;html
&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;
   &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;
 &lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot;&gt;
&lt;head&gt;
  &lt;title&gt; &lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;

&lt;/body&gt;
&lt;/html&gt;
&#x60;&#x60;&#x60;

Ben dites donc, c&#x27;est propre tout ça. Un petit document tout vide mais déjà
bien rempli.
Mais attendez en 2013, on peut pas faire mieux ? Oh si !

## Le nouveau testament

&#x60;&#x60;&#x60;html
&lt;!doctype html&gt;
&lt;title&gt; &lt;/title&gt;
&#x60;&#x60;&#x60;

Il faut savoir qu&#x27;un simple document _valide_, peut se résumer à ça.
Oui oui mes cocos, ce document est parfaitement valide. Voilà j&#x27;voulais vous le
dire. Arrêtez d&#x27;utiliser des doctypes dans tous les sens, ça ne sert à rien.
Sachant la qualité du code qu&#x27;on trouve sur les internets, les navigateurs
s&#x27;arrêtent au parsing lorsqu&#x27;ils voient ça &#x60;&lt;!doctype html&#x60;
(C&#x27;est [Paul Rouget](http://paulrouget.com/) qui me l&#x27;a dit, je le crois donc
sur parole).
Et après ma petite parenthèse ci dessous, je vais vous expliquer pourquoi.

Car je sais ce que certains vont me rétorquer.

&gt; Oui mais moi monsieur, je valide en **XHTML 1.1 Strict Turbo X Prime Ultra**&lt;br /&gt;
&gt; Puis ton document valide là, il sera valide quand HTML5 sera finalisé…

Dans un sens ils n&#x27;auraient pas tort. Mais dans la pratique, les navigateurs
s&#x27;en contre branlent de savoir quel type d&#x27;HTML vous utilisez
&lt;small&gt;(à moins que vous aimiez jouer avec la mort et que vous utilisez le
prologue XML lorsque vous servez de l&#x27;XHTML…)&lt;/small&gt;.
Car quand bien même vous utilisez un doctype à rallonge, il est tout à fait
possible que vous vous chiiez, et que vous laissiez des erreurs.
Oui, l&#x27;erreur est humaine…
Puis HTML 5 est déjà bien implémenté dans les grandes lignes. Et ça car il est
presque rétrocompatible.
Vous devriez le comprendre d&#x27;ici la fin de cet écrit. Ou pas. Mais je vous le
dit, il a été pensé dans ce sens.

Revenons à la validation. Du coup à quoi ça sert de valider ?
On va voir ça par un exemple digne des plus grands diplômes.

## Ce &#x60;&lt;p&gt;&#x60; fout la merde.

Prenons le code suivant:

&#x60;&#x60;&#x60;html
{{include &quot;src/posts/html/hache-the-aime-elle-vous-dites/notvalid.html.hbs&quot; }}
&#x60;&#x60;&#x60;

Certains d&#x27;entre vous ont du remarquer la coquille.
Celle-là, mes élèves qui découvrent le HTML me la font à chaque fois lorsqu&#x27;ils
codent leur super CV
(super exercice tavu, ils apprécient particulièrement le titre).

Toi là au fond, t&#x27;as pas repéré le souci encore ?

Regarde plutôt le rendu:

&lt;iframe
  class=&quot;putainde-Post-iframe&quot;
  height=&quot;350&quot;
  src=&quot;/posts/html/hache-the-aime-elle-vous-dites/notvalid.html&quot;&gt;
&lt;/iframe&gt;

&gt; WAT ?
&gt; ET MON MARGIN BOTTOM KESSIFÉLÀ EN DEUBEULE ?

Le rapport avec la validation me direz-vous ? Et bien plutôt que de perdre du
temps à comprendre le pourquoi du comment, en validant le code si dessus,
l&#x27;erreur vous est implicitement expliquée
(oui ce code n&#x27;a qu&#x27;une seule erreur à la validation).

&gt; Line 17, Column 4: **No p element in scope but a p end tag seen.**

Typiquement, il faut savoir comprendre un message d&#x27;erreur et savoir lire entre
les lignes. Pas faire &quot;mais monsieur, j&#x27;comprends pas là&quot; (d&#x27;ailleurs mes élèves
valident tous leur code, pour apprendre sur le tas, c&#x27;est une bonne façon).

Celui là nous dit en gros : _je ne vois pas d&#x27;element **p** à fermer dans le coin_.
Ca veut dire que… Ça veut dire que mon **p** ouvert n&#x27;est pas reconnu ?
Mais attend qu&#x27;est-ce que c&#x27;est que cette histoire ?!

Si vous prenez 10 secondes pour inspecter ce code, vous allez vite vous
aperçevoir qu&#x27;il est parsé ainsi:

&#x60;&#x60;&#x60;html
&lt;p&gt;…&lt;/p&gt;
&lt;ul&gt;…&lt;/ul&gt;
&lt;p&gt;&lt;/p&gt;
&#x60;&#x60;&#x60;

_Mais qu&#x27;est-ce que… ? Hein ? Mais ? Quoi ? Comment ?_

Oui vous avez bien vu. L&#x27;HTML est parsé n&#x27;importe comment. Enfin non il est parsé
comme il peut, au mieux.
Je pense que là vous commencez à comprendre ?

Ce que j&#x27;essaye de vous montrer par là, ce qu&#x27;il faut toujours faire attention
entre ce qu&#x27;on écrit et ce qu&#x27;on pense avoir comme résultat, même avec du
_simple_ HTML.

**Bon après j&#x27;espère qu&#x27;en 2013, vous avez tous le réflexe d&#x27;inspecter
l&#x27;HTML dès que vous avez un truc bizarre en CSS ou en JavaScript… Si
c&#x27;est pas encore le cas, prenez l&#x27;habitude.**

## Mais du coup le navigateur il fait n&#x27;importe quoi ?

Le navigateur essaye clairement de faire au mieux.
Si vous inspectez l&#x27;exemple précédent, vous vous apercevrez aussi que je n&#x27;ai
mis aucune balise &#x60;&lt;html&gt;&#x60;, &#x60;&lt;head&gt;&#x60; ou &#x60;&lt;body&gt;&#x60;.
Pourquoi ? Ben car le parseur le fait à ma place.
Mais pourquoi il fait ça ?
Tout simplement car on oublie (très - trop ?) souvent de bien écrire.
Comme quand j&#x27;écris en.

La balise [&#x60;&lt;tbody&gt;&#x60;](https://developer.mozilla.org/fr/docs/Web/HTML/Element/tbody)
est un bon exemple.
Si vous inspectez vos tableaux HTML, vous verrez vite fait que cette balise, que
quasiment personne ne connait/utilise, est pourtant nécessaire/utile.
Mais du coup, si je me fais une petite requête JavaScript
&#x60;document.querySelectorAll(&#x27;table &gt; tr&#x27;)&#x60;,
il est fort possible que je n&#x27;aie pas ce que je souhaite.
[La preuve](http://codepen.io/MoOx/pen/esFjx).

Voyons une autre exemple: mettons nous à la place d&#x27;un navigateur si,
alors que je suis en XHTML 1.1 Strict, je lui glisse une balise &#x60;&lt;center&gt;&#x60;.

- **Cas 1.** Je n&#x27;ai pas fait attention au doctype et je veux vraiment une balise
 &#x60;&lt;center&gt;&#x60; : bah là, rien à dire à part _Merci_. Le navigateur essaye clairement
 de faire au mieux, et dans un cas comme celui là, on ne peut que le remercier.

- **Cas 2.** Je sais exactement dans quel doctype je suis, j&#x27;ai conscience de ce
que je fais: je joue au con, tant pis pour ma gueule !

Dans tous les cas, le navigateur va laisser passer cette balise au cas où que.
Puis bon faut avouer que c&#x27;est super pratique cette balise hein ?
Comme &#x60;&lt;blink&gt;&#x60; et &#x60;&lt;marquee&gt;&#x60; quoi. ❤

&lt;figure&gt;
  ![Can&#x27;t handle my swag]({{happyplan.baseUrls.media}}/memes/canthandlemyswag.gif)
  &lt;figcaption&gt;&lt;marquee&gt;Marquee for the win.&lt;/marquee&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

## Note de service

S&#x27;il vous plaît mesdames messieurs, lorsque vous faites du CSS inline, ou que
vous incorporez un JavaScript, arrêtez vous à des choses simples,
qui fonctionnent :

- &#x60;&lt;style&gt;&#x60; suffit. Pas besoin de mettre un type, un langage etc. Et ça vous
évitera des [prises de têtes à la con](http://codepen.io/MoOx/pen/sEzuJ).
Puis vous avez déjà utilisé autre chose que du CSS vous ?!

- &#x60;&lt;script&gt;&#x60;, idem, même sur IE 6.
Pareil que précédement, pas besoin de mettre un hideux
&#x60;&lt;script type=&quot;text/javascript&quot; language=&quot;JavaScript 1.1&quot;&gt;&#x60;.
La moindre faute de frappe ne pardonne pas.
Aucun intêret de se fatiguer, sauf si votre [script n&#x27;est pas du JavaScript](https://code.google.com/p/ruby-in-browser/).

## Ce qu&#x27;il faut retenir

Ne soyez jamais sûr de vous, que ce soit pour écrire de l&#x27;HTML ou faire une mise
en prod&#x27; un vendredi soir à [17h30](http://www.miximum.fr/tranche_vie/62-le-bug-de-17h30).
Faites pas les malins. Ne sous-estimez pas HTML.
Si ça merde quelque part, vérifiez plus loin que le bout de votre nez, que votre
règle CSS qui marche pas, ou votre morceau de JavaScript buggé.

## [Aller plus loiiin, allez plus haaauuut… !](https://www.youtube.com/watch?v=BCYLQUdsN5g&amp;t=39s)

* &lt;a href=&quot;https://github.com/necolas/idiomatic-html&quot; lang=&quot;en&quot;&gt;idiomatic-html&lt;/a&gt;
([ceci n&#x27;est pas une contraction d&#x27;_idiot_ et d&#x27;_automatique_](http://fr.wikipedia.org/wiki/Idiomatique)).
* &lt;a href=&quot;https://github.com/necolas/idiomatic-css&quot; lang=&quot;en&quot;&gt;idiomatic-css&lt;/a&gt; (traduction incluse)
* Validation automatique dans un workflow Grunt:
  * [praveenvijayan/grunt-html-validation](https://github.com/praveenvijayan/grunt-html-validation)
  * [jzaefferer/grunt-html](https://github.com/jzaefferer/grunt-html) (basé sur validator.nu)

{{/markdown}}
</description>
              <pubDate>Tue, 05 November 2013 15:56:41 +0100</pubDate>
              <link>/posts/html/hache-the-aime-elle-vous-dites/index.html</link>
              <guid isPermaLink="true">/posts/html/hache-the-aime-elle-vous-dites/index.html</guid>
          </item>

          <item>
              <title>Pull request</title>
              <description>

{{#markdown}}
## Une poule request vous dites ?

## Faire une PR rapidement et proprement, pour les nuls.


{{/markdown}}
</description>
              <pubDate>Tue, 05 November 2013 15:56:41 +0100</pubDate>
              <link>/posts/pull-request.html</link>
              <guid isPermaLink="true">/posts/pull-request.html</guid>
          </item>

    </channel>
</rss>
