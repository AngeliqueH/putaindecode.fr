<?xml version="1.0" encoding="utf-8" ?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Putain de code !</title><description></description><link>http://putaindecode.fr</link><!-- generator putaindecode--><lastBuildDate>Mon, 20 Oct 2014 08:54:52 GMT</lastBuildDate><atom:link href="http://putaindecode.fr/feed.xml" rel="self" type="application/rss+xml"></atom:link><item><title>Débuter avec Ember</title><description><![CDATA[
<p>Démarrer une <a href="http://en.wikipedia.org/wiki/Single-page_application">Single Page Application</a> aujourd’hui ça commence souvent par : “mais quel putain de framework il 
faut que je prenne ?” Et, vu que c’est pas ça qui manque, ça se complique !</p>
<p>Parmi les multiples <a href="/posts/js/introduction-a-reactjs">technos disponibles</a> il y a <a href="http://emberjs.com">Ember</a>. Pour que le choix 
ne se résume pas à prendre celui qui a le plus joli logo ou qui génère le plus de spam sur votre twitter, on vous propose de découvrir 
<a href="http://emberjs.com">Ember</a>. Dans des posts à venir on verra comment construire concrètement une application avec ce framework.</p>
<h2 id="les-fondamentaux"><a class="putainde-Title-anchor" href="#les-fondamentaux">#</a>Les fondamentaux</h2><p>Parce que l’approche “tête la première” c’est bien mais que comprendre un minimum ce qu’on fait c’est encore mieux, il me parait sage de commencer
par expliquer la philosophie et les principaux éléments du framework, sous peine de se prendre un bon vieux <a href="http://en.wikipedia.org/wiki/RTFM">doc officielle</a> 
sur le coin du pif, comme ça, en passant.</p>
<p><a href="http://emberjs.com">Ember</a> se définit comme : “A framework for creating <strong>ambitious</strong> web applications” et ça, ça claque !
Mais je vois bien que ça suffit pas à vous convaincre alors je vais détailler un peu. Bon alors, bien que ce soit le mot “ambitious”
qui soit mis en gras, deux autres trucs me paraissent encore plus importants :</p>
<ul>
<li><p><strong>web</strong> : L’une des caractéristiques majeures d’<a href="http://emberjs.com">Ember</a> est son attachement au web et aux URLs en particulier. <strong>Les URLs
et donc le routeur sont au coeur d’Ember</strong> là ou bien d’autres frameworks les considèrent au mieux comme un addon important. </p>
</li>
<li><p><strong>framework</strong> : <a href="http://emberjs.com">Ember</a> est réellement un framework. Pas une lib, pas une colonne vertébrale, pas une boîte à outils : 
un framework ! <a href="http://emberjs.com">Ember</a> propose un véritable modèle de développement que vous allez tout de suite adopter … ou rejeter
(au moins ça aura le mérite d’être clair).</p>
</li>
</ul>
<h3 id="conventions-de-nommage"><a class="putainde-Title-anchor" href="#conventions-de-nommage">#</a>Conventions de nommage</h3><p>Ce modèle de développement commence par les conventions de nommage. <a href="http://emberjs.com">Ember</a>
applique en effet le principe de “conventions over configuration” et repose sur un nommage cohérent des différents composants 
de votre application. Et finalement, quand on y réflechit bien, la cohérence, ça n’a pas que des mauvais côtés. </p>
<p>Typiquement pour une URL <code>test</code>, <a href="http://emberjs.com">Ember</a> s’attend à trouver une <code>TestRoute</code>, un <code>TestController</code>, un gabarit <code>test</code>.
Jusqu’ici, tout va bien.</p>
<p>Curieux ? -&gt; <a href="http://emberjs.com/guides/concepts/naming-conventions/">doc officielle</a>.</p>
<h3 id="modeles"><a class="putainde-Title-anchor" href="#modeles">#</a>Modèles</h3><p>Un modèle est un objet avec des propriétés contenant des données métier. Le modèle est ensuite passé au gabarit pour être rendu par lui
en HTML. Typiquement, les modèles peuvent être récupérés d’un backend via une API REST JSON via <a href="https://github.com/emberjs/data">Ember Data</a>
mais pas que.</p>
<pre><code class="lang-js">var Book = DS.Model.extend({
    <span class="hljs-string">title               :</span> DS.attr(<span class="hljs-string">'string'</span>),
    <span class="hljs-string">publicationDate     :</span> DS.attr(<span class="hljs-string">'date'</span>),
    <span class="hljs-string">author              :</span> DS.attr(<span class="hljs-string">'string'</span>),
    <span class="hljs-string">publisher           :</span> DS.attr(<span class="hljs-string">'string'</span>),
    <span class="hljs-string">summary             :</span> DS.attr(<span class="hljs-string">'string'</span>)
});
</code></pre>
<p>Assoifé de connaissances ? -&gt; <a href="http://emberjs.com/guides/models/">doc officielle</a>.</p>
<h3 id="routeur"><a class="putainde-Title-anchor" href="#routeur">#</a>Routeur</h3><p>Le routeur permet de faire correspondre à une URL un ensemble de gabarits imbriqués permettant le rendu des modèles associés à 
chacun de ces gabarits.</p>
<p>L’exemple suivant permet le rendu des URLs : </p>
<ul>
<li><code>/books</code></li>
<li><code>/books/:book_id</code></li>
<li><code>/books/:book_id/edit</code></li>
<li><code>/books/create</code></li>
</ul>
<pre><code class="lang-js">App.Router.map(<span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">()</span> </span>{
  <span class="hljs-keyword">this</span>.resource(<span class="hljs-string">'books'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">()</span> </span>{
      <span class="hljs-keyword">this</span>.resource(<span class="hljs-string">'book'</span>, { path: <span class="hljs-string">'/:book_id'</span> }, <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">()</span> </span>{
          <span class="hljs-keyword">this</span>.route(<span class="hljs-string">'edit'</span>);
      });
      <span class="hljs-keyword">this</span>.route(<span class="hljs-string">'create'</span>);
  });
});
</code></pre>
<h3 id="routes"><a class="putainde-Title-anchor" href="#routes">#</a>Routes</h3><p>Les routes associent un modèle à un gabarit et sont également impliquées dans les transitions entre les différentes URLs (et donc les différents
états) de l’application. Elles gèrent notamment un certain nombre d’opérations sur un modèle lors de ces transitions.</p>
<pre><code class="lang-js">App.BooksRoute = Ember.Route.extend({
    model: <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">()</span> </span>{
        <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.store.find(<span class="hljs-string">'book'</span>);
    }
});
</code></pre>
<p>Intrigué ? -&gt; <a href="http://emberjs.com/guides/routing/">doc officielle</a>.</p>
<h3 id="controleurs"><a class="putainde-Title-anchor" href="#controleurs">#</a>contrôleurs</h3><p>Le contrôleur gère l’état de l’application. Il est situé entre la route dont il récupère le modèle et le gabarit dont il répond aux appels.
Les données du contrôleur sont accessible au gabarit au même titre que le modèle.</p>
<p>Le contrôleur est par exemple responsable du traitement des actions effectuées par l’utilisateur sur l’interface rendue par le gabarit : </p>
<pre><code class="lang-html"><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-title">button</span> </span></span><span class="hljs-expression">{{<span class="hljs-variable"><span class="hljs-keyword">action</span></span> <span class="hljs-string">"sort"</span>}}</span><span class="xml"><span class="hljs-tag">&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-title">button</span>&gt;</span></span>
</code></pre>
<pre><code class="lang-js">App.BooksController = Ember.ArrayController.extend({
  actions: {
    // appelé lors du clic sur le bouton
    sort: <span class="hljs-keyword">function</span> () {
        <span class="hljs-keyword">...</span>
    }
  }
});
</code></pre>
<p>Perdu ? -&gt; <a href="http://emberjs.com/guides/controllers/">doc officielle</a>.</p>
<h3 id="vues"><a class="putainde-Title-anchor" href="#vues">#</a>Vues</h3><p>Il est très rare d’avoir à définir des vues en <a href="http://emberjs.com">Ember</a> parce que les gabarits <a href="http://handlebarsjs.com/">Handlebars</a>
sont surpuissants et que les contrôleurs se chargent de la gestion de l’état de l’application.</p>
<p>Vous en voulez quand même ? -&gt; <a href="http://emberjs.com/guides/views/">doc officielle</a>.</p>
<h3 id="gabarits"><a class="putainde-Title-anchor" href="#gabarits">#</a>gabarits</h3><p>Un gabarit est un fragment de code HTML permettant, via des expressions, d’afficher les données du modèle associé. Les gabarits d’<a href="http://emberjs.com">Ember</a>
sont des gabarits <a href="http://handlebarsjs.com/">Handlebars</a>. Les expressions Handlebars sont délimitées par <code>{{</code> et <code>}}</code>.</p>
<p>L’exemple suivant permet d’afficher le titre d’une app composé d’un prénom et d’un nom pour peu que l’on ait passé au gabarit un
modèle contenant les deux propriétés <code>firstname</code> et <code>lastname</code>.</p>
<pre><code class="lang-html"><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-title">h1</span>&gt;</span></span><span class="hljs-expression">{{<span class="hljs-variable">firstname</span>}}</span><span class="xml"> </span><span class="hljs-expression">{{<span class="hljs-variable">lastname</span>}}</span><span class="xml"> Library<span class="hljs-tag">&lt;/<span class="hljs-title">h1</span>&gt;</span></span>
</code></pre>
<p><a href="http://handlebarsjs.com/">Handlebars</a> vient avec de nombreux outils (helpers) permettant de dynamiser nos gabarits : <code>{{#if isActive}} ... {{/if}}</code>,
<code>{{#each users}} ... {{/each}}</code>, etc.</p>
<p>Dans <a href="http://emberjs.com">Ember</a>, les gabarits peuvent contenir un élément très important : <code>{{outlet}}</code>. Cet outlet définit un emplacement
pour un autre gabarit permettant ainsi de multiples imbrications à mesure que les routes de l’application sont activées.</p>
<pre><code class="lang-html"><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-title">h1</span>&gt;</span></span><span class="hljs-expression">{{<span class="hljs-variable">firstname</span>}}</span><span class="xml"> </span><span class="hljs-expression">{{<span class="hljs-variable">lastname</span>}}</span><span class="xml"> Library<span class="hljs-tag">&lt;/<span class="hljs-title">h1</span>&gt;</span>

<span class="hljs-tag">&lt;<span class="hljs-title">div</span>&gt;</span>
  </span><span class="hljs-expression">{{<span class="hljs-variable"><span class="hljs-keyword">outlet</span></span>}}</span><span class="xml">
<span class="hljs-tag">&lt;/<span class="hljs-title">div</span>&gt;</span></span>
</code></pre>
<p>Tout élément de modèle injecté dans un gabarit sera <strong>automatiquement mis à jour</strong> (binding) par <a href="http://emberjs.com">Ember</a> lorsque le modèle
associé au gabarit sera modifié. Evidemment, seul cet élément sera rafraichit et non le gabarit entier sinon c’est tricher.</p>
<p>Envie de tester ? -&gt; <a href="http://emberjs.com/guides/templates/the-application-template/">doc officielle</a>.</p>
<h3 id="composants"><a class="putainde-Title-anchor" href="#composants">#</a>Composants</h3><p>Un composant <a href="http://emberjs.com">Ember</a> permet de définir une balise HTML personnalisée, permettant ainsi de partager de puissants 
éléments réutilisables au sein de votre application.</p>
<p>Vous en avez toujours révé ? -&gt; <a href="http://emberjs.com/guides/components/">doc officielle</a>.</p>
<h3 id="generation-d-objets"><a class="putainde-Title-anchor" href="#generation-d-objets">#</a>Géneration d’objets</h3><p>Pour qu’un gabarit soit rendu lorsqu’une URL est demandée, il faut donc que le routeur définisse cette URL, qu’elle soit implémentée par 
une route qui récupèrera un modèle qu’elle mettra à disposition du contrôleur et du gabarit. Le contrôleur écoutera les 
évènements en provenance du gabarit et y apportera la réponse adaptée. A noter que l’évènement peut également remonter jusqu’à la route.
Le gabarit est quant à lui encapsulé dans une vue gérée par Ember tout seul comme un grand.</p>
<p>Il n’est cependant <strong>pas nécessaire de créer systématiquement tout ces objets</strong> si aucune logique spécifique n’a besoin d’y être définie.
En effet, <a href="http://emberjs.com">Ember</a> s’appuie sur les <a href="#conventions-de-nommage">conventions de nommage</a> pour retrouver successivement,
à partir d’une URL, la route, le contrôleur, la vue et le gabarit associé. Si l’un de ces objet n’est pas trouvé, <a href="http://emberjs.com">Ember</a>
va en générer un par défaut. </p>
<p>Donc si l’on crée dans le routeur la route suivante sans créer aucun autre objet : </p>
<pre><code class="lang-js">App.Router.map(<span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">()</span> </span>{
  <span class="hljs-keyword">this</span>.route(<span class="hljs-string">"about"</span>, { path: <span class="hljs-string">"/about"</span> });
});
</code></pre>
<p><a href="http://emberjs.com">Ember</a> va générer les objets suivants :</p>
<ul>
<li><strong>route</strong> : <code>AboutRoute</code></li>
<li><strong>contrôleur</strong> : <code>AboutController</code></li>
<li><strong>gabarit</strong> : <code>about</code></li>
</ul>
<p>Dans une application <a href="http://emberjs.com">Ember</a>, <strong>il n’est donc nécessaire de ne définir que ce dont on a besoin !</strong>. Et c’est bien connu, 
moins il y a de boilerplate, plus il y a de plaisir !</p>
<p>Envie d’en savoir plus ? -&gt; <a href="http://emberjs.com/guides/routing/generated-objects/">doc officielle</a>.</p>
<p>Un bon moyen de se rendre compte de ça consiste à installer le debugger Ember sur votre navigateur (donc pas IE) préféré. Vous aurez, entre
autres, la liste de l’ensemble des objets impliqués dans le rendu d’une URL donnée. Cette liste distingue de manière claire les objets
créés par vous et ceux générés par Ember. </p>
<p>Ce module s’appelle <strong>Ember Inspector</strong> et est disponible pour <a href="https://chrome.google.com/webstore/detail/ember-inspector/bmdblncegkenkacieihfhpjfppoconhi?hl=en">Chrome</a> 
et <a href="https://addons.mozilla.org/en-US/firefox/addon/ember-inspector/">Firefox</a>. C’est absolument indispensable lorsqu’on développe en Ember.</p>
<h2 id="conclusion-et-next-steps"><a class="putainde-Title-anchor" href="#conclusion-et-next-steps">#</a>Conclusion et next steps</h2><p><a href="http://emberjs.com">Ember</a> est donc un framework très riche et extrêmement plaisant à pratiquer. 
<strong>Un vrai framework avec un vrai parti pris et des vrais choix structurants.</strong>
Il est résolument tourné vers le web et les URLs. Ses créateurs sont également ceux de son moteur de gabarit <a href="http://handlebarsjs.com/">Handlebars</a>
et sont très impliqués dans diverses initiatives autour de la standardisation et de l’évolution du web. Pour n’en citer que deux :
<a href="http://jsonapi.org/">JSON API</a> et <a href="https://gist.github.com/wycats/9144666b0c606d1838be">Web Components</a>, notamment au travers du moteur
de gabarits <a href="https://github.com/tildeio/htmlbars">HTMLBars</a>. 
Ils embrassent très rapidement les nouveaux standards tels que <a href="https://people.mozilla.org/~jorendorff/es6-draft.html">ES6 Harmony</a> à l’image des travaux
effectués autour d’<a href="http://www.ember-cli.com/">ember-cli</a> qui sera abordé dans un prochain article.</p>
<p>Enfin, contrairement aux <em>a priori</em>, la courbe d’apprentissage d’<a href="http://emberjs.com">Ember</a>
est progressive et il est très simple à prendre en main une fois les concepts de base appréhendés - c’est justement le but de cet
article. Au prochain épisode, nous verrons justement - par la pratique cette fois, <strong>comment démarrer et construire progressivement une
application <a href="http://emberjs.com">Ember</a></strong>.</p>

]]></description><pubDate>Mon, 20 Oct 2014 00:00:00 GMT</pubDate><link>http://putaindecode.fr/posts/js/debuter-avec-ember/</link><guid isPermaLink="true">http://putaindecode.fr/posts/js/debuter-avec-ember/</guid></item><item><title>Comment essayer de coder à peu près comme un chef (raté) sous Windows</title><description><![CDATA[
<p><img src="background.jpg" alt="Keyboard"></p>
<p>Oh oui, en voilà une belle question.</p>
<p>Il n’est pas toujours évident d’avoir un Linux, Unix, BSD ou autre avec un petit shell bien sympa sous la main. Et parfois coder sous Windows est une nécessité voire un désir. (Ouais, je ne vous parlerai pas ici de changer de boulot si Windows vous est imposé(e) ni de vous expliquer votre déficience mentale d’apprécier cet OS pour développer, ce n’est pas le sujet).</p>
<p>Étant un homme de challenge, j’aime me mettre dans des contextes limités et voir comment je me débrouille pour sortir d’une situation pénible à une situation acceptable voire agréable. Je me suis alors lancé pour vous dans cette aventure.</p>
<p>Oh mais pourquoi j’ai dû faire ça à la base ?</p>
<p>Après avoir créé <a href="https://github.com/kud/my">mon propre système de synchronisation de machines sous Mac OS X</a> (plus souvent communément appelé dotfiles mais faisant un peu plus), j’ai voulu faire de même sous Windows au cas où mon système crasherait et où je devrais tout réinstaller. On n’est jamais à l’abri.</p>
<p>Pour cela, plusieurs outils vont vous être nécessaires. Un chef sans bons outils, c’est drôlement handicapant. (Déjà que l’OS en question n’aide pas).</p>
<h2 id="chocolatey-la-base"><a class="putainde-Title-anchor" href="#chocolatey-la-base">#</a>Chocolatey : la base</h2><p><a href="http://chocolatey.org/">Chocolatey</a>. Ouais, chocolatey, ce petit script vous permettra de télécharger tout et n’importe quoi en CLI (ligne de commandes). Pour ceux qui ont l’habitude de Mac ou Linux, c’est le brew / apt-get de Windows.</p>
<p>Comment l’installer ?</p>
<p>Lancez <code>cmd.exe</code> en mode administrateur (touche windows puis “cmd” puis shift+ctrl+enter) et exécutez ce code :</p>
<pre><code class="lang-bash">$ <span class="hljs-variable">@powershell</span> -NoProfile -ExecutionPolicy unrestricted -Command <span class="hljs-string">"iex ((new-object net.webclient).DownloadString('https://chocolatey.org/install.ps1'))"</span> &amp;&amp; SET PATH=<span class="hljs-variable">%PATH</span><span class="hljs-variable">%;</span><span class="hljs-variable">%ALLUSERSPROFILE</span><span class="hljs-variable">%\</span>chocolatey\bin
</code></pre>
<p>Ou <code>PowerShell</code> en mode administrateur (touche windows puis “powershell” puis shift+ctrl+enter) et éxecutez :</p>
<pre><code class="lang-bash">$ iex ((new-<span class="hljs-tag">object</span> net.webclient).<span class="hljs-function"><span class="hljs-title">DownloadString</span><span class="hljs-params">(<span class="hljs-string">'https://chocolatey.org/install.ps1'</span>)</span></span>)
</code></pre>
<p>Une fois installé, vous pourrez installer n’importe quel logiciel listé sur <a href="http://chocolatey.org/packages">leur site</a>.</p>
<p>Passons à la suite.</p>
<h2 id="logiciels-de-developpement"><a class="putainde-Title-anchor" href="#logiciels-de-developpement">#</a>Logiciels de développement</h2><p>Yes, on a donc Chocolatey qui va nous simplifier grandement l’installation de logiciels. Passons maintenant aux outils pour bien développer.</p>
<h3 id="git"><a class="putainde-Title-anchor" href="#git">#</a>Git</h3><p>Lorsque tu joues à un jeu vidéo, tu sauvegardes régulièrement ton avancement non ? Bah là, c’est pareil mais pour le code.</p>
<pre><code class="lang-bash">$ choco <span class="hljs-keyword">install</span> git.<span class="hljs-keyword">install</span>
</code></pre>
<ul>
<li><a href="http://git-scm.com/">site officiel</a></li>
<li><a href="https://chocolatey.org/packages/git.install">lien du package</a></li>
</ul>
<h3 id="node-js"><a class="putainde-Title-anchor" href="#node-js">#</a>Node.js</h3><p>Faire du JavaScript côté serveur ou en shell, le pied. Surtout pour faire des scripts Windows, plutôt que de passer par Batch.</p>
<pre><code class="lang-bash">$ choco <span class="hljs-keyword">install</span> nodejs.<span class="hljs-keyword">install</span>
</code></pre>
<ul>
<li><a href="http://nodejs.org/">site officiel</a></li>
<li><a href="https://chocolatey.org/packages/nodejs.install">lien du package</a></li>
</ul>
<h3 id="editeur-de-texte"><a class="putainde-Title-anchor" href="#editeur-de-texte">#</a>Éditeur de texte</h3><p>Sublime Text, l’éditeur préféré des Franç… je m’égare. Bref, un bon éditeur.</p>
<pre><code class="lang-bash">$ choco <span class="hljs-keyword">install</span> sublimetext3
</code></pre>
<ul>
<li><a href="http://www.sublimetext.com/">site officiel</a></li>
<li><a href="https://chocolatey.org/packages/sublimetext3">lien du package</a></li>
</ul>
<p>Vous pouvez aussi installer <a href="https://atom.io/">Atom</a> si vous préférez.</p>
<h3 id="gestion-d-une-base-de-donnees"><a class="putainde-Title-anchor" href="#gestion-d-une-base-de-donnees">#</a>Gestion d’une base de données</h3><p>HeidiSQL, un logiciel avec une interface qui se rapproche de phpMyAdmin.</p>
<pre><code class="lang-bash">$ choco <span class="hljs-keyword">install</span> HeidiSQL
</code></pre>
<ul>
<li><a href="http://www.heidisql.com//">site officiel</a></li>
<li><a href="http://chocolatey.org/packages/HeidiSQL">lien du package</a></li>
</ul>
<p>Ou encore MySQL Workbench un excellent soft pour gérer une base de données:</p>
<ul>
<li>Modélisation</li>
<li>Édition</li>
<li>Migration
Par contre, il est un peu plus complexe à utiliser.</li>
</ul>
<pre><code class="lang-bash">$ choco <span class="hljs-keyword">install</span> mysql.workbench
</code></pre>
<ul>
<li><a href="http://dev.mysql.com/downloads/workbench/">site officiel</a></li>
<li><a href="http://chocolatey.org/packages/mysql.workbench">lien du package</a></li>
</ul>
<h3 id="un-meilleur-shell"><a class="putainde-Title-anchor" href="#un-meilleur-shell">#</a>Un meilleur shell</h3><p>Clink va vous permettre quelques fonctionnalités intéressantes que le shell de Windows n’a pas de base, comme taper <code>&lt;tab&gt;</code> pour l’autocomplétion par exemple.</p>
<pre><code class="lang-bash">$ choco <span class="hljs-keyword">install</span> clink.<span class="hljs-keyword">install</span>
</code></pre>
<ul>
<li><a href="http://mridgers.github.io/clink/">site officiel</a></li>
<li><a href="https://chocolatey.org/packages/clink.install">lien du package</a></li>
</ul>
<h3 id="si-vous-avez-besoin-de-ssh"><a class="putainde-Title-anchor" href="#si-vous-avez-besoin-de-ssh">#</a>Si vous avez besoin de SSH</h3><p>Pour le SSH sous Windows c’est assez complexe, il faut quelques outils dont le principal, putty (un terminal et +).</p>
<pre><code class="lang-bash">$ choco <span class="hljs-keyword">install</span> putty
</code></pre>
<ul>
<li><a href="http://chocolatey.org/packages/putty">site officiel</a></li>
<li><a href="http://www.chiark.greenend.org.uk/~sgtatham/putty/">lien du package</a></li>
</ul>
<p>Putty vient avec une suite de logiciels :</p>
<ul>
<li><a href="http://www.chiark.greenend.org.uk/~sgtatham/putty/download.html">PuTTYgen</a> pour générer une clé SSH sous Windows</li>
<li><a href="http://www.chiark.greenend.org.uk/~sgtatham/putty/download.html">Plink</a> pour permettre à HeidiSQL de se connecter à une base de données via SSH.</li>
<li><a href="http://www.chiark.greenend.org.uk/~sgtatham/putty/download.html">Pageant</a> pour charger votre clé SSH dans Windows pour éviter qu’il demande sans cesse la clé ou le mot de passe.</li>
</ul>
<blockquote>
<p>Pour que le ssh soit agréable, je vous recommande pageant et ensuite un terminal comme <em>Clink</em> ou encore <em>git bash</em> qui s’installe via <em>git</em>.</p>
</blockquote>
<h3 id="une-machine-virtuelle-pour-tester-ie-ou-meme-gnu-linux"><a class="putainde-Title-anchor" href="#une-machine-virtuelle-pour-tester-ie-ou-meme-gnu-linux">#</a>Une machine virtuelle pour tester IE ou même GNU/Linux</h3><p>On a toujours une intégration à tester sous IE pour ça Microsoft nous donne accès à des machines virtuelles gratuitement sur <a href="https://www.modern.ie/fr-fr">ModernIE</a>. Il nous faut donc Virtualbox pour les lancer.</p>
<pre><code class="lang-bash">$ choco <span class="hljs-keyword">install</span> virtualbox
$ choco <span class="hljs-keyword">install</span> VirtualBox.ExtensionPack
</code></pre>
<blockquote>
<p>l’Extension Pack est utile pour une intégration parfaite avec votre machine si vous installez votre propre VM GNU/Linux ou Windows.</p>
</blockquote>
<ul>
<li><a href="hhttps://www.virtualbox.org/">site officiel</a></li>
<li><a href="http://chocolatey.org/packages/virtualbox">lien du package</a></li>
</ul>
<h3 id="compresser-decompresser-comme-vous-le-voulez"><a class="putainde-Title-anchor" href="#compresser-decompresser-comme-vous-le-voulez">#</a>Compresser / décompresser comme vous le voulez</h3><p>7zip, le logiciel de référence pour ce genre de pratique.</p>
<pre><code class="lang-bash">$ choco <span class="hljs-keyword">install</span> <span class="hljs-number">7</span>zip.<span class="hljs-keyword">install</span>
</code></pre>
<ul>
<li><a href="http://www.7-zip.org/">site officiel</a></li>
<li><a href="https://chocolatey.org/packages/7zip.install">lien du package</a></li>
</ul>
<h3 id="gerer-les-pdf"><a class="putainde-Title-anchor" href="#gerer-les-pdf">#</a>Gérer les pdf</h3><p>Sumatra pour les lire. PDFCreator pour faire une imprimante virtuelle sortant des PDFs.</p>
<h4 id="sumatra"><a class="putainde-Title-anchor" href="#sumatra">#</a>Sumatra</h4><ul>
<li><a href="http://blog.kowalczyk.info/software/sumatrapdf/free-pdf-reader.html">site officiel</a></li>
<li><a href="https://chocolatey.org/packages/sumatrapdf.install">lien du package</a></li>
</ul>
<pre><code class="lang-bash">$ choco <span class="hljs-keyword">install</span> sumatrapdf.<span class="hljs-keyword">install</span>
</code></pre>
<h4 id="pdfcreator"><a class="putainde-Title-anchor" href="#pdfcreator">#</a>PDFCreator</h4><ul>
<li><a href="http://www.pdfforge.org/pdfcreator">site officiel</a></li>
<li><a href="https://chocolatey.org/packages/pdfcreator">lien du package</a></li>
</ul>
<pre><code class="lang-bash">$ choco <span class="hljs-keyword">install</span> pdfcreator
</code></pre>
<h3 id="mettre-des-onglets-dans-l-explorateur-de-fichiers"><a class="putainde-Title-anchor" href="#mettre-des-onglets-dans-l-explorateur-de-fichiers">#</a>Mettre des onglets dans l’explorateur de fichiers</h3><p>Nous sommes en 2014 ça fait des années que Microsoft sait mais, ce n’est toujours pas disponible. C’est là que Clover rentre en jeu.</p>
<pre><code class="lang-bash">$ choco <span class="hljs-keyword">install</span> Clover
</code></pre>
<ul>
<li><a href="http://ejie.me/">site officiel</a></li>
<li><a href="http://chocolatey.org/packages/Clover">lien du package</a></li>
</ul>
<h3 id="spaaaaaaaces"><a class="putainde-Title-anchor" href="#spaaaaaaaces">#</a>Spaaaaaaaces</h3><p>Parce qu’avoir plusieurs bureaux / espaces, c’est plus pratique pour gérer ses fenêtres, je vous propose VirtuaWin. Cela vous permettra de garder en plein écran vos logiciels et de zapper d’un logiciel à un autre sans passer par <code>alt+tab</code> mais en allant d’un bureau à un autre.</p>
<pre><code class="lang-bash">$ choco <span class="hljs-keyword">install</span> virtuawin
</code></pre>
<ul>
<li><a href="http://virtuawin.sourceforge.net/">site officiel</a></li>
<li><a href="https://chocolatey.org/packages/virtuawin">lien du package</a></li>
</ul>
<h3 id="launchy-le-alfred-like-sous-windows"><a class="putainde-Title-anchor" href="#launchy-le-alfred-like-sous-windows">#</a>Launchy, le Alfred-like sous Windows</h3><p>Je sais pas vous mais moi, les raccourcis qui me gâchent mon beau wallpaper choisi avec goût, ça m’énerve. Et puis le clickodrome, c’est lent et chiant. Du coup, lancer ses logiciels à partir d’un moteur de recherche, c’est quand même vachement bien. Ca permet aussi de faire des recherches de fichier, des calculs, et tout un tas d’autres choses. Voici alors Launchy.</p>
<pre><code class="lang-bash">$ choco <span class="hljs-keyword">install</span> launchy-beta
</code></pre>
<ul>
<li><a href="http://www.launchy.net/">site officiel</a></li>
<li><a href="https://chocolatey.org/packages/launchy-beta">lien du package</a></li>
</ul>
<h3 id="pipette-et-retouche"><a class="putainde-Title-anchor" href="#pipette-et-retouche">#</a>Pipette et retouche</h3><p>L’indispensable <a href="http://photofiltre.free.fr/frames.htm">PhotoFiltre</a> qui, bien qu’il ne soit plus mis à jour depuis 2012, est très stable et efficace. Il fait peu mais, le fait bien.</p>
<ul>
<li>Édition rapide d’images</li>
<li>Pipette</li>
<li>etc.</li>
</ul>
<p>Et surtout, il est ultra léger et démarre en moins d’une seconde.</p>
<h3 id="et-enfin-comment-ne-pas-se-niquer-les-yeux-toute-la-journee"><a class="putainde-Title-anchor" href="#et-enfin-comment-ne-pas-se-niquer-les-yeux-toute-la-journee">#</a>Et enfin, comment ne pas se niquer les yeux toute la journée</h3><h4 id="f-lux"><a class="putainde-Title-anchor" href="#f-lux">#</a>f.lux</h4><p>On va commencer par f.lux. Ce petit logiciel permettant de gérer la colorimétrie de votre écran en fonction de l’heure. Typiquement, les écrans rendent un blanc digne d’un soleil à midi. Sauf que le soir, on allume la lumière et celle-ci n’a pas du coup une couleur blanche mais souvent plutôt rouge. f.lux permet alors d’ajuster votre écran afin que la couleur soit identique à la lumière ambiante pour réduire les différences de couleurs et éviter de vous abimer les yeux. En plus, ça permet au cerveau de se préparer à aller se coucher. :D</p>
<pre><code class="lang-bash">$ choco <span class="hljs-keyword">install</span> f.lux
</code></pre>
<ul>
<li><a href="https://justgetflux.com/">site officiel</a></li>
<li><a href="https://chocolatey.org/packages/f.lux">lien du package</a></li>
</ul>
<h4 id="mactype"><a class="putainde-Title-anchor" href="#mactype">#</a>MacType</h4><p>Et surtout, MacType. Oh oui MacType. Je pense que seule une personne venant de Mac OS X peut comprendre. Dieu sait que le font rendering sous Windows est vraiment pourri et que Steve Jobs depuis le départ de Mac a fait en sorte sur le rendering des fonts sous son OS soit de qualité.</p>
<p>Pour réduire cette différence entre un Windows et un Mac OS X, je vous propose MacType qui permet de remplacer le font rendering de Windows et d’apprécier lire à nouveau sur cet OS.</p>
<pre><code class="lang-bash">$ choco <span class="hljs-keyword">install</span> mactype
</code></pre>
<p>Je vous conseille le profil <code>XMac.LCD.Default</code>.</p>
<ul>
<li><a href="https://code.google.com/p/mactype/">site officiel</a></li>
<li><a href="https://chocolatey.org/packages/mactype">lien du package</a></li>
</ul>
<h2 id="vous-voila-pare-e-"><a class="putainde-Title-anchor" href="#vous-voila-pare-e-">#</a>Vous voilà paré(e) !</h2><p>On est bon, on a tous les outils nécessaires pour pouvoir coder correctement sur Windows.</p>
<p>Si vous souhaitez en savoir plus et surtout vous tenir à jour d’éventuels logiciels que je pourrais installer, n’hésitez pas à vous rendre sur mon projet <a href="https://github.com/kud/my-unfortunately">my-unfortunately</a> qui est le <em>synchroniser</em> dont je vous ai parlé tout à l’heure.</p>
<p>Bon code !</p>

]]></description><pubDate>Wed, 15 Oct 2014 00:00:00 GMT</pubDate><link>http://putaindecode.fr/posts/windows/comment-coder-sous-windows/</link><guid isPermaLink="true">http://putaindecode.fr/posts/windows/comment-coder-sous-windows/</guid></item><item><title>Dépendances et premier projet en Ruby</title><description><![CDATA[
<p><a href="#tl-dr">tl;dr</a></p>
<p>Dans l’<a href="/posts/backend/premiers-pas-avec-ruby">article précédent</a>
nous avons installé Ruby. Désormais nous allons aborder les gems,
les dépendances et commencer notre web service.</p>
<p>Un gem en Ruby c’est une lib, comme un paquet NPM pour NodeJS. C’est
d’ailleurs le système de rubygems qui a inspiré le système de NPM.
Pour installer un gem, rien de plus simple que <code>gem install sass</code>,
qui ici va installer la bibliothèque <code>sass</code>.</p>
<p>Un projet Ruby nécessite la plupart du temps des bibliothèques afin
de ne pas tout faire soi-même, il est donc nécessaire d’avoir une
gestion des dépendances pour le projet.</p>
<h2 id="bundler-le-gem-qui-gere-les-gems"><a class="putainde-Title-anchor" href="#bundler-le-gem-qui-gere-les-gems">#</a>Bundler, le gem qui gère les gems</h2><p><a href="http://bundler.io">Bundler</a> est un gem qui va vous permettre de créer un fichier Gemfile
contenant vos dépendances, et qui vous installera les gems
nécessaires avec la gestion des versions et de leurs propres
dépendances. Un fichier Gemfile se présente comme ceci :</p>
<pre><code class="lang-ruby"><span class="hljs-keyword">source</span> <span class="hljs-string">'https://rubygems.org'</span>
<span class="hljs-keyword">ruby</span> <span class="hljs-string">'2.1.2'</span>
gem <span class="hljs-string">'sinatra'</span>
</code></pre>
<p>L’instruction <code>source</code> permet de préciser l’url des dépôts de gems.
La version de ruby n’est pas obligatoire mais j’aime la préciser pour
ne pas me mélanger dans mes projets avec différentes versions de Ruby
(voir le
<a href="/posts/backend/premiers-pas-avec-ruby">précédent article pour les versions du Ruby</a>
et <a href="https://github.com/sstephenson/rbenv">rbenv</a>). Et enfin, la
déclaration de notre première bibliothèque de dépendance :
<a href="http://www.sinatrarb.com">Sinatra</a>.</p>
<p>Il est possible d’être bien plus précis dans le Gemfile, comme…</p>
<p>Préciser dans quel environnement charger les gems :</p>
<pre><code class="lang-ruby">gem <span class="hljs-string">'sqlite3'</span>, <span class="hljs-symbol">group:</span> [<span class="hljs-symbol">:development</span>, <span class="hljs-symbol">:test</span>]
</code></pre>
<p>Une numéro de version :</p>
<pre><code class="lang-ruby"><span class="hljs-title">gem</span> <span class="hljs-string">'rails'</span>, <span class="hljs-string">'4.1.6'</span>         <span class="hljs-comment"># version 4.1.6</span>
gem <span class="hljs-string">'sass-rails'</span>, <span class="hljs-string">'~&gt; 4.0.3'</span> <span class="hljs-comment"># &gt;= 4.0.3 mais &lt; 4.1.0</span>
</code></pre>
<p>Préciser la classe à charger :</p>
<pre><code class="lang-ruby">gem <span class="hljs-string">'valid_email'</span>, <span class="hljs-string">require:</span> <span class="hljs-string">'valid_email/email_validator'</span>
</code></pre>
<p>Aller chercher directement sur Github :</p>
<pre><code class="lang-ruby">gem <span class="hljs-string">'nokogiri'</span>, <span class="hljs-string">github:</span> <span class="hljs-string">'sparklemotion/nokogiri'</span>
# <span class="hljs-string">https:</span><span class="hljs-comment">//github.com/sparklemotion/nokogiri.git</span>

gem <span class="hljs-string">'rails'</span>, <span class="hljs-string">github:</span> <span class="hljs-string">'rails'</span>
# <span class="hljs-string">https:</span><span class="hljs-comment">//github.com/rails/rails.git</span>

gem <span class="hljs-string">'rails'</span>, <span class="hljs-string">github:</span> <span class="hljs-string">'rails'</span>, <span class="hljs-string">branch:</span> <span class="hljs-string">'4-1-stable'</span>
# <span class="hljs-string">https:</span><span class="hljs-comment">//github.com/rails/rails.git sur la branche 4-1-stable</span>
</code></pre>
<p>Il existe encore d’autres instructions, de quoi rendre sa gestion des
dépendances vraiment fine et précise.</p>
<p>Une fois le Gemfile prêt, bundler a plusieurs commandes de
disponibles pour pouvoir les télécharger et utiliser.</p>
<ul>
<li><code>$ bundle install</code> installera les gems requis</li>
<li><code>$ bundle update</code> mettra à jour vers les versions les plus récentes si possible les gems requis</li>
<li><code>$ bundle exec</code> permettra de précéder une commande ruby afin de l’exécuter dans le contexte du Gemfile, très utile lorsque l’on a différentes versions de Ruby qui se baladent dans le terminal</li>
</ul>
<p>Bundler va générer un fichier <code>Gemfile.lock</code> qui est la description
exhaustive des dépendances de votre application, chaque gem avec le
numéro de sa version installée, chaque dépendance pour chaque gem,
une jolie arborescence plus que précise.</p>
<h2 id="commencons-notre-web-service"><a class="putainde-Title-anchor" href="#commencons-notre-web-service">#</a>Commençons notre web service</h2><p>Assez parlé des outils qui existent, utilisons-les. Tout d’abord
installons Bundler, sans oublier le <code>$ rbenv rehash</code> nécessaire si vous
utilisez rbenv pour vos versions de Ruby afin de mettre à jour les
commandes disponibles dans le terminal :</p>
<pre><code><span class="hljs-variable">$ </span>gem install bundler
<span class="hljs-variable">$ </span>rbenv rehash
</code></pre><p>Pour notre première application, nous allons faire un web service
avec Sinatra qui est un micro-framework web, ayant d’ailleurs
clairement inspiré Express (“Sinatra inspired web development
framework for node.js”). Notre Gemfile va donc être exactement
comme notre premier exemple :</p>
<pre><code class="lang-ruby"><span class="hljs-keyword">source</span> <span class="hljs-string">'https://rubygems.org'</span>
<span class="hljs-keyword">ruby</span> <span class="hljs-string">'2.1.2'</span>
gem <span class="hljs-string">'sinatra'</span>
</code></pre>
<p>Un petit <code>bundle install</code> et nous sommes prêts à démarrer !</p>
<p>Pour ne pas brusquer les choses, nous allons faire la version la plus
simple d’un web service avec Sinatra, ce qui nous permettra de
constater la simplicité extrême de Ruby et du framework :</p>
<pre><code class="lang-ruby"><span class="hljs-comment">########</span>
<span class="hljs-comment"># app.rb</span>
<span class="hljs-comment">#</span>

<span class="hljs-built_in">require</span> <span class="hljs-string">'sinatra'</span>

<span class="hljs-built_in">get</span> <span class="hljs-string">'/'</span> <span class="hljs-built_in">do</span>
  <span class="hljs-string">'Hello World!'</span>
<span class="hljs-function"><span class="hljs-keyword">end</span></span>
</code></pre>
<p>Qu’avons-nous fait là ? Pas grand chose, et en même temps tout juste
ce qu’il faut. Nous avons inclus le gem à notre script et utilisé la
méthode Sinatra <code>get</code> nous permettant de déclarer un point d’entrée
en <code>GET</code> sur la route ‘/‘. Cette méthode prend également comme
argument un <code>block</code> caractérisé par le <code>do</code> et le <code>end</code>. La dernière
valeur du block étant la valeur de retour, nous renvoyons la seule
chaîne de caractères “Hello World!”.</p>
<p>Et maintenant : lancement ! <code>$ bundle exec ruby app.rb</code> va lancer
l’application (mais <code>ruby app.rb</code> suffit), par défaut sur le port
<code>4567</code>. Regardez vite <a href="http://localhost:4567">http://localhost:4567</a>
et là magie, “Hello World!” sur une magnifique page blanche, notre
tout premier web service est fonctionnel.</p>
<p>Alors oui, ce n’est pas une révolution. Mais tout de même, en
réduisant la syntaxe du block on se retrouve avec un script de deux
lignes qui crée un vrai web service web. Et vous allez vite voir
qu’en quelques lignes de plus on peut vite complexifier le bousin.</p>
<h2 id="au-prochain-episode"><a class="putainde-Title-anchor" href="#au-prochain-episode">#</a>Au prochain épisode</h2><p>Dans l’article suivant nous allons ajouter des fonctionnalités à
notre toute nouvelle application, de nouvelles routes, de la
persistence et aussi des vues dans un format un peu plus utile.</p>
<p>Stay tuned!</p>
<h2 id="tl-dr"><a class="putainde-Title-anchor" href="#tl-dr">#</a>tl;dr</h2><p>Voici la version abrégée de cet article :</p>
<pre><code class="lang-ruby"><span class="hljs-comment"># Gemfile</span>
<span class="hljs-built_in">source</span> <span class="hljs-string">'https://rubygems.org'</span>
ruby <span class="hljs-string">'2.1.2'</span>
gem <span class="hljs-string">'sinatra'</span>
</code></pre>
<pre><code class="lang-ruby"><span class="hljs-comment"># app.rb</span>
<span class="hljs-built_in">require</span> <span class="hljs-string">'sinatra'</span>
<span class="hljs-built_in">get</span> <span class="hljs-string">'/'</span> <span class="hljs-built_in">do</span>
  <span class="hljs-string">'Hello World!'</span>
<span class="hljs-function"><span class="hljs-keyword">end</span></span>
</code></pre>
<pre><code class="lang-bash"><span class="hljs-variable">$ </span>gem install bundler
<span class="hljs-variable">$ </span>rbenv rehash
<span class="hljs-variable">$ </span>bundle install
<span class="hljs-variable">$ </span>ruby app.rb
</code></pre>
<h2 id="sources"><a class="putainde-Title-anchor" href="#sources">#</a>Sources</h2><ul>
<li><a href="https://rubygems.org">RubyGems</a></li>
<li><a href="http://bundler.io">Bundler</a></li>
<li><a href="https://github.com/sstephenson/rbenv">rbenv</a></li>
<li><a href="http://www.sinatrarb.com">Sinatra</a> et surtout son <a href="http://www.sinatrarb.com/intro.html">README</a></li>
</ul>

]]></description><pubDate>Tue, 14 Oct 2014 00:00:00 GMT</pubDate><link>http://putaindecode.fr/posts/backend/ruby-dependances-et-projet/</link><guid isPermaLink="true">http://putaindecode.fr/posts/backend/ruby-dependances-et-projet/</guid></item><item><title>Le guide complet pour centrer en css</title><description><![CDATA[
<p>Centrer en css, c’est la base, et parfois, ce n’est pas si simple. Ce guide vous servira donc pour vous lister les techniques les plus connues pour réaliser ce fameux effet centré.</p>
<p>Les principales techniques de centrage en css seront expliquées pendant les premières déclarations, et réutilisées par la suite dans tout le guide, vous pouvez donc avoir un intérêt à lire le guide dans le sens normal de la lecture.</p>
<p>Cependant, si vous souhaitez juste avoir le code correspondant à votre problème, vous pouvez utiliser le menu composé d’ancres ci-dessous.</p>
<h2 id="sommaire"><a class="putainde-Title-anchor" href="#sommaire">#</a>Sommaire</h2><ul>
<li><a href="#tl-dr-mes-techniques-preferees">tl;dr - mes techniques préférées</a></li>
<li><a href="#techniques-traditionnelles">Techniques tradtionnelles</a><ul>
<li><a href="#un-bloc-dans-un-bloc">Un bloc dans un bloc</a></li>
<li><a href="#des-blocs-dans-un-bloc">Des blocs dans un bloc</a></li>
<li><a href="#des-elements-inlines-dans-un-bloc">Des éléments inlines dans un bloc</a></li>
</ul>
</li>
<li><a href="#techniques-avancees-flexbox-ie11-">Techniques avancées : flexbox (ie11+)</a></li>
<li><a href="#conclusion">Conclusion</a></li>
</ul>
<h2 id="tl-dr-mes-techniques-preferees"><a class="putainde-Title-anchor" href="#tl-dr-mes-techniques-preferees">#</a>tl;dr - mes techniques préférées</h2><h3 id="un-bloc-dans-un-bloc"><a class="putainde-Title-anchor" href="#un-bloc-dans-un-bloc">#</a>Un bloc dans un bloc</h3><pre><code class="lang-css"><span class="hljs-class">.parent</span> <span class="hljs-rules">{
  <span class="hljs-rule"><span class="hljs-attribute">position</span>:<span class="hljs-value"> relative</span></span>;

  <span class="hljs-comment">/* facultatif : résoud un bug non systématique de blur sur IE */</span>
  <span class="hljs-rule"><span class="hljs-attribute">transform-style</span>:<span class="hljs-value"> preserve-<span class="hljs-number">3</span>d</span></span>; 
<span class="hljs-rule">}</span></span>

<span class="hljs-class">.child</span> <span class="hljs-rules">{
  <span class="hljs-rule"><span class="hljs-attribute">position</span>:<span class="hljs-value"> absolute</span></span>;
  <span class="hljs-rule"><span class="hljs-attribute">top</span>:<span class="hljs-value"> <span class="hljs-number">50%</span></span></span>;
  <span class="hljs-rule"><span class="hljs-attribute">left</span>:<span class="hljs-value"> <span class="hljs-number">50%</span></span></span>;
  <span class="hljs-rule"><span class="hljs-attribute">transform</span>:<span class="hljs-value"> <span class="hljs-function">translate</span>(-<span class="hljs-number">50%</span>, -<span class="hljs-number">50%</span>)</span></span>; <span class="hljs-comment">/* compatibilité : ie9+ */</span>
<span class="hljs-rule">}</span></span>
</code></pre>
<p><em>Note : le détail de la technique est expliqué plus loin dans le post</em></p>
<h3 id="des-blocs-dans-un-bloc"><a class="putainde-Title-anchor" href="#des-blocs-dans-un-bloc">#</a>Des blocs dans un bloc</h3><pre><code class="lang-css"><span class="hljs-class">.parent</span> <span class="hljs-rules">{
  <span class="hljs-rule"><span class="hljs-attribute">text-align</span>:<span class="hljs-value"> center</span></span>;
<span class="hljs-rule">}</span></span>

<span class="hljs-class">.parent</span><span class="hljs-pseudo">:before</span> <span class="hljs-rules">{
  <span class="hljs-rule"><span class="hljs-attribute">content</span>:<span class="hljs-value"> <span class="hljs-string">''</span></span></span>;
  <span class="hljs-rule"><span class="hljs-attribute">display</span>:<span class="hljs-value"> inline-block</span></span>;
  <span class="hljs-rule"><span class="hljs-attribute">height</span>:<span class="hljs-value"> <span class="hljs-number">100%</span></span></span>;
  <span class="hljs-rule"><span class="hljs-attribute">vertical-align</span>:<span class="hljs-value"> middle</span></span>;
  <span class="hljs-rule"><span class="hljs-attribute">margin-right</span>:<span class="hljs-value"> -<span class="hljs-number">0.25em</span></span></span>; <span class="hljs-comment">/* space width */</span>
<span class="hljs-rule">}</span></span>

<span class="hljs-class">.child</span> <span class="hljs-rules">{
  <span class="hljs-rule"><span class="hljs-attribute">display</span>:<span class="hljs-value"> inline-block</span></span>;
  <span class="hljs-rule"><span class="hljs-attribute">vertical-align</span>:<span class="hljs-value"> middle</span></span>;
<span class="hljs-rule">}</span></span>
</code></pre>
<p><em>Note : le détail de la technique est expliqué plus loin dans le post</em></p>
<h3 id="des-elements-inline-dans-un-bloc"><a class="putainde-Title-anchor" href="#des-elements-inline-dans-un-bloc">#</a>Des éléments inline dans un bloc</h3><pre><code class="lang-css"><span class="hljs-class">.parent</span> <span class="hljs-rules">{
  <span class="hljs-rule"><span class="hljs-attribute">text-align</span>:<span class="hljs-value"> center</span></span>;
<span class="hljs-rule">}</span></span>

<span class="hljs-class">.child</span> <span class="hljs-rules">{
  <span class="hljs-rule"><span class="hljs-attribute">vertical-align</span>:<span class="hljs-value"> middle</span></span>;
<span class="hljs-rule">}</span></span>
</code></pre>
<p><em>Note : le détail de la technique est expliqué plus loin dans le post</em></p>
<h2 id="techniques-traditionnelles"><a class="putainde-Title-anchor" href="#techniques-traditionnelles">#</a>Techniques traditionnelles</h2><h3 id="un-bloc-dans-un-bloc"><a class="putainde-Title-anchor" href="#un-bloc-dans-un-bloc">#</a>Un bloc dans un bloc</h3><h4 id="centrage-horizontal"><a class="putainde-Title-anchor" href="#centrage-horizontal">#</a>Centrage horizontal</h4><p>La technique du <code>margin: 0 auto;</code> consiste à dire au browser que les marges de gauche et droite seront identiques et que leur valeur sera <code>auto</code>. Le browser calcule donc des marges de même taille de chaque côté et centre le bloc naturellement.</p>
<pre><code class="lang-css"><span class="hljs-class">.parent</span> <span class="hljs-rules">{<span class="hljs-rule">}</span></span>

<span class="hljs-class">.child</span> <span class="hljs-rules">{
  <span class="hljs-rule"><span class="hljs-attribute">margin</span>:<span class="hljs-value"> <span class="hljs-number">0</span> auto</span></span>;
<span class="hljs-rule">}</span></span>
</code></pre>
<p>La technique du <code>left: 50%; + margin négative en unités</code> est à utiliser sur les blocs dont vous conaissez la taille à l’avance. Le principe consiste à expliquer au navigateur qu’on place un bloc en <code>position: absolute;</code>. Celui-ci va donc chercher à se placer par rapport à son élément parent le plus proche qui est en <code>position: relative;</code>. Il faut donc ne pas oublier d’attribuer cette propriété sur le <code>.parent</code>. Il suffit ensuite d’indiquer qu’on place le bloc à <code>left: 50%;</code>. Le bloc se place donc à 50% vers la gauche par rapport à la taille totale du bloc conteneur. Il ne nous reste plus qu’à décaler vers la droite le bloc <code>.child</code> en lui donnant une valeur de margin négative vers la gauche. Celle-ci doit être égale à la moitié de la <code>width</code>(en pixels, em, rems, pourcentages, …).</p>
<pre><code class="lang-css"><span class="hljs-class">.parent</span> {
  <span class="hljs-attribute">position</span>: relative;
}

<span class="hljs-class">.child</span> {
  <span class="hljs-tag">width</span>: {<span class="hljs-attribute">X</span>}<span class="hljs-attribute">em</span>; <span class="hljs-comment">/* remplacer {X} par votre valeur */</span>
  <span class="hljs-attribute">position</span>: absolute;
  <span class="hljs-attribute">left</span>: <span class="hljs-number">50%</span>;
  <span class="hljs-tag">margin-left</span>: <span class="hljs-tag">-</span>{<span class="hljs-attribute">X</span>/<span class="hljs-number">2</span>}<span class="hljs-attribute">em</span>; <span class="hljs-comment">/* remplacer {X/2} par la moitié de votre width */</span>
}
</code></pre>
<p>En combinant la technique précédente et des propriétés css modernes, on arrive à la technique du <code>transform: translate; négatif</code>. Même principe que la technique précédente, sauf qu’à la fin, on indique au bloc enfant d’effectuer une translation sur lui-même, en suivant l’axe X (l’axe horizontal) de -50%, donc 50% vers la droite. Sauf que ce 50% s’applique sur le bloc enfant directement. Vous n’avez donc pas besoin de connaitre la <code>width</code>de l’élément enfant à l’avance. Le <code>transform-style: preserve-3d;</code> sur le bloc <code>.parent</code> est là pour régler des problèmes de flou sur certains navigateurs lors de transitions.</p>
<pre><code class="lang-css"><span class="hljs-class">.parent</span> <span class="hljs-rules">{
  <span class="hljs-rule"><span class="hljs-attribute">position</span>:<span class="hljs-value"> relative</span></span>;

  <span class="hljs-comment">/* facultatif : résoud un bug non systématique de blur sur IE */</span>
  <span class="hljs-rule"><span class="hljs-attribute">transform-style</span>:<span class="hljs-value"> preserve-<span class="hljs-number">3</span>d</span></span>;
<span class="hljs-rule">}</span></span>

<span class="hljs-class">.child</span> <span class="hljs-rules">{
  <span class="hljs-rule"><span class="hljs-attribute">position</span>:<span class="hljs-value"> absolute</span></span>;
  <span class="hljs-rule"><span class="hljs-attribute">left</span>:<span class="hljs-value"> <span class="hljs-number">50%</span></span></span>;
  <span class="hljs-rule"><span class="hljs-attribute">transform</span>:<span class="hljs-value"> <span class="hljs-function">translateX</span>(-<span class="hljs-number">50%</span>)</span></span>;
<span class="hljs-rule">}</span></span>
</code></pre>
<h4 id="centrage-vertical"><a class="putainde-Title-anchor" href="#centrage-vertical">#</a>Centrage vertical</h4><p>Même principe que la technique <code>left: 50%; + margin négative en unités</code>, sauf qu’on applique le principe aux propriétés css relatives à la hauteur. Vous avez donc besoin de connaitre à l’avance la hauteur de votre bloc.</p>
<pre><code class="lang-css"><span class="hljs-class">.parent</span> {
  <span class="hljs-attribute">position</span>: relative;
}

<span class="hljs-class">.child</span> {
  <span class="hljs-tag">height</span>: {<span class="hljs-attribute">Y</span>}<span class="hljs-attribute">em</span>; <span class="hljs-comment">/* remplacer {Y} par votre valeur */</span>
  <span class="hljs-attribute">position</span>: absolute;
  <span class="hljs-attribute">top</span>: <span class="hljs-number">50%</span>;
  <span class="hljs-tag">margin-top</span>: <span class="hljs-tag">-</span>{<span class="hljs-attribute">Y</span>/<span class="hljs-number">2</span>}<span class="hljs-attribute">em</span>; <span class="hljs-comment">/* remplacer {Y/2} par la moitié de votre height */</span>
}
</code></pre>
<p>Ici on réutilise le principe expliqué dans la technique <code>transform: translate; négatif</code>, mais appliqué à la hauteur. Notez que le nom de la <a href="http://apps.workflower.fi/vocabs/css/fr">valeur de la propriété</a> css passe de <code>translateX</code> à <code>translateY</code>.</p>
<pre><code class="lang-css"><span class="hljs-class">.parent</span> <span class="hljs-rules">{
  <span class="hljs-rule"><span class="hljs-attribute">position</span>:<span class="hljs-value"> relative</span></span>;

  <span class="hljs-comment">/* facultatif : résoud un bug non systématique de blur sur IE */</span>
  <span class="hljs-rule"><span class="hljs-attribute">transform-style</span>:<span class="hljs-value"> preserve-<span class="hljs-number">3</span>d</span></span>;
<span class="hljs-rule">}</span></span>

<span class="hljs-class">.child</span> <span class="hljs-rules">{
  <span class="hljs-rule"><span class="hljs-attribute">position</span>:<span class="hljs-value"> absolute</span></span>;
  <span class="hljs-rule"><span class="hljs-attribute">top</span>:<span class="hljs-value"> <span class="hljs-number">50%</span></span></span>;
  <span class="hljs-rule"><span class="hljs-attribute">transform</span>:<span class="hljs-value"> <span class="hljs-function">translateY</span>(-<span class="hljs-number">50%</span>)</span></span>;
<span class="hljs-rule">}</span></span>
</code></pre>
<h4 id="les-deux"><a class="putainde-Title-anchor" href="#les-deux">#</a>Les deux</h4><p>En réutilisant toutes les techniques expliquées précédemment, on peut arriver à plusieurs solutions, à choisir selon votre contexte et vos préférences.</p>
<p>Méthode à base de <code>display: inline-block</code></p>
<pre><code class="lang-css"><span class="hljs-class">.parent</span> <span class="hljs-rules">{
  <span class="hljs-rule"><span class="hljs-attribute">text-align</span>:<span class="hljs-value"> center</span></span>;
<span class="hljs-rule">}</span></span>

<span class="hljs-class">.parent</span><span class="hljs-pseudo">:before</span> <span class="hljs-rules">{
  <span class="hljs-rule"><span class="hljs-attribute">content</span>:<span class="hljs-value"> <span class="hljs-string">''</span></span></span>;
  <span class="hljs-rule"><span class="hljs-attribute">display</span>:<span class="hljs-value"> inline-block</span></span>;
  <span class="hljs-rule"><span class="hljs-attribute">height</span>:<span class="hljs-value"> <span class="hljs-number">100%</span></span></span>;
  <span class="hljs-rule"><span class="hljs-attribute">vertical-align</span>:<span class="hljs-value"> middle</span></span>;
  <span class="hljs-rule"><span class="hljs-attribute">margin-right</span>:<span class="hljs-value"> -<span class="hljs-number">0.25em</span></span></span>;
<span class="hljs-rule">}</span></span>

<span class="hljs-class">.child</span> <span class="hljs-rules">{
  <span class="hljs-rule"><span class="hljs-attribute">display</span>:<span class="hljs-value"> inline-block</span></span>;
  <span class="hljs-rule"><span class="hljs-attribute">vertical-align</span>:<span class="hljs-value"> middle</span></span>;
<span class="hljs-rule">}</span></span>
</code></pre>
<p>Technique des <code>position: absolute; + marges négatives</code> avec tailles connues à l’avance</p>
<pre><code class="lang-css"><span class="hljs-class">.parent</span> {
  <span class="hljs-attribute">position</span>: relative;
}

<span class="hljs-class">.child</span> {
  <span class="hljs-tag">width</span>: {<span class="hljs-attribute">X</span>}<span class="hljs-attribute">em</span>; <span class="hljs-comment">/* remplacer {X} par votre valeur */</span>
  <span class="hljs-tag">height</span>: {<span class="hljs-attribute">Y</span>}<span class="hljs-attribute">em</span>; <span class="hljs-comment">/* remplacer {Y} par votre valeur */</span>
  <span class="hljs-attribute">position</span>: absolute;
  <span class="hljs-attribute">top</span>: <span class="hljs-number">50%</span>;
  <span class="hljs-attribute">left</span>: <span class="hljs-number">50%</span>;
  <span class="hljs-tag">margin-left</span>: <span class="hljs-tag">-</span>{<span class="hljs-attribute">X</span>/<span class="hljs-number">2</span>}<span class="hljs-attribute">em</span>; <span class="hljs-comment">/* remplacer {X/2} par la moitié de votre height */</span>
  <span class="hljs-tag">margin-top</span>: <span class="hljs-tag">-</span>{<span class="hljs-attribute">Y</span>/<span class="hljs-number">2</span>}<span class="hljs-attribute">em</span>; <span class="hljs-comment">/* remplacer {Y/2} par la moitié de votre height */</span>
}
</code></pre>
<p>Technique des <code>position: absolute; + marges négatives</code> avec tailles inconnues</p>
<pre><code class="lang-css"><span class="hljs-class">.parent</span> <span class="hljs-rules">{
  <span class="hljs-rule"><span class="hljs-attribute">position</span>:<span class="hljs-value"> relative</span></span>;
  <span class="hljs-rule"><span class="hljs-attribute">transform-style</span>:<span class="hljs-value"> preserve-<span class="hljs-number">3</span>d</span></span>;
<span class="hljs-rule">}</span></span>

<span class="hljs-class">.child</span> <span class="hljs-rules">{
  <span class="hljs-rule"><span class="hljs-attribute">position</span>:<span class="hljs-value"> absolute</span></span>;
  <span class="hljs-rule"><span class="hljs-attribute">top</span>:<span class="hljs-value"> <span class="hljs-number">50%</span></span></span>;
  <span class="hljs-rule"><span class="hljs-attribute">left</span>:<span class="hljs-value"> <span class="hljs-number">50%</span></span></span>;
  <span class="hljs-rule"><span class="hljs-attribute">transform</span>:<span class="hljs-value"> <span class="hljs-function">translate</span>(-<span class="hljs-number">50%</span>, -<span class="hljs-number">50%</span>)</span></span>;
<span class="hljs-rule">}</span></span>
</code></pre>
<h3 id="des-blocs-dans-un-bloc"><a class="putainde-Title-anchor" href="#des-blocs-dans-un-bloc">#</a>Des blocs dans un bloc</h3><h4 id="centrage-horizontal"><a class="putainde-Title-anchor" href="#centrage-horizontal">#</a>Centrage horizontal</h4><p>On utilise la propriété <code>display: inline-block;</code> qui permet d’avoir des propriétés d’affichage relatives aux éléments de type <code>block</code> et de type <code>inline</code>. Le côté <code>inline</code> nous permet d’utiliser tout simplement un <code>text-align: center;</code></p>
<pre><code class="lang-css"><span class="hljs-class">.parent</span> <span class="hljs-rules">{
  <span class="hljs-rule"><span class="hljs-attribute">text-align</span>:<span class="hljs-value"> center</span></span>;
<span class="hljs-rule">}</span></span>

<span class="hljs-class">.child</span> <span class="hljs-rules">{
  <span class="hljs-rule"><span class="hljs-attribute">display</span>:<span class="hljs-value"> inline-block</span></span>;  
<span class="hljs-rule">}</span></span>
</code></pre>
<h4 id="centrage-vertical"><a class="putainde-Title-anchor" href="#centrage-vertical">#</a>Centrage vertical</h4><p>De la même façon que pour le centrage horizontal, on utilise le côté <code>inline</code> de la propriété <code>display: inline-block;</code> pour aligner verticalament les éléments enfants par rapport à leur conteneur parent.</p>
<pre><code class="lang-css"><span class="hljs-class">.parent</span> <span class="hljs-rules">{<span class="hljs-rule">}</span></span>

<span class="hljs-class">.child</span> <span class="hljs-rules">{
  <span class="hljs-rule"><span class="hljs-attribute">display</span>:<span class="hljs-value"> inline-block</span></span>;
  <span class="hljs-rule"><span class="hljs-attribute">vertical-align</span>:<span class="hljs-value"> middle</span></span>; 
<span class="hljs-rule">}</span></span>
</code></pre>
<p>Une autre technique consiste à utiliser les propriétés css de <code>mise en tableaux</code>. On est obligé de créer un <a href="https://developer.mozilla.org/fr/docs/Web/CSS/Pseudo-%C3%A9l%C3%A9ments">pseudo-élément</a> pour gérer la mise en page par tableau. On créée tout simplement un tableau, puis une cellule de tableau, qu’on positionne grâce à un <code>vertical-align: middle;</code>. Les éléments <code>.child</code> s’alignent automatiquement dans leur conteneur.</p>
<pre><code class="lang-css"><span class="hljs-class">.parent</span><span class="hljs-pseudo">:before</span> <span class="hljs-rules">{
  <span class="hljs-rule"><span class="hljs-attribute">display</span>:<span class="hljs-value"> table</span></span>;
  <span class="hljs-rule"><span class="hljs-attribute">width</span>:<span class="hljs-value"> <span class="hljs-number">100%</span></span></span>;
<span class="hljs-rule">}</span></span>

<span class="hljs-class">.parent</span> <span class="hljs-rules">{
  <span class="hljs-rule"><span class="hljs-attribute">display</span>:<span class="hljs-value"> table-cell</span></span>;
  <span class="hljs-rule"><span class="hljs-attribute">vertical-align</span>:<span class="hljs-value"> middle</span></span>;
<span class="hljs-rule">}</span></span>

<span class="hljs-class">.child</span> <span class="hljs-rules">{
  <span class="hljs-rule"><span class="hljs-attribute">display</span>:<span class="hljs-value"> inline-block</span></span>; <span class="hljs-comment">/* à enlever si vous ne souhaitez pas avoir vos blocs enfants alignés sur la même ligne, mais juste centrés verticalement sur la hauteur */</span>
<span class="hljs-rule">}</span></span>
</code></pre>
<h4 id="les-deux"><a class="putainde-Title-anchor" href="#les-deux">#</a>Les deux</h4><p>On peut combiner les deux solutions basées sur le <code>display: inline-block;</code> pour avoir le résultat souhaité.</p>
<pre><code class="lang-css"><span class="hljs-class">.parent</span> <span class="hljs-rules">{
  <span class="hljs-rule"><span class="hljs-attribute">text-align</span>:<span class="hljs-value"> center</span></span>;
<span class="hljs-rule">}</span></span>

<span class="hljs-class">.child</span> <span class="hljs-rules">{
  <span class="hljs-rule"><span class="hljs-attribute">display</span>:<span class="hljs-value"> inline-block</span></span>;
  <span class="hljs-rule"><span class="hljs-attribute">vertical-align</span>:<span class="hljs-value"> middle</span></span>;
<span class="hljs-rule">}</span></span>
</code></pre>
<p>On peut aussir réutiliser la méthode à base de <code>display: table-cell</code> et l’adapter pour qu’elle centre horizontalement et verticalement.</p>
<pre><code class="lang-css"><span class="hljs-class">.parent</span><span class="hljs-pseudo">:before</span> <span class="hljs-rules">{
  <span class="hljs-rule"><span class="hljs-attribute">display</span>:<span class="hljs-value"> table</span></span>;
  <span class="hljs-rule"><span class="hljs-attribute">width</span>:<span class="hljs-value"> <span class="hljs-number">100%</span></span></span>;
<span class="hljs-rule">}</span></span>

<span class="hljs-class">.parent</span> <span class="hljs-rules">{
  <span class="hljs-rule"><span class="hljs-attribute">display</span>:<span class="hljs-value"> table-cell</span></span>;
  <span class="hljs-rule"><span class="hljs-attribute">vertical-align</span>:<span class="hljs-value"> middle</span></span>;
  <span class="hljs-rule"><span class="hljs-attribute">text-align</span>:<span class="hljs-value"> center</span></span>;
<span class="hljs-rule">}</span></span>

<span class="hljs-class">.child</span> <span class="hljs-rules">{
  <span class="hljs-rule"><span class="hljs-attribute">display</span>:<span class="hljs-value"> inline-block</span></span>;
  <span class="hljs-rule"><span class="hljs-attribute">text-align</span>:<span class="hljs-value"> left</span></span>;
<span class="hljs-rule">}</span></span>
</code></pre>
<p>On peut réutiliser la technique précédente en étant un peu imaginatif pour fonctionner avec des <code>display: inline-block;</code>. Pour détailler, on crée un pseudo-élément, qui aura un <code>content: &#39;&#39;;</code> pour faire qu’il existe et soit affiché, puis on annule son affichage via un <code>margin-right négatif</code> qui a pour valeur magique <code>-0.25em</code> ce qui correspond à la largeur d’un espace. On lui applique ensuite un <code>display: inline-block + height: 100% + vertical-align: middle</code> pour créer le conteneur à la taille souhaitée et on termine en calant l’élément enfant <code>.child</code> avec un centrage vertical.</p>
<pre><code class="lang-css"><span class="hljs-class">.parent</span> <span class="hljs-rules">{
  <span class="hljs-rule"><span class="hljs-attribute">text-align</span>:<span class="hljs-value"> center</span></span>;
<span class="hljs-rule">}</span></span>

<span class="hljs-class">.parent</span><span class="hljs-pseudo">:before</span> <span class="hljs-rules">{
  <span class="hljs-rule"><span class="hljs-attribute">content</span>:<span class="hljs-value"> <span class="hljs-string">''</span></span></span>;
  <span class="hljs-rule"><span class="hljs-attribute">display</span>:<span class="hljs-value"> inline-block</span></span>;
  <span class="hljs-rule"><span class="hljs-attribute">height</span>:<span class="hljs-value"> <span class="hljs-number">100%</span></span></span>;
  <span class="hljs-rule"><span class="hljs-attribute">vertical-align</span>:<span class="hljs-value"> middle</span></span>;
  <span class="hljs-rule"><span class="hljs-attribute">margin-right</span>:<span class="hljs-value"> -<span class="hljs-number">0.25em</span></span></span>;
<span class="hljs-rule">}</span></span>

<span class="hljs-class">.child</span> <span class="hljs-rules">{
  <span class="hljs-rule"><span class="hljs-attribute">display</span>:<span class="hljs-value"> inline-block</span></span>;
  <span class="hljs-rule"><span class="hljs-attribute">vertical-align</span>:<span class="hljs-value"> middle</span></span>;
<span class="hljs-rule">}</span></span>
</code></pre>
<h3 id="des-elements-inlines-dans-un-bloc"><a class="putainde-Title-anchor" href="#des-elements-inlines-dans-un-bloc">#</a>Des éléments inlines dans un bloc</h3><p>Ces éléments <code>inline</code> peuvent être par exemple des liens <code>&lt;a&gt;</code> ou des <code>&lt;span&gt;</code> tout simples. Ces techniques sont souvent très connues et ne devraient pas vous poser beaucoup de problèmes, elles ne seront pas commentées. Veuillez vous référer <a href="https://developer.mozilla.org/fr/docs/Web/CSS/text-align">text-align</a> et <a href="https://developer.mozilla.org/fr/docs/Web/CSS/vertical-align">vertical-align</a> si vous souhaitez plus d’informations.</p>
<h4 id="centrage-horizontal"><a class="putainde-Title-anchor" href="#centrage-horizontal">#</a>Centrage horizontal</h4><pre><code class="lang-css"><span class="hljs-class">.parent</span> <span class="hljs-rules">{
  <span class="hljs-rule"><span class="hljs-attribute">text-align</span>:<span class="hljs-value"> center</span></span>;
<span class="hljs-rule">}</span></span>

<span class="hljs-class">.child</span> <span class="hljs-rules">{<span class="hljs-rule">}</span></span>
</code></pre>
<h4 id="centrage-vertical"><a class="putainde-Title-anchor" href="#centrage-vertical">#</a>Centrage vertical</h4><pre><code class="lang-css"><span class="hljs-class">.parent</span> <span class="hljs-rules">{<span class="hljs-rule">}</span></span>

<span class="hljs-class">.child</span> <span class="hljs-rules">{
  <span class="hljs-rule"><span class="hljs-attribute">vertical-align</span>:<span class="hljs-value"> middle</span></span>;
<span class="hljs-rule">}</span></span>
</code></pre>
<h4 id="les-deux"><a class="putainde-Title-anchor" href="#les-deux">#</a>Les deux</h4><pre><code class="lang-css"><span class="hljs-class">.parent</span> <span class="hljs-rules">{
  <span class="hljs-rule"><span class="hljs-attribute">text-align</span>:<span class="hljs-value"> center</span></span>;
<span class="hljs-rule">}</span></span>

<span class="hljs-class">.child</span> <span class="hljs-rules">{
  <span class="hljs-rule"><span class="hljs-attribute">vertical-align</span>:<span class="hljs-value"> middle</span></span>;
<span class="hljs-rule">}</span></span>
</code></pre>
<h2 id="techniques-avancees-flexbox-ie11-"><a class="putainde-Title-anchor" href="#techniques-avancees-flexbox-ie11-">#</a>Techniques avancées : flexbox (<a href="http://caniuse.com/#feat=flexbox">ie11+</a>)</h2><p>Flexbox est un outil très puissant quand il s’agit de gérer le position de blocs flex. Son seul défaut consiste en son faible support navigateur, mais il vous faudra maitriser ces techniques si vous comptez faire du développement web dans les années à venir, d’autant plus qu’elles sont très simples à rédiger et comprendre.</p>
<h3 id="centrage-horizontal"><a class="putainde-Title-anchor" href="#centrage-horizontal">#</a>Centrage horizontal</h3><p>On déclare le conteneur en bloc flex, et on lui applique la propriété <a href="https://developer.mozilla.org/fr/docs/Web/CSS/justify-content">justify-content</a>.</p>
<pre><code class="lang-css"><span class="hljs-class">.parent</span> <span class="hljs-rules">{
  <span class="hljs-rule"><span class="hljs-attribute">display</span>:<span class="hljs-value"> flex</span></span>;
  <span class="hljs-rule"><span class="hljs-attribute">justify-content</span>:<span class="hljs-value"> center</span></span>;
<span class="hljs-rule">}</span></span>

<span class="hljs-class">.child</span> <span class="hljs-rules">{<span class="hljs-rule">}</span></span>
</code></pre>
<h3 id="centrage-vertical"><a class="putainde-Title-anchor" href="#centrage-vertical">#</a>Centrage vertical</h3><p>Idem, on déclare le conteneur en bloc flex, et cette fois, on lui applique la propriété <a href="https://developer.mozilla.org/fr/docs/Web/CSS/align-items">align-items</a>.</p>
<pre><code class="lang-css"><span class="hljs-class">.parent</span> <span class="hljs-rules">{
  <span class="hljs-rule"><span class="hljs-attribute">display</span>:<span class="hljs-value"> flex</span></span>;
  <span class="hljs-rule"><span class="hljs-attribute">align-items</span>:<span class="hljs-value"> center</span></span>;
<span class="hljs-rule">}</span></span>

<span class="hljs-class">.child</span> <span class="hljs-rules">{<span class="hljs-rule">}</span></span>
</code></pre>
<h3 id="les-deux"><a class="putainde-Title-anchor" href="#les-deux">#</a>Les deux</h3><p>On combine le tout pour un résultat génial et simpliste.</p>
<pre><code class="lang-css"><span class="hljs-class">.parent</span> <span class="hljs-rules">{
  <span class="hljs-rule"><span class="hljs-attribute">display</span>:<span class="hljs-value"> flex</span></span>;
  <span class="hljs-rule"><span class="hljs-attribute">justify-content</span>:<span class="hljs-value"> center</span></span>;
  <span class="hljs-rule"><span class="hljs-attribute">align-items</span>:<span class="hljs-value"> center</span></span>;
<span class="hljs-rule">}</span></span>

<span class="hljs-class">.child</span> <span class="hljs-rules">{<span class="hljs-rule">}</span></span>
</code></pre>
<h2 id="conclusion"><a class="putainde-Title-anchor" href="#conclusion">#</a>Conclusion</h2><p>Essayez de toujours utiliser la solution la plus avancée techniquement par rapport à votre scope navigateur : si vous devez ne supporter que les IE récents, utilisez flexbox ; si vous devez ne supporter que IE9+, utilisez les transform: translate() ; sinon utilisez des techniques de plus en plus <em>anciennes</em>.</p>
<p>Ce guide n’a volontairement pas parlé des préfixes navigateurs, car ce genre de chose doit être pris en charge automatiquement dans votre workflow par un autoprefixer (<a href="https://www.npmjs.org/package/gulp-autoprefixer">gulp-autoprefixer</a>, <a href="https://www.npmjs.org/package/grunt-autoprefixer">grunt-autoprefixer</a>, <a href="http://www.myth.io/">inclus dans myth</a>, …). Pour apprendre à l’installer ou à en apprendre plus sur le sujet, je vous renvoie <a href="http://localhost:4242/posts/css/mise-en-place-autoprefixer/">à l’article de MoOx</a>. Si vous souhaitez quand même vous passez d’autoprefixer, vous pourrez vérifier la compatibilité des propriétés sur <a href="http://caniuse.com/">caniuse</a>.</p>

]]></description><pubDate>Tue, 23 Sep 2014 00:00:00 GMT</pubDate><link>http://putaindecode.fr/posts/css/le-guide-complet-pour-centrer-en-css/</link><guid isPermaLink="true">http://putaindecode.fr/posts/css/le-guide-complet-pour-centrer-en-css/</guid></item><item><title>Maîtriser les redirections shell</title><description><![CDATA[
<p>Le shell (ou ligne de commande) est l’outil de prédilection pour bon nombre
d’entre nous qui utilisons un OS de la famille UNIX. Nous sommes persuadés que
bien utilisé, il remplace avantageusement un IDE complexe et gourmand.</p>
<p>Chez Putain de Code, on a une certaine tendance à utiliser <a href="http://fr.wikipedia.org/wiki/Z_Shell">Zsh</a>, mais
pour ma part, j’utilise encore et toujours le vénérable <a href="http://fr.wikipedia.org/wiki/Bourne-Again_shell">Bash</a>, non pas
pour faire mon barbu mais simplement car il me suffit amplement.</p>
<p>La suite de l’article est donc basée sur celui-ci mais tout devrait fonctionner
à l’identique sur Zsh.</p>
<p>Venons en au sujet même de cet article, l’un des éléments essentiels de
l’utilisation du shell : l’utilisation des redirections d’entrée/sortie de
base.</p>
<p>Si ça vous paraît barbare, tenez-vous bien, on attaque tout de suite !</p>
<h2 id="une-entree-deux-sorties"><a class="putainde-Title-anchor" href="#une-entree-deux-sorties">#</a>Une entrée, deux sorties</h2><p>Un des principes de base sous UNIX est que tout est fichier et que l’activité du
système est rendue par l’interaction de programmes (ou processus) à l’aide
des dits fichiers.</p>
<p>Pour pouvoir collaborer avec ses congénères, chaque processus peut accéder par
défaut à trois fichiers bien particuliers : l’entrée, la sortie, et la sortie
d’erreur standards.</p>
<ul>
<li>L’entrée standard (<code>stdin</code>)</li>
<li>La sortie standard (<code>stdout</code>)</li>
<li>La sortie d’erreur (<code>stderr</code>)</li>
</ul>
<p>Habituellement, l’entrée standard est liée au clavier de l’utilisateur <em>via</em> son
émulateur de terminal, et les deux sorties sont liées à l’affichage dans ce même
émulateur.</p>
<p>L’idée pour pouvoir faire collaborer les processus est donc de <em>brancher</em> les
entrées et sorties de différents programmes afin d’obtenir un résultat.</p>
<h2 id="les-redirections-de-base"><a class="putainde-Title-anchor" href="#les-redirections-de-base">#</a>Les redirections de base</h2><p>Commençons par quelques redirections de base, celles qu’il faut connaître et qui
sont employées systématiquement.</p>
<p>Pour nous exercer, nous allons utiliser principalement deux commandes :</p>
<ul>
<li><code>echo</code> : permet d’écrire un message spécifié en tant qu’argument sur sa sortie
standard.</li>
<li><code>cat</code> : permet d’afficher le contenu d’un fichier passé en argument sur sa
sortie standard ou de répéter son entrée standard sur sa sortie standard.</li>
</ul>
<p>Rappelez vous que par défaut, la sortie standard est affichée dans le terminal
et l’entrée standard est le clavier de l’utilisateur.</p>
<h3 id="redirection-de-sortie-code-gt-code-"><a class="putainde-Title-anchor" href="#redirection-de-sortie-code-gt-code-">#</a>Redirection de sortie : <code>&gt;</code></h3><p>Ce type de redirection permet d’indiquer à un processus que tout ce qui devrait
aller sur la sortie standard (par défaut, le terminal), doit plutôt être stocké
dans un fichier.</p>
<p>Pour ça, on utilise la syntaxe <code>&gt; [fichier]</code> :</p>
<pre><code class="lang-console">$ echo <span class="hljs-string">"Hello"</span> &gt; <span class="hljs-keyword">message</span>
$ cat <span class="hljs-keyword">message</span>
Hello
</code></pre>
<h3 id="redirection-d-entree-code-lt-code-"><a class="putainde-Title-anchor" href="#redirection-d-entree-code-lt-code-">#</a>Redirection d’entrée : <code>&lt;</code></h3><p>À l’inverse, on peut aussi spécifier à un programme qu’il doit utiliser un
fichier comme son entrée standard, à la place du clavier de l’utilisateur.</p>
<p>En réutilisant notre fichier <code>message</code>, on peut par exemple faire :</p>
<pre><code class="lang-console">$ cat &lt; <span class="hljs-keyword">message</span>
Hello
</code></pre>
<p>Notez qu’on utilise bien <code>cat</code> <em>sans argument</em>, il utilise donc l’entrée
standard.</p>
<h3 id="connecter-deux-processus-code-code-"><a class="putainde-Title-anchor" href="#connecter-deux-processus-code-code-">#</a>Connecter deux processus : <code>|</code></h3><p>Dernier des connecteurs de base, l’opérateur <code>|</code>, aussi appelé <em>pipe</em> (et qui se
prononce <em>paillepe</em>, avé l’accent).</p>
<p>Il permet tout simplement d’utiliser la sortie d’un programme comme entrée d’un
autre.</p>
<p>Pour montrer ça, introduisons la commande <code>tr</code>, qui permet de remplacer des
caractères dans l’entrée par d’autres.</p>
<pre><code class="lang-console">$ echo <span class="hljs-string">"Hello!"</span> | <span class="hljs-tag">tr</span> <span class="hljs-string">"[:lower:]"</span> <span class="hljs-string">"[:upper:]"</span>
HELLO!
</code></pre>
<h2 id="descripteurs-de-fichiers-et-redirections-avancees"><a class="putainde-Title-anchor" href="#descripteurs-de-fichiers-et-redirections-avancees">#</a>Descripteurs de fichiers et redirections avancées</h2><p>Pour aller plus loin, on va maintenant voir que chaque descripteur de fichier
possède son propre identifiant numérique.</p>
<p>Pour <code>stdin</code>, <code>stdout</code> et <code>stderr</code> ce sera respectivement 0, 1 et 2.</p>
<p>On peut se servir de ces identifiants pour faire des redirections plus
poussées !</p>
<h3 id="rediriger-les-autres-descripteur"><a class="putainde-Title-anchor" href="#rediriger-les-autres-descripteur">#</a>Rediriger les autres descripteur</h3><p>Par défaut, <code>&gt;</code> ne redirige que la sortie standard vers un fichier. Pour
rediriger un autre descripteur vers un fichier on emploiera la notation <code>X&gt;</code> où
<em>X</em> prendra la valeur de l’identifiant du descripteur.</p>
<p>Si vous avez bien suivi, on redirigera donc la sortie d’erreur vers un fichier à
l’aide de la syntaxe <code>2&gt;</code>.</p>
<h3 id="rediriger-vers-un-autre-descripteur-code-gt-amp-code-"><a class="putainde-Title-anchor" href="#rediriger-vers-un-autre-descripteur-code-gt-amp-code-">#</a>Rediriger vers un autre descripteur : <code>&gt;&amp;</code></h3><p>On peut connecter les descripteurs d’un processus entre eux. C’est un mécanisme
que l’on utilise très souvent quand on écrit des scripts Shell, notamment pour
écrire sur la sortie d’erreur.</p>
<p>Pour celà, on utilise la redirection <code>X&gt;&amp;Y</code> avec <em>X</em> étant l’identifiant
descripteur source et <em>Y</em> l’identifiant du descripteur sur lequel on veut
rediriger.</p>
<p>L’exemple suivant montre comment rediriger la sortie standard sur la sortie
d’erreur (c’est comme ça qu’on écrit sur la sortie d’erreur dans un script).</p>
<pre><code class="lang-console">$ <span class="hljs-built_in">echo</span> <span class="hljs-string">"Error"</span> <span class="hljs-number">1</span>&gt;&amp;<span class="hljs-number">2</span>
</code></pre>
<p>Plus généralement, on peut omettre la partie avant le <code>&gt;&amp;</code>, elle prendra la
valeur 1 par défaut. On aura donc le script suivant :</p>
<pre><code class="lang-console">$ <span class="hljs-built_in">echo</span> <span class="hljs-string">"Error"</span> &gt;&amp;<span class="hljs-number">2</span>
</code></pre>
<h3 id="ajouter-en-fin-de-fichier-code-gt-gt-code-"><a class="putainde-Title-anchor" href="#ajouter-en-fin-de-fichier-code-gt-gt-code-">#</a>Ajouter en fin de fichier : <code>&gt;&gt;</code></h3><p>Par défaut, <code>&gt;</code> écrase le fichier dans lequel la redirection va s’effectuer.
Pour éviter ce problème, on peut utiliser à la place <code>&gt;&gt;</code> qui va ajouter en fin
de fichier.</p>
<pre><code class="lang-console"># Sans &gt;&gt;
$ <span class="hljs-keyword">echo</span> <span class="hljs-string">"1"</span> &gt; <span class="hljs-keyword">file</span>
$ <span class="hljs-keyword">echo</span> <span class="hljs-string">"2"</span> &gt; <span class="hljs-keyword">file</span>
$ <span class="hljs-keyword">cat</span> <span class="hljs-keyword">file</span>
<span class="hljs-number">2</span>
</code></pre>
<pre><code class="lang-console"># Avec &gt;&gt;
$ <span class="hljs-keyword">echo</span> <span class="hljs-string">"1"</span> &gt; <span class="hljs-keyword">file</span>
$ <span class="hljs-keyword">echo</span> <span class="hljs-string">"2"</span> &gt;&gt; <span class="hljs-keyword">file</span>
$ <span class="hljs-keyword">cat</span> <span class="hljs-keyword">file</span>
<span class="hljs-number">1</span>
<span class="hljs-number">2</span>
</code></pre>
<h3 id="-code-dev-null-code-le-trou-noir"><a class="putainde-Title-anchor" href="#-code-dev-null-code-le-trou-noir">#</a><code>/dev/null</code>, le trou noir</h3><p>Il existe un fichier un peu particulier sur tout bon UNIX qui se respecte :
<code>/dev/null</code>.</p>
<p>Ce dernier est en fait une sorte de trou noir : Si on affiche son contenu on
n’obtient rien, et si on écrit quelque chose dedans elle disparait.</p>
<p>On se sert souvent de ce fichier pour supprimer la sortie d’un programme :</p>
<pre><code class="lang-console">$ echo <span class="hljs-string">"Hello"</span> &gt;<span class="hljs-regexp">/dev/</span><span class="hljs-keyword">null</span>
$ cat <span class="hljs-regexp">/dev/</span><span class="hljs-keyword">null</span>
$
</code></pre>
<h3 id="ordre-des-redirections"><a class="putainde-Title-anchor" href="#ordre-des-redirections">#</a>Ordre des redirections</h3><p>Un dernier mot avant la fin, l’ordre des redirections est très important !</p>
<p>Imaginez la fonction suivante qui affiche un message sur la sortie standard et
un sur la sortie d’erreur :</p>
<pre><code class="lang-console"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">programme</span><span class="hljs-params">()</span> </span>{
  <span class="hljs-keyword">echo</span> <span class="hljs-string">"Message"</span>
  <span class="hljs-keyword">echo</span> <span class="hljs-string">"Error"</span> &gt;&amp;<span class="hljs-number">2</span>
}
</code></pre>
<p>Si on veut rediriger toutes les sorties vers <code>/dev/null</code> on peut utiliser la
syntaxe suivante :</p>
<pre><code class="lang-console">$ programme <span class="hljs-number">2</span>&gt;<span class="hljs-regexp">/dev/</span><span class="hljs-keyword">null</span> &gt;<span class="hljs-regexp">/dev/</span><span class="hljs-keyword">null</span>
</code></pre>
<p>Vous remarquerez que c’est assez verbeux, et qu’on pourrait simplifier celà en
utilisant <code>&gt;&amp;</code> comme vu précédemment.</p>
<p>On essaie donc naïvement :</p>
<pre><code class="lang-console"><span class="hljs-prompt">$ programme 2&gt;</span>&amp;<span class="hljs-number">1</span> &gt;<span class="hljs-regexp">/dev/null</span>
<span class="hljs-constant">Error</span>
</code></pre>
<p>Hmm, pourtant on a tout branché ensemble non ? En fait non, on a redirigé la
sortie sur le fichier pointé par <code>1</code> au moment où on écrit la redirection, donc
avant qu’il soit redirigé sur <code>/dev/null</code>.</p>
<p>Pour bien faire, il faut écrire les redirections dans l’autre ordre :</p>
<pre><code class="lang-console"><span class="hljs-variable">$ </span>programme &gt;<span class="hljs-regexp">/dev/null</span> <span class="hljs-number">2</span>&gt;&amp;<span class="hljs-number">1</span>
</code></pre>
<p>On lira ceci : Rediriger la sortie standard vers <code>/dev/null</code>, puis rediriger la
sortie d’erreur vers la sortie standard.</p>
<h3 id="pour-resumer"><a class="putainde-Title-anchor" href="#pour-resumer">#</a>Pour résumer</h3><p>On a en fait que deux redirections de sortie, <code>&gt;</code> et <code>&gt;&gt;</code>, les symboles qui les
entourent sont souvent optionnels.</p>
<p>Si on veut spécifier un fichier on donnera son nom, si on veut spécifier un
descripteur on donnera son identifiant préfixé de <code>&amp;</code>.</p>
<h2 id="pour-aller-plus-loin"><a class="putainde-Title-anchor" href="#pour-aller-plus-loin">#</a>Pour aller plus loin</h2><p>Le manuel de bash contient <a href="http://www.gnu.org/software/bash/manual/bashref.html#Redirections">une section complète sur les
redirections</a>. Elle va beaucoup plus loin que cet article et je vous
invite à la lire pour voir tout ce qu’il est possible de faire.</p>
<p>Il y a aussi une section dédiée à ce sujet dans l’<a href="http://tldp.org/LDP/abs/html/io-redirection.html">Advanced Bash-Scripting Guide</a>.</p>

]]></description><pubDate>Wed, 16 Jul 2014 00:00:00 GMT</pubDate><link>http://putaindecode.fr/posts/shell/maitriser-les-redirections-shell/</link><guid isPermaLink="true">http://putaindecode.fr/posts/shell/maitriser-les-redirections-shell/</guid></item><item><title>Un point sur les grilles CSS en inline-block</title><description><![CDATA[
<p>Les grilles sont devenues incontournables pour le layout d’un site.
<a href="http://justifygrid.com/#methodology">Plusieurs</a> <a href="https://github.com/suitcss/components-grid">méthodes</a>  <a href="http://www.palantir.net/blog/responsive-design-s-dirty-little-secret">existent</a> en attendant de pouvoir utiliser le Graal, <a href="http://dev.w3.org/csswg/css-grid/">CSS3 grid layout</a>.</p>
<p>Mais en attendant, on bricole. Et une des solutions que j’aime bien consiste à utiliser des inline-block, car elle offre plusieurs avantages pratiques :</p>
<ul>
<li>On peut simplement renverser la grille grâce à la propriété  <code>direction:rtl;</code> ce qui est particulièrement pratique sur des sites qui doivent supporter des langues dont le sens de lecture va de droite à gauche.</li>
<li>les éléments en inline-block peuvent utiliser la propriété <code>vertical-align</code>.</li>
<li>les éléments de la grilles reste dans le flux, ce qui évite l’utilisation de clearfix.</li>
</ul>
<p>Ce dernier point est aussi une source de problèmes puisque notre <code>.Grid</code> contient non seulement nos éléments de grille <code>.Grid-cell</code> mais aussi quelques caractères espace ça et là entre les noeuds enfants.</p>
<p>De la même manière qu’un espaces sépare 2 mots, on retrouve ces espaces entre nos blocs. Ces caractères proviennent des espaces et autre sauts de lignes qu’on insère dans le code source pour formater notre document.</p>
<p>Voici donc un aperçu des différents moyens de se débarasser de ces espaces, afin que tout les éléments de notre grille restent à leur place.</p>
<h2 id="supprimer-les-espaces-entre-les-tag-code-grid-cell-code-"><a class="putainde-Title-anchor" href="#supprimer-les-espaces-entre-les-tag-code-grid-cell-code-">#</a>Supprimer les espaces entre les tag <code>.Grid-cell</code></h2><pre><code>&lt;div class=<span class="hljs-string">"Grid"</span>&gt;
  &lt;div class=<span class="hljs-string">"Grid-cell"</span>&gt;<span class="hljs-keyword">...</span>&lt;/div&gt;&lt;div class=<span class="hljs-string">"Grid-cell"</span>&gt;<span class="hljs-keyword">...</span>&lt;/div&gt;&lt;div class=<span class="hljs-string">"Grid-cell"</span>&gt;<span class="hljs-keyword">...</span>&lt;/div&gt;
&lt;/div&gt;
</code></pre><p>Une méthode pas forcément très lisible mais qui est robuste. Soyons créatifs,
on peut aussi faire comme ça, même si le formatage en prend un coup.</p>
<pre><code>&lt;div class=<span class="hljs-string">"Grid"</span>&gt;
      &lt;div class=<span class="hljs-string">"Grid-cell"</span>&gt;<span class="hljs-keyword">...</span>
&lt;/div&gt;&lt;div class=<span class="hljs-string">"Grid-cell"</span>&gt;<span class="hljs-keyword">...</span>
&lt;/div&gt;&lt;div class=<span class="hljs-string">"Grid-cell"</span>&gt;<span class="hljs-keyword">...</span>&lt;/div&gt;
&lt;/div&gt;
</code></pre><p>Notez que la première technique peut être facilement mise en place de manière automatique, via une traitement de <a href="https://github.com/kangax/html-minifier">minification du code html</a>.</p>
<h2 id="inserer-des-commentaires-html-entre-les-tags-code-grid-cell-code-"><a class="putainde-Title-anchor" href="#inserer-des-commentaires-html-entre-les-tags-code-grid-cell-code-">#</a>Insérer des commentaires html entre les tags <code>.Grid-cell</code></h2><p>La solution est robuste, au prix de quelques caractères supplémentaires. Un surpoids que gzip se fera un plaisir de vous faire oublier !
C’est la méthode choisie dans le framework <a href="https://github.com/csswizardry/inuit.css/blob/master/objects/_grids.scss">inuitCss</a>.</p>
<pre><code>&lt;div class=<span class="hljs-string">"Grid"</span>&gt;
   &lt;div class=<span class="hljs-string">"Grid-cell"</span>&gt;<span class="hljs-keyword">...</span>&lt;/div&gt;&lt;!--
--&gt;&lt;div class=<span class="hljs-string">"Grid-cell"</span>&gt;<span class="hljs-keyword">...</span>&lt;/div&gt;&lt;!--
--&gt;&lt;div class=<span class="hljs-string">"Grid-cell"</span>&gt;<span class="hljs-keyword">...</span>&lt;/div&gt;
&lt;/div&gt;
</code></pre><h2 id="font-size-0"><a class="putainde-Title-anchor" href="#font-size-0">#</a>font-size: 0</h2><pre><code><span class="hljs-class">.Grid</span> <span class="hljs-rules">{
  <span class="hljs-rule"><span class="hljs-attribute">font-size</span>:<span class="hljs-value"> <span class="hljs-number">0</span></span></span>;
<span class="hljs-rule">}</span></span>
<span class="hljs-class">.Grid-cell</span> <span class="hljs-rules">{
  <span class="hljs-rule"><span class="hljs-attribute">display</span>:<span class="hljs-value"> inline-block</span></span>;
  <span class="hljs-rule"><span class="hljs-attribute">font-size</span>:<span class="hljs-value"> <span class="hljs-number">16px</span></span></span>;
  <span class="hljs-rule"><span class="hljs-attribute">font-size</span>:<span class="hljs-value"> <span class="hljs-number">1rem</span></span></span>;
<span class="hljs-rule">}</span></span>
</code></pre><p>L’idée est de faire disparaître les caractères <em>espace</em> situés entre les balises enfants en réglant la taille de la police à zéro. Il suffit ensuite de ré-initialiser la taille sur les noeuds enfants <code>.Grid-cell</code>. Cette méthode est utilisée dans <a href="https://github.com/suitcss/components-grid">SUIT Grid</a>.</p>
<p><em>Attention</em>, si votre scope navigateur va en dessous d’IE9, cette méthode fait perdre le bénéfice d’une intégration à base d’em puisque la taille de la typo sur les blocs enfants est désormais fixe.</p>
<h2 id="appliquer-une-marge-negative-entre-les-blocs-enfants"><a class="putainde-Title-anchor" href="#appliquer-une-marge-negative-entre-les-blocs-enfants">#</a>Appliquer une marge négative entre les blocs enfants</h2><pre><code><span class="hljs-class">.Grid-cell</span> <span class="hljs-rules">{
  <span class="hljs-rule"><span class="hljs-attribute">margin-right</span>:<span class="hljs-value"> -<span class="hljs-number">4px</span></span></span>;
<span class="hljs-rule">}</span></span>
</code></pre><p>Cette méthode n’est à mon sens pas très robuste, surtout sur des intégrations à base d’em, car on introduit un nombre magique qui dépend de plusieurs paramètre, comme la typo utilisée, sa taille de base, etc. Cette méthode demande donc de bien tester puisque les font disponibles ne seront pas les mêmes selon des équipements, les OS…</p>
<h2 id="la-methode-kellum"><a class="putainde-Title-anchor" href="#la-methode-kellum">#</a>La méthode Kellum</h2><p>Ici, la méthode consiste à utiliser une font particulière contenant le caractère espace et dont la particularité est d’avoir une largeur nulle. Cette technique est décrite dans l’article de <a href="http://scottkellum.com/2013/10/25/the-new-kellum-method.html">Scott Kellum</a></p>
<p>Comme la technique précédente, il suffit d’appliquer la font au conteneur <code>.Grid</code> puis de remettre la font-family par defaut pour les enfants <code>.Grid-cell</code>. Et ainsi, toutes valeurs relatives en <em>em</em> sont préservées.</p>
<pre><code><span class="hljs-class">.Grid</span> <span class="hljs-rules">{
  <span class="hljs-rule"><span class="hljs-attribute">display</span>:<span class="hljs-value"> block</span></span>;
  <span class="hljs-rule"><span class="hljs-attribute">font-family</span>:<span class="hljs-value"> <span class="hljs-string">'blank-kellum'</span></span></span>;
<span class="hljs-rule">}</span></span>

<span class="hljs-class">.Grid-cell</span><span class="hljs-rules">{
  <span class="hljs-rule"><span class="hljs-attribute">display</span>:<span class="hljs-value"> inline-block</span></span>;
  <span class="hljs-rule"><span class="hljs-attribute">width</span>:<span class="hljs-value"> <span class="hljs-number">33.333333%</span></span></span>;
  <span class="hljs-rule"><span class="hljs-attribute">font-family</span>:<span class="hljs-value">sans-serif</span></span>;
<span class="hljs-rule">}</span></span>
</code></pre><p>L’inconvénient de cette technique est qu’elle nécessite le téléchargement d’un fichier font particulièr si le navigateur ne supporte pas éléments encodées en data-uri (en gros, en dessous d’ie8). Par contre, si vous utilisez une font d’icônes, rien ne vous empêche de combiner les deux, en ajoutant votre icône de largeur nulle avec vos icônes. Voici un aperçu sur <a href="http://codepen.io/lionelB/pen/fvyjH">codepen</a></p>
<h1 id="le-mot-de-la-fin"><a class="putainde-Title-anchor" href="#le-mot-de-la-fin">#</a>Le mot de la fin</h1><p>Non, il n’y a pas vraiment une technique qui sort du lot. Comme toujours, cela dépend des navigateurs à supporter, est ce que l’utilisateur pourra personnaliser le layout, qui sera chargé des mise à jour, etc… autant de points qui aideront à choisir la meilleure solution.</p>
<hr>
<p>Quelques ressources :</p>
<ul>
<li>L’article <a href="http://css-tricks.com/fighting-the-space-between-inline-block-elements/">Fighting the space between inline block elements</a> sur css-tricks</li>
<li>L’article <a href="http://webdesigner-webdeveloper.com/weblog/about-inline-blocks/">About inline-block</a> sur lequel je suis tombé en rédigeant cet article.</li>
</ul>

]]></description><pubDate>Fri, 13 Jun 2014 00:00:00 GMT</pubDate><link>http://putaindecode.fr/posts/css/les-grilles-en-inline-block/</link><guid isPermaLink="true">http://putaindecode.fr/posts/css/les-grilles-en-inline-block/</guid></item><item><title>Introduction à ReactJS</title><description><![CDATA[
<p>Cela fait maintenant un an que ReactJS est open-sourced.
C’est l’occasion de présenter le petit dernier de la vague MV*.</p>
<h2 id="les-differentes-approches-d-ui"><a class="putainde-Title-anchor" href="#les-differentes-approches-d-ui">#</a>Les différentes approches d’UI</h2><h3 id="backbone"><a class="putainde-Title-anchor" href="#backbone">#</a>Backbone</h3><p><a href="http://backbonejs.org">Backbone</a> apporte une simplification dans la
déclaration d’évenements,
il reste cependant très peu impliqué dans le rendering.
Le choix de laisser l’utilisateur décider de tout concernant
<code>Backbone.View</code> est positif pour de nombreux projets, mais rend
la gestion du DOM pénible.</p>
<p>Pour faire du data-binding, <code>Backbone</code> ne propose naturellement rien,
et l’on doit faire appel à des mixins supplémentaires pour le mettre
en place sans s’arracher les cheveux.</p>
<p>De plus, c’est souvent un moteur de templating comme
Handlebars ou Jade qui génére la vue originale. On se retrouve donc avec
un joli <code>this.$el.html(this.template(data))</code> dans la méthode <code>render()</code>
qui va provoquer des jolies horreurs visuelles
(ie. les images se rechargent, les videos sont réinitialisées).</p>
<p>En somme, Backbone est très sympathique pour structurer
son code proprement, mais concernant l’UI, n’aide absolument pas à réduire
la compléxité liée aux états du DOM.</p>
<h3 id="angular"><a class="putainde-Title-anchor" href="#angular">#</a>Angular</h3><p><a href="https://angularjs.org">Angular</a> propose une approche beaucoup plus travaillée,
en imposant un moteur de templating HTML (on peut utiliser du preprocessing)
et on déclare ses bindings très simplement avec une syntaxe <code>{{mustache}}</code>.</p>
<p>On déclare les évenements à l’aide d’attributs <code>ng-{eventName}</code>.</p>
<p>Sur le papier, angular est donc très sympathique (je ne prendrais pas parti sur le dirty checking).</p>
<h3 id="ember"><a class="putainde-Title-anchor" href="#ember">#</a>Ember</h3><p><a href="http://emberjs.com">Ember</a> est un framework très bien pensé et très travaillé.
Il intègre très bien les concepts de <code>data-binding</code> à l’aide de <a href="https://developer.mozilla.org/en-US/docs/Web/API/range">DOM Ranges</a>.
Il propose des conventions fortes, et contrairement à la plupart des <em>a priori</em>,
est très simple à prendre en main.
Les subviews sont très simples à utiliser à l’aide d’<code>{{outlet}}</code>.</p>
<p>Pour résumer, ember et angular proposent de vraies solutions pour la gestion
de l’UI. Cependant les deux conservent cette démarche :</p>
<ul>
<li>on <em>render</em> (génère et insère le bout de DOM) une fois</li>
<li>on update les bindings</li>
</ul>
<h3 id="react"><a class="putainde-Title-anchor" href="#react">#</a>React</h3><p><a href="http://facebook.github.io/react/">React</a> change complètement d’approche.
Il part d’un constat simple :
le fait que le DOM ait constamment un état différent, c’est chiant à gérer.</p>
<p>Du coup, et si on appelait <code>.render()</code> à chaque modification ?
Ça a l’air stupide, hein ? Pas tant que ça en fait.</p>
<p>React implémente un <strong>DOM virtuel</strong>, une représentation interne du DOM
extrêmement rapide. Il inclut par ailleurs son propre système d’événements,
ce qui permet à React de faire bénéficier de la phase de capturing aux navigateurs
n’implémentant pas <code>EventTarget</code> (oui, IE8, c’est toi que je regarde).</p>
<p>La méthode <code>render</code> retourne des objets correspondant à la représentation
interne du DOM virtuel.</p>
<p>Les classes React se définissent par leur <code>state</code>.
Lorsque l’on crée une classe, on définit une méthode <code>getInitialState</code> qui
retournera un état initial.</p>
<p>Après cela, le seul moyen de changer l’état est d’indiquer à <code>this.setState</code>
quelles valeurs de l’état ont changé afin de mettre à jour le DOM.</p>
<p>Une classe React se voit passer des propriétés au moment d’être instanciée : les
<code>props</code>. À ne pas confondre avec le <code>state</code>, son contenu ne doit être
manipulé que par l’extérieur de la classe (bien que celle-ci puisse obtenir
des valeurs par défaut en définissant une méthode <code>getDefaultProps</code> qui les
retourne).</p>
<p>Le <code>state</code>, en revanche, ne doit être modifié qu’au sein des méthodes propres
à la classe.</p>
<p>Le principal avantage est que l’on est certain, du fait de l’appel systématique
à <code>render</code>, que notre composant React aura la représentation attendue pour un état donné.</p>
<p>Un des autres avantages de React est son algorithme de diff interne.
Le DOM virtuel va être comparé avec la version visible, et React effectue
à l’aide d’opérations simples les seuls changements nécessaires.</p>
<p>Cela résoud des problématiques comme la position du curseur dans un champ texte
qui effectue du two-way data-binding; puisque l’algorithme n’y voit pas de
changement nécessaire, le champ texte n’est pas modifié et l’on garde donc le focus.
Du même fait, si vous avez un gif qui boucle, il ne se relancera pas
inopinément.</p>
<p>React est idéalement utilisé avec jsx, un pré-processeur js qui permet
d’écrire les templates avec une syntaxe xml (voir l’exemple plus bas),
ce qui permet à des novices de le prendre en main très rapidement.</p>
<h2 id="creons-un-component-react-"><a class="putainde-Title-anchor" href="#creons-un-component-react-">#</a>Créons un component react :</h2><pre><code class="lang-javascript"><span class="hljs-keyword">var</span> View = React.createClass({
  getInitialState : <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">()</span></span>{
    <span class="hljs-comment">// état initial</span>
    <span class="hljs-keyword">return</span> {
      checked : <span class="hljs-literal">false</span>
    }
  },
  getDefaultProps : <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">()</span></span>{
    <span class="hljs-comment">// si `this.props.label` n'est pas présent, ce sera `"?"`</span>
    <span class="hljs-keyword">return</span> {
      label : <span class="hljs-string">"?"</span>
    }
  },
  toggle : <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">()</span></span>{
    <span class="hljs-comment">// on crée un nouvel état (les états de react sont immutable)</span>
    <span class="hljs-comment">// et on déclenche le render</span>
    <span class="hljs-keyword">this</span>.setState({
      checked : !<span class="hljs-keyword">this</span>.state.checked
    })
  },
  render : <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">()</span></span>{
    <span class="hljs-comment">// petit addon pour se simplifier la vie</span>
    <span class="hljs-keyword">var</span> classes = React.addons.classSet({
      <span class="hljs-string">"list-item"</span> : <span class="hljs-literal">true</span>,
      <span class="hljs-string">"list-item--valid"</span> : <span class="hljs-keyword">this</span>.state.checked
    })
    <span class="hljs-keyword">return</span> (
      &lt;div className={classes}&gt;
        {<span class="hljs-comment">/* notre binding tout simple */</span>}
        &lt;input checked={<span class="hljs-keyword">this</span>.state.checked} type=<span class="hljs-string">"checkbox"</span> onChange={<span class="hljs-keyword">this</span>.toggle} /&gt;
        {<span class="hljs-keyword">this</span>.props.label}
      &lt;/div&gt;
    )
  }
})

<span class="hljs-comment">// on mount le component, et l'on passe le label</span>
<span class="hljs-keyword">var</span> view = React.renderComponent(&lt;View label=<span class="hljs-string">"helloworld"</span> /&gt;, document.getElementById(<span class="hljs-string">"id"</span>))
<span class="hljs-comment">// et hop</span>
view.toggle()
</code></pre>
<h2 id="sum-up-des-avantages-de-react"><a class="putainde-Title-anchor" href="#sum-up-des-avantages-de-react">#</a>Sum up des avantages de React</h2><p>React a bien compris ces points :</p>
<ul>
<li>le DOM est lent, du moins en écriture, et limiter les interactions avec
ce dernier est essentiel ;</li>
<li>devoir continuellement penser à l’état du DOM à l’instant <code>n</code> n’est pas
une préoccupation que nous devrions avoir en développant l’UI de nos
composants ;</li>
<li>les concepts d’immutabilité (un objet ne change pas, on en crée un nouveau à
chaque changement) et de composition (composer une classe de différentes
fonctionnalités sans devoir créer des chaînes d’héritage complexes) ont de
grands intérêts, trop peu utilisés en front-end.</li>
</ul>
<p>En bonus, React, même s’il n’impose pas de bibliothèque pour les
data et la communication des modules, offre une approche nommée
<a href="http://facebook.github.io/flux/docs/overview.html">flux</a> très
intéressante et vous offrant des clés pour concevoir une app avec en
tête les paradigmes pensés pour React.</p>
<p>Last but not least, vous pouvez render vos composants React depuis le serveur
et la lib sera assez intelligente pour reconnaitre les composants déjà générés
pour ne pas les render systématiquement, c’est pas beau, ça ?</p>

]]></description><pubDate>Wed, 04 Jun 2014 00:00:00 GMT</pubDate><link>http://putaindecode.fr/posts/js/introduction-a-reactjs/</link><guid isPermaLink="true">http://putaindecode.fr/posts/js/introduction-a-reactjs/</guid></item><item><title>Faire son préprocesseur CSS à la carte</title><description><![CDATA[
<p>Après vous avoir fait un petit <a href="/posts/css/le-point-sur-les-preprocesseurs/">état de l’art des préprocesseurs CSS historiques</a>
et vous avoir parlé <a href="/posts/css/le-point-sur-les-preprocesseurs/">des postprocesseurs</a>,
je me dois de vous montrer le chemin qui me semble le plus pertinent aujourd’hui,
en 2014, maintenant que <a href="http://www.w3.org/standards/techs/css#cr">les spécifications CSS sont découpées en modules</a>
qui peuvent du coup avancer (plus rapidement) chacune de leur côté.</p>
<p>Bon après faut avouer que chez {p!} on fait genre on est des hipsters hackers,
du coup quand on voit que <a href="http://blog.kaelig.fr/post/85546040569/net-awards-sass-game-changer-of-the-year">Sass est le game changer of the year</a>
 et que tout le monde l’adopte, on se doit de rester hipster.
Du coup on est obligés de passer à autre chose.</p>
<h2 id="pre-ou-postprocesseurs-"><a class="putainde-Title-anchor" href="#pre-ou-postprocesseurs-">#</a>Pré ou postprocesseurs ?</h2><p>Je vais ici utiliser le mot préprocesseur, alors que certains trouveront postprocesseurs plus pertinent,
car pour moi le préprocessing reste simplement une étape avant le <em>processing</em>
de nos feuilles de styles par les navigateurs.</p>
<p>Cela dit il faut bien distinguer les étapes :</p>
<ol>
<li>Preprocessing d’un langage spécifique (Sass, Stylus*) ou superset du langage CSS (Scss, Less);</li>
<li>Preprocessing d’un fichier respectant la syntaxe CSS;</li>
<li>Processing par le navigateur</li>
</ol>
<p>Revenons rapidement sur ces 3 points :</p>
<h3 id="preprocessing-via-langage-dedie"><a class="putainde-Title-anchor" href="#preprocessing-via-langage-dedie">#</a>Preprocessing via langage dédié</h3><p>Ici je parle d’un langage, car superset ou pas, on a des éléments nouveaux,
incompréhensibles par le navigateur (ex: <code>@if</code>, <code>@foreach</code>…).</p>
<p>Note: Je case Stylus dans le langage spécifique car il n’est pas vraiment compatible,
ne tolérant pas l’indentation :</p>
<pre><code class="lang-css"><span class="hljs-class">.Block</span> <span class="hljs-rules">{ <span class="hljs-rule"><span class="hljs-attribute">prop</span>:<span class="hljs-value"> value </span></span></span>}

  <span class="hljs-class">.Block-element</span> <span class="hljs-rules">{ <span class="hljs-rule"><span class="hljs-attribute">prop</span>:<span class="hljs-value"> value </span></span></span>}

<span class="hljs-comment">/* 💥 BOOM ! CA PAS MARCHER EN STYLUS */</span>
</code></pre>
<h3 id="preprocessing-futureproof-fallback"><a class="putainde-Title-anchor" href="#preprocessing-futureproof-fallback">#</a>Préprocessing futureproof/fallback</h3><p>Ici on conserve la syntaxe CSS, le parsing est donc simple est connu.
Mais attention on peut avoir un résultat non compréhensible par certains navigateurs
(ex: unité REM sur IE 8, variables CSS…).</p>
<p>À la différence de la solution du dessus, on reste ici avec un langage à la syntaxe simple
et connue, avec des spécifications (en brouillon ou pas).</p>
<p>Dès que c’est possible on va rendre le CSS encore plus compatible en ajoutant
des fallbacks (roues de secours) à tout va.
Ainsi par exemple pour assurer une utilisation de l’unité REM, on peut (en roue de secours)
doubler nos valeurs en <code>px</code>.
Autre exemple avec les variables CSS natives : on peut (pour une utilisation simpliste)
faire un prérendu et mettre des roues de secours là où c’est possible.</p>
<h3 id="processing-par-le-navigateur"><a class="putainde-Title-anchor" href="#processing-par-le-navigateur">#</a>Processing par le navigateur</h3><p>Ici on a blindé notre feuille de fallback, on est (en théorie) sensé avoir un support “au mieux”.</p>
<h2 id="creer-un-preprocesseur-css"><a class="putainde-Title-anchor" href="#creer-un-preprocesseur-css">#</a>Créer un préprocesseur CSS</h2><p>Allons à l’essentiel : pour créer votre préprocesseur on va utiliser une bibliothèque.
À ce jour nous avons le choix entre <a href="https://github.com/reworkcss/rework">Rework</a>
 ou <a href="https://github.com/ai/postcss">PostCSS</a> qui permettent d’inspecter et de manipuler nos CSS.
Tout deux sont des bibliothèques écrites en JavaScript (NodeJs).</p>
<p>Pour la petite histoire, Autoprefixer est à l’origine de PostCSS. En effet les
premières versions utilisaient Rework, mais à cause de limitation dues à l’API de Rework,
l’auteur d’Autoprefixer a décidé de créer son propre moteur, qui a une API presque
plus sympa il faut le dire (il faudra voir comment évolue Rework).</p>
<p>D’un autre côté Rework étant plus ancien, il possède un écosystème plus fourni et répondra
donc mieux à nos besoins.</p>
<p>Cela étant dit, avec l’approche futureproof nous pourrons switcher de Rework à PostCSS
 sans problème et surtout sans toucher à nos feuilles de styles.
Il suffira de trouver un plugin équivalent (ex: rework-vars et postcss-vars font la même chose).</p>
<p>Pour des raisons d’écosystème, je partirai sur Rework histoire de ne pas réinventer la roue.</p>
<h2 id="creer-un-preprocesseur-css-avec-rework"><a class="putainde-Title-anchor" href="#creer-un-preprocesseur-css-avec-rework">#</a>Créer un préprocesseur CSS avec Rework</h2><p>Rework prend une chaîne CSS en entrée, produit un AST (arbre de syntaxe abtrait)
de notre CSS et nous fournis une API pour le manipuler.</p>
<pre><code class="lang-js"><span class="hljs-tag">var</span> rework = <span class="hljs-function"><span class="hljs-title">require</span><span class="hljs-params">(<span class="hljs-string">"rework"</span>)</span></span>
<span class="hljs-tag">var</span> unPlugin = <span class="hljs-function"><span class="hljs-title">require</span><span class="hljs-params">(<span class="hljs-string">"rework-BIDULE"</span>)</span></span>
<span class="hljs-comment">// usage simple</span>
<span class="hljs-tag">var</span> css = <span class="hljs-function"><span class="hljs-title">rework</span><span class="hljs-params">(<span class="hljs-string">"html { font-size: 2rem}"</span>)</span></span>.<span class="hljs-function"><span class="hljs-title">use</span><span class="hljs-params">(unPlugin)</span></span>.<span class="hljs-function"><span class="hljs-title">toString</span><span class="hljs-params">()</span></span>
</code></pre>
<h3 id="plugin-rework"><a class="putainde-Title-anchor" href="#plugin-rework">#</a>Plugin Rework</h3><p>Un plugin Rework n’est rien d’autre qu’une fonction JavaScript.
L’exemple suivant remplacera toutes les couleurs de texte par du noir.</p>
<pre><code class="lang-js"><span class="hljs-keyword">var</span> monPlugin = <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">plugin</span><span class="hljs-params">(ast, reworkInstance)</span> </span>{
  ast.rules.<span class="hljs-keyword">forEach</span>(<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">(rule)</span> </span>{
    <span class="hljs-comment">// dans notre cas on ne veut que travailler sur des règles</span>
    <span class="hljs-keyword">if</span> (rule.type !== <span class="hljs-string">"rule"</span>) <span class="hljs-keyword">return</span>

    rule.declarations.<span class="hljs-keyword">forEach</span>(<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">(declaration, index)</span> </span>{
      <span class="hljs-keyword">if</span> (declaration.property === <span class="hljs-string">"color"</span>) {
        declaration.value = <span class="hljs-string">'#000'</span>
      }
    })
  })
}
</code></pre>
<p>Il est certain que l’exemple ci-dessus ne doit pas vous exciter beaucoup. Moi non plus.
Je n’ai d’ailleurs pas du tout accroché lorsque Rework est apparu par manque de compréhension.
<strong>Ou plutôt par manque d’imagination</strong>.</p>
<p>Pour un exemple plus costaud je vous invite à regarder le code <a href="https://github.com/reworkcss/rework-vars/blob/master/index.js">rework-vars</a>.</p>
<h2 id="l-ecosysteme-rework"><a class="putainde-Title-anchor" href="#l-ecosysteme-rework">#</a>L’Ecosystème Rework</h2><p>Heureusement pour nous, nous avons un écosystème. Donc pour un usage classique (écrire
du CSS futureproof ou ajouter quelques petites améliorations) il n’y aura pas besoin
d’écrire de plugin, juste en utiliser fera l’affaire.</p>
<h3 id="plugins-rework-natif"><a class="putainde-Title-anchor" href="#plugins-rework-natif">#</a>Plugins Rework natif</h3><p>Rework embarque en natif quelques plugins. Il faudra tout de même les activer (on voit comment juste après).</p>
<ul>
<li><a href="https://github.com/reworkcss/rework#extend">extend</a>: Permet d’hériter d’un sélecteur (<code>@extend</code> quoi).</li>
<li><a href="https://github.com/reworkcss/rework#ease">ease</a>: Ajout un paquet de fonctions d’easing pour les animations et transitions.</li>
<li><a href="https://github.com/reworkcss/rework#at2x">at2x</a>: Gestion automatique des images <code>@2x</code>.</li>
<li><a href="https://github.com/reworkcss/rework#prefixselectorsstring">prefixSelectors</a>: Permet de préfixer vos sélecteurs.</li>
<li><a href="https://github.com/reworkcss/rework#colors">colors</a>: Explication par l’exemple : <code>rgba(#fc0, .5)</code>.</li>
<li><a href="https://github.com/reworkcss/rework#mixinobject">mixin</a>: Faire ses propres mixins via des fonctions JavaScript.</li>
<li><a href="https://github.com/reworkcss/rework#functionobject">function</a>: Ajouter ses propres fonctions CSS.</li>
<li><a href="https://github.com/reworkcss/rework#references">references</a>: Permet de faire référence à des valeurs de propriétés (ex: <code>height: @width</code>)</li>
<li><a href="https://github.com/reworkcss/rework#urlfn">url</a>: Réécrire les <code>url()</code>s via une fonction JavaScript.</li>
<li><a href="https://github.com/reworkcss/rework#inlinedir">inline</a>: Inliner des ressources via des datauri.</li>
</ul>
<h3 id="plugins-rework-npm"><a class="putainde-Title-anchor" href="#plugins-rework-npm">#</a>Plugins Rework NPM</h3><p>On a déjà plus d’une soixantaine de <a href="https://www.npmjs.org/search?q=rework">plugins Rework disponible sur NPM</a> en plus des plugins natifs.</p>
<h4 id="ajouter-des-fallbacks"><a class="putainde-Title-anchor" href="#ajouter-des-fallbacks">#</a>Ajouter des fallbacks</h4><p>Si vous souhaitez écrire des CSS sans pour autant vous limiter à certaines implémentations, ces plugins devraient vous plaire.</p>
<h5 id="rework-vars"><a class="putainde-Title-anchor" href="#rework-vars">#</a>rework-vars</h5><p><a href="https://github.com/reworkcss/rework-vars">rework-vars</a>
permet un usage des <a href="http://www.w3.org/TR/css-variables/">variables CSS</a>.
Ce plugin est (pour l’instant) restreint aux déclarations à la racine (<code>:root</code>).
Cela permet toutefois un usage classique de variables globales.
Et de se séparer de Sass ou Less si on utilise pas beaucoup plus que des variables.</p>
<h5 id="rework-calc"><a class="putainde-Title-anchor" href="#rework-calc">#</a>rework-calc</h5><p><a href="https://github.com/reworkcss/rework-calc">rework-calc</a>
ajoute les résultats des opérations <code>calc()</code> quand c’est possible (même unité).
Très pratique spécialement couplé avec rework-vars pour ajouter un peu de math via vos variables.</p>
<h5 id="rework-npm"><a class="putainde-Title-anchor" href="#rework-npm">#</a>rework-npm</h5><p><a href="https://github.com/conradz/rework-npm">rework-npm</a>
nous parse <code>@import</code> comme on l’aime.
Peut taper dans votre dossier de sources ou en plus dans <code>node_modules</code>
(pratique pour utiliser <a href="https://www.npmjs.org/package/normalize.css">normalize.css</a>
<a href="/posts/frontend/npm-comme-package-manager-pour-le-front-end/">via npm</a> par exemple).
Il existe aussi <a href="https://github.com/simme/rework-importer">rework-importer</a> qui amène quelques différences de syntaxe.</p>
<h5 id="rework-rem-fallback"><a class="putainde-Title-anchor" href="#rework-rem-fallback">#</a><a href="https://github.com/ctalkington/rework-rem-fallback">rework-rem-fallback</a></h5><p><a href="https://github.com/ctalkington/rework-rem-fallback">rework-rem-fallback</a>
ajoute un fallback sur les unités REM. Pratique si vous voulez utiliser REM mais
que vous devez supporter IE 8.</p>
<h5 id="rework-color-function"><a class="putainde-Title-anchor" href="#rework-color-function">#</a>rework-color-function</h5><p><a href="https://github.com/ianstormtaylor/rework-color-function">rework-color-function</a> permet
de manipuler les couleurs via
<a href="http://dev.w3.org/csswg/css-color/#modifying-colors">les nouvelles fonctions en cours de spécifications</a>
(hue, saturation, lightness, whiteness, blackness, tint, shade, blend, blenda, contrast).</p>
<h5 id="rework-mixin-opacity"><a class="putainde-Title-anchor" href="#rework-mixin-opacity">#</a>rework-mixin-opacity</h5><p><a href="https://github.com/reworkcss/rework-mixin-opacity">rework-mixin-opacity</a> ajoute l’<code>opacity</code> pour IE 8.</p>
<h4 id="ameliorer-un-peu-vos-feuilles-de-styles"><a class="putainde-Title-anchor" href="#ameliorer-un-peu-vos-feuilles-de-styles">#</a>Améliorer un peu vos feuilles de styles</h4><p>Sans pour autant partir en vrille vers des <code>@if</code> ou <code>@each</code>, voici quelques plugins
qui peuvent ajouter un peu de beurre dans les épinards :</p>
<h5 id="rework-parent"><a class="putainde-Title-anchor" href="#rework-parent">#</a>rework-parent</h5><p><a href="https://github.com/fgnass/rework-parent">rework-parent</a> permet de référencer le sélecteur précédent via <code>&amp;</code>. Pratique dans pour les media-queries ou pour les états (:hover etc).</p>
<h5 id="rework-breakpoints"><a class="putainde-Title-anchor" href="#rework-breakpoints">#</a>rework-breakpoints</h5><p><a href="https://github.com/reworkcss/rework-breakpoints">rework-breakpoints</a> permet de spécifier des media-queries via des breakpoints prédéfinis. Pratique en attendant un plugin gérant les <a href="http://dev.w3.org/csswg/mediaqueries4/#custom-mq"><code>@custom-media</code></a>.</p>
<h5 id="rework-hex-alpha"><a class="putainde-Title-anchor" href="#rework-hex-alpha">#</a>rework-hex-alpha</h5><p><a href="https://github.com/ianstormtaylor/rework-hex-alpha">rework-hex-alpha</a> permet de spécifier des couleurs avec alpha sous la forme #rrggbbaa.</p>
<h5 id="rework-clearfix"><a class="putainde-Title-anchor" href="#rework-clearfix">#</a>rework-clearfix</h5><p><a href="https://github.com/fgnass/rework-clearfix">rework-clearfix</a> permet d’utiliser <code>clear: fix</code> via l’insertion automatique du <a href="http://nicolasgallagher.com/micro-clearfix-hack/">micro clearfix de @necolas</a>.</p>
<h5 id="rework-assets"><a class="putainde-Title-anchor" href="#rework-assets">#</a>rework-assets</h5><p><a href="https://github.com/conradz/rework-assets">rework-assets</a> permet de copier les assets référencés. Pratique avec rework-npm et des modules externes.</p>
<h5 id="rework-namespace-css"><a class="putainde-Title-anchor" href="#rework-namespace-css">#</a>rework-namespace-css</h5><p><a href="https://github.com/geordiemhall/rework-namespace-css">rework-namespace-css</a> permet de namespacer vos CSS par une classe sur <code>&lt;html&gt;</code>.</p>
<h5 id="rework-namespace"><a class="putainde-Title-anchor" href="#rework-namespace">#</a>rework-namespace</h5><p><a href="https://github.com/kristoferjoseph/rework-namespace">rework-namespace</a> permet de namespacer vos CSS par un préfixe. Pratique avec <a href="/posts/css/petite-definition-bem/">BEM</a> lorsque vous préfixez par votre <code>.org-</code>.</p>
<h5 id="rework-classmap"><a class="putainde-Title-anchor" href="#rework-classmap">#</a>rework-classmap</h5><p><a href="https://github.com/andreypopp/rework-classmap">rework-classmap</a> permet de renommer des classes via du mapping. Avec ça on pourrait presque avoir un code Bootstrap propre.</p>
<h5 id="rework-palette"><a class="putainde-Title-anchor" href="#rework-palette">#</a>rework-palette</h5><p><a href="https://github.com/fgnass/rework-palette">rework-palette</a> permet d’ajouter une palette de couleur personnalisée (via des noms de couleurs).</p>
<h5 id="rework-deduplicate"><a class="putainde-Title-anchor" href="#rework-deduplicate">#</a>rework-deduplicate</h5><p><a href="https://github.com/kristoferjoseph/rework-deduplicate">rework-deduplicate</a> permet de supprimer les règles dupliquées.</p>
<h5 id="rework-split-media"><a class="putainde-Title-anchor" href="#rework-split-media">#</a>rework-split-media</h5><p><a href="https://github.com/reworkcss/split-media">rework-split-media</a> permet de couper les contenus des media queries dans d’autres fichiers.</p>
<h5 id="rework-move-media"><a class="putainde-Title-anchor" href="#rework-move-media">#</a>rework-move-media</h5><p><a href="https://github.com/reworkcss/rework-move-media">rework-move-media</a> permet de regrouper les contenus des media queries. Pas très utile car gzip fera aussi bien.</p>
<h4 id="au-dela-du-preprocessing"><a class="putainde-Title-anchor" href="#au-dela-du-preprocessing">#</a>Au delà du préprocessing</h4><p>En utilisant le parser Rework, on peut faire plus que des ajustements ou du remplacement: on peut balancer des erreurs.</p>
<ul>
<li><a href="https://github.com/reworkcss/rework-ie-limits">rework-ie-limits</a>: prévient si vos CSS dépassent la limite de 4095 selectors (limite pour IE &lt; 10).</li>
<li><a href="https://github.com/suitcss/rework-suit-conformance">rework-suit-conformance</a>: permet de vérifier que votre code suit bien les <a href="https://github.com/suitcss/suit/tree/master/doc">conventions SUIT</a> (pour peu que vous les suiviez).</li>
</ul>
<p>En partant dans d’autres directions on pourrait réaliser des statistiques sur
nos CSS (nombre de sélecteurs, de couleurs utilisées etc) comme le fait <a href="http://www.cssstats.com/">CSS Stats</a>.</p>
<p>Retrouvrez en plus de la recherche via npm (qui sera la plus à jour), <a href="https://github.com/reworkcss/rework/wiki/Plugins-and-Utilities">une liste des plugins et utilitaires sur le wiki de Rework</a>.</p>
<h2 id="mise-en-place-de-rework-pour-faire-votre-preprocesseur-en-moins-de-5-min"><a class="putainde-Title-anchor" href="#mise-en-place-de-rework-pour-faire-votre-preprocesseur-en-moins-de-5-min">#</a>Mise en place de Rework pour faire votre préprocesseur en moins de 5 min</h2><p>Maintenant que nous avons vu comment utiliser Rework et quels sont les plugins
les plus sympas, on se faire un petit fichier pour automatiser tout ce process.</p>
<p>Plutôt que de réinventer la roue comme l’a fait <a href="http://pleeease.io/">Pleeease</a> (en gérant un watcher et tout le tralala),
on va plutôt partir comme <a href="http://myth.io/">Myth.io</a> ou <a href="https://github.com/visionmedia/styl">Styl</a> (successeur spirituel de Stylus)
qui se concentrent sur le rendu et non le workflow pour générer ce rendu.</p>
<p>Nous allons donc faire simple et efficace avec une task <a href="/posts/js/introduction-gulp/">gulp</a>.
Ceci pourrait bien entendu être aussi bien fait avec grunt ou même make et <a href="https://github.com/facebook/watchman">watchman</a>.</p>
<pre><code class="lang-bash">$ <span class="hljs-built_in">mkdir</span> monrework &amp;&amp; <span class="hljs-built_in">cd</span> monrework

# on crée un package.json pour sauvegarder les références des paquets qu'on va utiliser
$ npm init

# on install gulp, autoprefixer et rework &amp; co en les sauvegardants dans la partie "devDependencies"
$ npm i -D minimist gulp gulp-util gulp-plumber gulp-autoprefixer gulp-rework rework-npm rework-vars rework-calc rework-<span class="hljs-built_in">color</span>-function rework-<span class="hljs-comment">rem-fallback rework-parent rework-ie-limits</span>

# on créé notre fichier vide
$ <span class="hljs-built_in">mkdir</span> src &amp;&amp; <span class="hljs-built_in">mkdir</span> src/styles &amp;&amp; touch src/styles/index.css
</code></pre>
<p>Ensuite il nous reste à faire notre petit <code>Gulpfile.js</code></p>
<pre><code class="lang-js"><span class="hljs-keyword">var</span> options = <span class="hljs-keyword">require</span>(<span class="hljs-string">"minimist"</span>)(process.argv.slice(<span class="hljs-number">2</span>))
<span class="hljs-keyword">var</span> gulp = <span class="hljs-keyword">require</span>(<span class="hljs-string">"gulp"</span>)
<span class="hljs-keyword">var</span> util = <span class="hljs-keyword">require</span>(<span class="hljs-string">"gulp-util"</span>)
<span class="hljs-keyword">var</span> plumber = <span class="hljs-keyword">require</span>(<span class="hljs-string">"gulp-plumber"</span>)
<span class="hljs-keyword">var</span> rework = <span class="hljs-keyword">require</span>(<span class="hljs-string">"gulp-rework"</span>)

<span class="hljs-keyword">var</span> reworkPlugins = {
  atimport: <span class="hljs-keyword">require</span>(<span class="hljs-string">"rework-npm"</span>),
  <span class="hljs-keyword">parent</span>: <span class="hljs-keyword">require</span>(<span class="hljs-string">"rework-parent"</span>),
  vars: <span class="hljs-keyword">require</span>(<span class="hljs-string">"rework-vars"</span>),
  calc: <span class="hljs-keyword">require</span>(<span class="hljs-string">"rework-calc"</span>),
  colorFn: <span class="hljs-keyword">require</span>(<span class="hljs-string">"rework-color-function"</span>),
  remFallback: <span class="hljs-keyword">require</span>(<span class="hljs-string">"rework-rem-fallback"</span>),
  ieLimits: <span class="hljs-keyword">require</span>(<span class="hljs-string">"rework-ie-limits"</span>)
}
<span class="hljs-keyword">var</span> autoprefixer = <span class="hljs-keyword">require</span>(<span class="hljs-string">"gulp-autoprefixer"</span>)

gulp.task(<span class="hljs-string">"styles"</span>, <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">()</span> </span>{
  <span class="hljs-comment">// ici on prend toutes les CSS à la racine</span>
  <span class="hljs-comment">// on considère que celles dans des sous dossiers sont à importer</span>
  <span class="hljs-keyword">return</span> gulp.src(<span class="hljs-string">"./src/styles/*.css"</span>)
    .pipe(opts.production ? plumber() : util.noop())
    .pipe(rework(
      reworkPlugins.atimport({dir: <span class="hljs-string">"./src/styles/"</span>}),
      rework.colors(),
      rework.references(),
      rework.ease(),
      rework.inline,
      reworkPlugins.<span class="hljs-keyword">parent</span>,
      reworkPlugins.vars(), <span class="hljs-comment">// notez que certains plugins nécessitent d'être éxecutés (retournant une fonction dynamique)</span>
      reworkPlugins.calc,
      reworkPlugins.colorFn,
      reworkPlugins.remFallback(),
      reworkPlugins.ieLimits
    ))
    .pipe(autoprefixer())
    .pipe(gulp.dest(<span class="hljs-string">"./dist/styles"</span>))
})

gulp.task(<span class="hljs-string">"default"</span>, [<span class="hljs-string">"styles"</span>], <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">()</span> </span>{
  gulp.watch(<span class="hljs-string">"./src/css/**/*"</span>, [<span class="hljs-string">"styles"</span>])
})
</code></pre>
<p>Ensuite il ne reste plus qu’à lancer Gulp au besoin qui s’occupera d’éxecuter le preprocessing
au démarrage et lors des changements de fichiers.
Il ne reste plus grand chose à faire si ce n’est ajouter livereload en plus pour avoir le petit process aux petits oignons.</p>
<pre><code class="lang-bash">$ gulp
[gulp] Using gulpfile ~/Development/monrework/Gulpfile.js
[gulp] Starting <span class="hljs-string">'styles'</span><span class="hljs-keyword">...</span>
[gulp] Finished <span class="hljs-string">'styles'</span> after <span class="hljs-number">49</span> ms
[gulp] Starting <span class="hljs-string">'default'</span><span class="hljs-keyword">...</span>
[gulp] Finished <span class="hljs-string">'default'</span> after <span class="hljs-number">4.16</span> ms
</code></pre>
<p>Le watch est lancé, on peut remplir notre fichier CSS</p>
<pre><code class="lang-css"><span class="hljs-pseudo">:root</span> <span class="hljs-rules">{
    <span class="hljs-rule"><span class="hljs-attribute">--fontSize</span>:<span class="hljs-value"> <span class="hljs-number">1rem</span></span></span>;
    <span class="hljs-rule"><span class="hljs-attribute">--lineHeight</span>:<span class="hljs-value"> <span class="hljs-number">1.5rem</span></span></span>;
    <span class="hljs-rule"><span class="hljs-attribute">--color-highlight</span>:<span class="hljs-value"> <span class="hljs-function">rgba</span>(<span class="hljs-hexcolor">#f00</span>, .<span class="hljs-number">8</span>)</span></span>;
<span class="hljs-rule">}</span></span>

<span class="hljs-tag">html</span> <span class="hljs-rules">{
    <span class="hljs-rule"><span class="hljs-attribute">width</span>:<span class="hljs-value"> <span class="hljs-number">100%</span></span></span>;
    <span class="hljs-rule"><span class="hljs-attribute">height</span>:<span class="hljs-value"> @width</span></span>;
    <span class="hljs-rule"><span class="hljs-attribute">font-size</span>:<span class="hljs-value"> <span class="hljs-function">var</span>(--fontSize)
</span></span></span>}

<span class="hljs-tag">p</span> <span class="hljs-rules">{
    <span class="hljs-rule"><span class="hljs-attribute">margin</span>:<span class="hljs-value"> <span class="hljs-function">calc</span>(<span class="hljs-function">var</span>(--lineHeight) / <span class="hljs-number">2</span>) <span class="hljs-number">0</span></span></span>;
<span class="hljs-rule">}</span></span>

<span class="hljs-tag">a</span> <span class="hljs-rules">{
    <span class="hljs-rule"><span class="hljs-attribute">color</span>:<span class="hljs-value"> <span class="hljs-function">var</span>(--color-highlight)</span></span>;
    <span class="hljs-rule"><span class="hljs-attribute">transition</span>:<span class="hljs-value"> all <span class="hljs-number">500ms</span> ease-out-back</span></span>;
<span class="hljs-rule">}</span></span>

&amp;<span class="hljs-pseudo">:hover</span> <span class="hljs-rules">{
    <span class="hljs-rule"><span class="hljs-attribute">color</span>:<span class="hljs-value"> <span class="hljs-function">color</span>(<span class="hljs-function">var</span>(--color-highlight) <span class="hljs-function">lightness</span>(-<span class="hljs-number">10%</span>))</span></span>;
    <span class="hljs-rule"><span class="hljs-attribute">trasnform</span>:<span class="hljs-value"> <span class="hljs-function">rotate</span>(<span class="hljs-number">1deg</span>)</span></span>;
<span class="hljs-rule">}</span></span>
</code></pre>
<p>Et on obtiendra</p>
<pre><code class="lang-css"><span class="hljs-tag">html</span> <span class="hljs-rules">{
  <span class="hljs-rule"><span class="hljs-attribute">width</span>:<span class="hljs-value"> <span class="hljs-number">100%</span></span></span>;
  <span class="hljs-rule"><span class="hljs-attribute">height</span>:<span class="hljs-value"> <span class="hljs-number">100%</span></span></span>;
  <span class="hljs-rule"><span class="hljs-attribute">font-size</span>:<span class="hljs-value"> <span class="hljs-number">16px</span></span></span>;
  <span class="hljs-rule"><span class="hljs-attribute">font-size</span>:<span class="hljs-value"> <span class="hljs-number">1rem</span></span></span>;
<span class="hljs-rule">}</span></span>

<span class="hljs-tag">p</span> <span class="hljs-rules">{
  <span class="hljs-rule"><span class="hljs-attribute">margin</span>:<span class="hljs-value"> <span class="hljs-number">12px</span> <span class="hljs-number">0</span></span></span>;
  <span class="hljs-rule"><span class="hljs-attribute">margin</span>:<span class="hljs-value"> <span class="hljs-number">0.75rem</span> <span class="hljs-number">0</span></span></span>;
<span class="hljs-rule">}</span></span>

<span class="hljs-tag">a</span> <span class="hljs-rules">{
  <span class="hljs-rule"><span class="hljs-attribute">color</span>:<span class="hljs-value"> <span class="hljs-function">rgba</span>(<span class="hljs-number">255</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, .<span class="hljs-number">8</span>)</span></span>;
  <span class="hljs-rule"><span class="hljs-attribute">-webkit-transition</span>:<span class="hljs-value"> all <span class="hljs-number">500ms</span> <span class="hljs-function">cubic-bezier</span>(<span class="hljs-number">0.175</span>, <span class="hljs-number">0.885</span>, <span class="hljs-number">0.320</span>, <span class="hljs-number">1.275</span>)</span></span>;
  <span class="hljs-rule"><span class="hljs-attribute">transition</span>:<span class="hljs-value"> all <span class="hljs-number">500ms</span> <span class="hljs-function">cubic-bezier</span>(<span class="hljs-number">0.175</span>, <span class="hljs-number">0.885</span>, <span class="hljs-number">0.320</span>, <span class="hljs-number">1.275</span>)</span></span>;
<span class="hljs-rule">}</span></span>

<span class="hljs-tag">a</span><span class="hljs-pseudo">:hover</span> <span class="hljs-rules">{
  <span class="hljs-rule"><span class="hljs-attribute">color</span>:<span class="hljs-value"> <span class="hljs-function">rgba</span>(<span class="hljs-number">204</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0.8</span>)</span></span>;
  <span class="hljs-rule"><span class="hljs-attribute">transform</span>:<span class="hljs-value"> <span class="hljs-function">rotate</span>(<span class="hljs-number">1deg</span>)</span></span>;
<span class="hljs-rule">}</span></span>
</code></pre>
<p>Gardez bien en tête qu’avec le code CSS d’origine, vous avez (en majeur partie) un code futureproof.
D’ici quelques temps on pourra supprimer une grande partie des plugins et les navigateurs prendront le relais 😉.</p>
<p><em>Note: J’ai ouvert <a href="https://github.com/reworkcss/rework-vars/issues/28">un ticket sur rework-vars</a> afin que celui-ci agisse comme un fallback (en rajoutant les valeurs) et non un remplacement. Je mettrais à jour ce post dans ce sens dès que possible.</em></p>
<p><strong>Bon alors, on Less tomber Sass ?</strong></p>

]]></description><pubDate>Tue, 20 May 2014 00:00:00 GMT</pubDate><link>http://putaindecode.fr/posts/css/preprocesseur-a-la-carte/</link><guid isPermaLink="true">http://putaindecode.fr/posts/css/preprocesseur-a-la-carte/</guid></item><item><title>Se mettre au frontend en 2014, par où commencer ?</title><description><![CDATA[
<p>Un de nos lecteurs nous a récemment envoyé un email avec tout un tas de questions; nous avons apprécié le geste et plutôt qu’uniquement lui répondre, nous souhaitions en faire profiter tout le monde.</p>
<hr>
<blockquote>
<p>Salut putain de code,</p>
</blockquote>
<p>Salut :)</p>
<blockquote>
<p>Je viens d’être embauché en tant que Product Designer et il est prévu que je fasse du front. Malheureusement, pour diverses raisons, je n’ai plus pratiqué ce métier depuis au moins 1 an. Je continue bien sûr de suivre ce qui se fait mais j’ai comme la sensation de me sentir un peu largué alors que c’était un sujet sur lequel je me sentais vraiment bien. On a un produit SaaS qui tourne sur Rails &amp; Angular, qui demande beaucoup de maintenabilité et une bonne optimisation. Là où j’interviens, c’est sur la définition et la création de la V2. Seulement avant de m’engager sur des sujets que je ne maîtrise plus, je souhaiterais avoir un peu plus d’informations.</p>
</blockquote>
<p>Yes, pas de problème, dis-nous tout.</p>
<blockquote>
<p>Au niveau de mes besoins, il me faudrait, je pense, une solution fiable avec une première base de modules prédéfinis (même une version light) pour une question de rendement et d’optimisation du dev. Mon premier avis serait d’utiliser un Bootstrap avec Sass grâce à tout son système de modals / tableaux / tabs / grid / etc… seulement j’ai lu le contraire donc je me retrouve perdu.  Dans vos articles {P!}, vous dîtes qu’il vaut mieux éviter des Frameworks du type Bootstrap, mais… pourquoi ? </p>
</blockquote>
<p>Les frameworks comme Bootstrap ne sont pas forcément une mauvaise chose, ils te permettent de mettre les bases d’un site, très pratique pour aller vite et surtout faire des administrations. En revanche ils proposent des structures avec des conventions CSS n’aidant pas forcément à finir avec un front-end maintenable. De plus, cela force à <em>override</em> tout l’aspect visuel dès que ton design est personnalisé. Finalement, tu passes plus de temps à <em>overrider</em> un framework qui ne te convient pas tant que ça que de te créer ton propre ui kit. (sans compter le risque de voir ton site péter lors d’une mise à jour d’un framework).</p>
<blockquote>
<p>Avec une charte un peu custom, n’est-il pas préférable de se baser sur des composants pré-existants pour faciliter la charge et le temps passé à dev ? Il est peut-être possible d’en récupérer des similaires de façon individuelle autre part ?</p>
</blockquote>
<p>Si, effectivement, des solutions comme <a href="http://topcoat.io/">topcoat</a> sont moins <em>opinionated</em> par exemple et permettent vraiment de personnaliser tous les éléments proposés par défaut.
Il faut vraiment trouver un framework qui fait que le strict nécessaire sans design finalement.</p>
<blockquote>
<p>Et les préprocesseurs (Sass surtout) c’est vraiment une bonne idée sur ce type de projet ou tu vois des contre-indications ?</p>
</blockquote>
<p>Les préprocesseurs CSS sont généralement une bonne chose, ils apportent de nombreuses options intéressants telles que les variables, les fonctions, là où le w3c met un certain temps à les sortir. Cependant, tous les préprocesseurs ne se ressemblent pas. Certains ont leur propre écriture comme Stylus ou Sass (Sass, pas scss). Certains sont aussi plus lents à compiler que d’autres (coucou Sass). Nous préconisons un pseudo “post-processor” qui s’appelle <a href="https://github.com/reworkcss/rework">Rework</a>. Avec rework, tu ajoutes juste les processing dont tu as besoin, et tout ça, généralement, sans casser le style d’écriture d’un fichier css (article à prevoir).</p>
<blockquote>
<p>Quant à mon workflow, j’aimerais tout reprendre depuis le début pour repartir sur des bases saines. Tu pourrais m’indiquer les indispensables sur Sublime Text (Config, Plugins) et autres outils ?</p>
</blockquote>
<p>Orf, ca dépend de chacun mais en général, voici ce qu’on te préconise :</p>
<ul>
<li>Editeur : <a href="http://www.sublimetext.com/">Sublime text</a> (avec BracketHighlighter, Color Highlighter, DocBlockr, EditorConfig, Emmet, Emmet CSS, HTML5, INI, JavaScript Console, JsFormat, Markdown Preview, MarkdownEditing, Modific, Placeholders, Theme - Flatland, Unicode Character Highlighter)
ou <a href="http://atom.io">Atom</a> (apm install, editorconfig, docblockr, htmlhint, csslint, linter, linter-jscs, linter-jshint, css-color-highlighting, atom-prettify, open-in-github-app, gist-it, autocomplete-plus).<br>Pour être à jour sur ces éditeurs, n’hésite pas à Suivre <a href="https://twitter.com/SublimePackages">@SublimePackages</a> et <a href="https://twitter.com/Atom_Packages">@Atom_Packages</a> sur Twitter.</li>
<li>Terminal : <a href="http://www.iterm2.com/">iterm2</a> sur mac, ou terminal de base</li>
<li>Shell : zsh (<code>brew install zsh</code>), <a href="https://github.com/sorin-ionescu/prezto">prezto (plugin zsh)</a> </li>
<li><a href="http://nightly.mozilla.org/">Firefox Nightly</a> ou <a href="http://www.google.com/intl/fr/chrome/browser/canary.html">Chrome Canary</a></li>
</ul>
<blockquote>
<p>Je vois souvent passer du NPM / Grunt / Bower / Yo &amp; Co mais jamais vraiment eu le temps de m’y plonger dedans. Il est possible d’avoir un petit résumé et/ou un moyen d’apprendre le plus vite possible ?</p>
</blockquote>
<p>Tout d’abord lis ceci : <a href="http://www.24joursdeweb.fr/2013/automatisez-votre-workflow-front-end/">Automatisez votre workflow front-end</a>.</p>
<p>Pour le reste :</p>
<ul>
<li><p><a href="https://www.npmjs.org/">NPM</a> : permet de gérer les versions de ce que tu utilises à la fois comme bibliothèque front ou outils de dev. Il sert aussi d’interface de ligne de commande permettant de <a href="/posts/frontend/npm-comme-package-manager-pour-le-front-end/">lancer des commandes définies dans le package.json</a>.</p>
</li>
<li><p><a href="http://bower.io/">Bower</a> ne sert pas à grand chose, c’est une abstraction par dessus NPM. Nous pensons qu’il tend à mourir. [<a href="/posts/frontend/npm-comme-package-manager-pour-le-front-end/">1</a>] [<a href="/posts/nodejs/napa-ou-comment-telecharger-package-napa-package-json/">2</a>]</p>
</li>
<li><p><a href="http://gruntjs.com/">Grunt</a> est un <em>task-runner</em>, il te permet d’automatiser les actions que tu répètes souvent : concaténer des scripts, preprocessing HTML &amp; CSS, copie des assets… Nous te conseillons d’utiliser gulp, beaucoup plus rapide et simple à prendre en main. [<a href="/posts/js/introduction-gulp/">1</a>] [<a href="/posts/js/premiers-pas-avec-grunt/">2</a>]</p>
</li>
</ul>
<blockquote>
<p>Merci beaucoup !</p>
</blockquote>
<p>Tout le plaisir est pour nous. ;)</p>

]]></description><pubDate>Thu, 15 May 2014 00:00:00 GMT</pubDate><link>http://putaindecode.fr/posts/frontend/se-mettre-au-frontend-en-2014-par-ou-commencer/</link><guid isPermaLink="true">http://putaindecode.fr/posts/frontend/se-mettre-au-frontend-en-2014-par-ou-commencer/</guid></item><item><title>Créez vos iconfonts avec gulp-iconfont</title><description><![CDATA[
<p>Après <a href="/posts/js/introduction-gulp/">notre introduction sur gulp</a>, je vous propose de créer vos propres fontes à partir d’icônes.</p>
<p>J’ai bien galéré lorsque j’ai dû passer de <strong>grunt</strong> à <strong>gulp</strong>. Non pas que gulp soit compliqué mais retrouver exactement le même <em>workflow</em> qu’avant, sachant que gulp est jeune et que les <em>plugins</em> sont bien moins nombreux que sur grunt, c’est pas si évident que ça.</p>
<p>M’enfin, il y a toujours une solution à un problème.</p>
<p>Justement, là, mon problème était de répliquer mon <em>process</em> de <strong>svg-to-font</strong>.</p>
<p>Je me suis creusé les méninges et j’ai finalement trouvé. Cette solution, je vous la propose.</p>
<h2 id="gulp-iconfont"><a class="putainde-Title-anchor" href="#gulp-iconfont">#</a>gulp-iconfont</h2><p>Tout d’abord, installez <strong>gulp</strong> (évident…) et faites ce que vous avez à faire avec gulp.</p>
<p>Maintenant, vous êtes prêt(e) ? Okay, go.</p>
<h3 id="installez-les-em-packages-em-adequats"><a class="putainde-Title-anchor" href="#installez-les-em-packages-em-adequats">#</a>Installez les <em>packages</em> adéquats</h3><p>Oui, deux packages, <a href="https://github.com/nfroidure/gulp-iconfont">gulp-iconfont</a> et <a href="https://github.com/backflip/gulp-iconfont-css">gulp-iconfont-css</a>.</p>
<pre><code class="lang-bash">$ npm install gulp-iconfont gulp-iconfont-css --<span class="hljs-built_in">save</span>-<span class="hljs-built_in">dev</span>
</code></pre>
<h3 id="importez-les"><a class="putainde-Title-anchor" href="#importez-les">#</a>Importez-les</h3><pre><code class="lang-js"><span class="hljs-comment">// import</span>
<span class="hljs-tag">var</span> gulp = <span class="hljs-function"><span class="hljs-title">require</span><span class="hljs-params">(<span class="hljs-string">'gulp'</span>)</span></span>

<span class="hljs-tag">var</span> iconfont = <span class="hljs-function"><span class="hljs-title">require</span><span class="hljs-params">(<span class="hljs-string">'gulp-iconfont'</span>)</span></span>
<span class="hljs-tag">var</span> iconfontCss = <span class="hljs-function"><span class="hljs-title">require</span><span class="hljs-params">(<span class="hljs-string">'gulp-iconfont-css'</span>)</span></span>
</code></pre>
<h3 id="creez-votre-propre-tache-gulp"><a class="putainde-Title-anchor" href="#creez-votre-propre-tache-gulp">#</a>Créez votre propre tâche gulp</h3><p>Je préconise d’appeler toute transformation d’une image vers une fonte “glyphicon”.</p>
<pre><code class="lang-js"><span class="hljs-comment">// glyphicons</span>
<span class="hljs-attribute">gulp</span>.<span class="hljs-function">task</span>(<span class="hljs-string">'glyphicons'</span>, <span class="hljs-function">function</span>() {
 return gulp.<span class="hljs-function">src</span>(<span class="hljs-string">'src/glyphicons/**/*'</span>) <span class="hljs-comment">// où sont vos svg</span>
    .<span class="hljs-function">pipe</span>(<span class="hljs-function">iconfontCss</span>({
      <span class="hljs-attribute">fontName</span>: <span class="hljs-string">'icons'</span>, <span class="hljs-comment">// nom de la fonte, doit être identique au nom du plugin iconfont</span>
      <span class="hljs-attribute">targetPath</span>: <span class="hljs-string">'../../styles/shared/icons.css'</span>, <span class="hljs-comment">// emplacement de la css finale</span>
      <span class="hljs-attribute">fontPath</span>: <span class="hljs-string">'../fonts/'</span> <span class="hljs-comment">// emplacement des fontes finales</span>
    }))
    <span class="hljs-class">.pipe</span>(<span class="hljs-function">iconfont</span>({
      <span class="hljs-attribute">fontName</span>: <span class="hljs-string">'icons'</span> <span class="hljs-comment">// identique au nom de iconfontCss</span>
     }))
    <span class="hljs-class">.pipe</span>( gulp.<span class="hljs-function">dest</span>(<span class="hljs-string">'src/assets/fonts'</span>) )
})
</code></pre>
<h3 id="le-final"><a class="putainde-Title-anchor" href="#le-final">#</a>Le final</h3><p>Voilà l’écriture entière de la tâche :</p>
<pre><code class="lang-js"><span class="hljs-comment">// import</span>
<span class="hljs-keyword">var</span> gulp = <span class="hljs-built_in">require</span>(<span class="hljs-string">'gulp'</span>)

<span class="hljs-keyword">var</span> iconfont = <span class="hljs-built_in">require</span>(<span class="hljs-string">'gulp-iconfont'</span>)
<span class="hljs-keyword">var</span> iconfontCss = <span class="hljs-built_in">require</span>(<span class="hljs-string">'gulp-iconfont-css'</span>)

gulp.task(<span class="hljs-string">'glyphicons'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">()</span> </span>{
 <span class="hljs-keyword">return</span> gulp.src(<span class="hljs-string">'src/glyphicons/**/*'</span>)
    .pipe(iconfontCss({
      fontName: <span class="hljs-string">'icons'</span>, <span class="hljs-comment">// nom de la fonte, doit être identique au nom du plugin iconfont</span>
      targetPath: <span class="hljs-string">'../../styles/shared/icons.css'</span>, <span class="hljs-comment">// emplacement de la css finale</span>
      fontPath: <span class="hljs-string">'../fonts/'</span> <span class="hljs-comment">// emplacement des fontes finales</span>
    }))
    .pipe(iconfont({
      fontName: <span class="hljs-string">'icons'</span> <span class="hljs-comment">// identique au nom de iconfontCss</span>
     }))
    .pipe( gulp.dest(<span class="hljs-string">'src/assets/fonts'</span>) )
})
</code></pre>
<p>Et voilà, on est bon. On peut transformer nos <em>svg</em> en <em>font</em>. \o/</p>

]]></description><pubDate>Wed, 14 May 2014 00:00:00 GMT</pubDate><link>http://putaindecode.fr/posts/frontend/creez-vos-iconfonts-avec-gulp-iconfont/</link><guid isPermaLink="true">http://putaindecode.fr/posts/frontend/creez-vos-iconfonts-avec-gulp-iconfont/</guid></item><item><title>Array.reduce par l'exemple</title><description><![CDATA[
<p>Souvent méconnue, la fonction <code>Array#reduce</code> se révèle super pratique dès lors
 qu’on prenne un peu le temps de faire un peu plus connaissance.
 Ce n’est que dernièrement que je me suis rendu compte que reduce pouvait servir
 à bien plus de chose que ce qui était présenté dans les documentations.</p>
<p>Voici donc un petit tour d’horizon des cas d’utilisation de cette fonction.
Mais avant cela, et histoire de faire les présentations, voici l’intro tirée de
la documentation de <a href="https://developer.mozilla.org/fr/docs/JavaScript/Reference/Objets_globaux/Array/reduce">MDN</a>.</p>
<blockquote>
<p><strong><em>Résumé</em></strong>
La méthode reduce() applique une
fonction sur un accumulateur et chaque valeur d’une liste (de la gauche
vers la droite) de sorte à le réduire à une seule valeur.</p>
</blockquote>
<h2 id="le-classique-operer-une-somme-sur-un-tableau"><a class="putainde-Title-anchor" href="#le-classique-operer-une-somme-sur-un-tableau">#</a>Le classique: Opérer une somme sur un tableau</h2><p>C’est souvent l’exemple qui illustre le plus les documentations. <code>Array#reduce</code>
va permettre de parcourir le tableau, et pour chaque élément, appeler une fonction
avec les paramètres suivants :</p>
<ul>
<li>le résultat de la précédente exécution de cette fonction (aussi appelé l’accumulateur).</li>
<li>l’élément courant.</li>
<li>l’index de l’élément courant.</li>
<li>le tableau sur lequel on est entrain d’itérer</li>
</ul>
<pre><code class="lang-javascript"><span class="hljs-keyword">var</span> sum = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>].reduce( function( memo, <span class="hljs-function"><span class="hljs-keyword">val</span>){</span>
  <span class="hljs-keyword">return</span> memo + <span class="hljs-function"><span class="hljs-keyword">val</span>;</span>
});
</code></pre>
<p>En fait, <code>Array#reduce</code> accepte un deuxième argument après la fonction de callback.
 Cet argument sera utilisé comme accumulateur lors de la première exécution.
 Et c’est justement cela qui est intéressant et qui rend le reduce plutôt pratique.</p>
<h2 id="chercher-remplacer-avec-plusieurs-motifs"><a class="putainde-Title-anchor" href="#chercher-remplacer-avec-plusieurs-motifs">#</a>Chercher/remplacer avec plusieurs motifs</h2><p>Imaginons que vous souhaitiez appliquer plusieurs opérations de rechercher/remplacer
sur une chaine de caractère. Si vous avez une liste de motifs et leur valeur correspondante,
 reduce permet de faire cela assez simplement, genre en 3 lignes.</p>
<pre><code class="lang-javascript"><span class="hljs-keyword">var</span> input = <span class="hljs-string">"I'm %USER% and I live in %COUNTRY%"</span>
<span class="hljs-keyword">var</span> data = [{token:<span class="hljs-string">'%USER%'</span>, value:<span class="hljs-string">'lionel'</span>}, {token:<span class="hljs-string">'%COUNTRY%'</span>, value: <span class="hljs-string">'France'</span>}]

<span class="hljs-keyword">var</span> output = data.reduce( <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">(memo, item)</span></span>{
  <span class="hljs-keyword">return</span> memo.replace(item.token, item.value);
}, input);
</code></pre>
<h2 id="realiser-un-groupby"><a class="putainde-Title-anchor" href="#realiser-un-groupby">#</a>Réaliser un groupBy</h2><p>Reduce peut aussi nous permettre d’effectuer des manipulations comme des groupBy
 sur un tableau (bon avec l’aide de petits helpers).</p>
<p>Prenons comme point de départ cette liste de stat représentant un découpage par
site et par famille de navigateurs. Nous aimerions pouvoir grouper les résultats par site :</p>
<pre><code class="lang-javascript"><span class="hljs-keyword">var</span> stats = [
  {<span class="hljs-string">"site"</span>:<span class="hljs-string">"google.fr"</span>,<span class="hljs-string">"browser"</span>:<span class="hljs-string">"Chrome"</span>,<span class="hljs-string">"value"</span>:<span class="hljs-string">"50%"</span>},
  {<span class="hljs-string">"site"</span>:<span class="hljs-string">"google.fr"</span>,<span class="hljs-string">"browser"</span>:<span class="hljs-string">"FireFox"</span>,<span class="hljs-string">"value"</span>:<span class="hljs-string">"30%"</span>},
  {<span class="hljs-string">"site"</span>:<span class="hljs-string">"google.fr"</span>,<span class="hljs-string">"browser"</span>:<span class="hljs-string">"Internet Explorer"</span>,<span class="hljs-string">"value"</span>:<span class="hljs-string">"20%"</span>},
  {<span class="hljs-string">"site"</span>:<span class="hljs-string">"mozilla.fr"</span>,<span class="hljs-string">"browser"</span>:<span class="hljs-string">"FireFox"</span>,<span class="hljs-string">"value"</span>:<span class="hljs-string">"60%"</span>},
  {<span class="hljs-string">"site"</span>:<span class="hljs-string">"mozilla.fr"</span>,<span class="hljs-string">"browser"</span>:<span class="hljs-string">"Internet Explorer"</span>,<span class="hljs-string">"value"</span>:<span class="hljs-string">"20%"</span>},
  {<span class="hljs-string">"site"</span>:<span class="hljs-string">"microsoft.fr"</span>,<span class="hljs-string">"browser"</span>:<span class="hljs-string">"Chrome"</span>,<span class="hljs-string">"value"</span>:<span class="hljs-string">"10%"</span>},
  {<span class="hljs-string">"site"</span>:<span class="hljs-string">"microsoft.fr"</span>,<span class="hljs-string">"browser"</span>:<span class="hljs-string">"FireFox"</span>,<span class="hljs-string">"value"</span>:<span class="hljs-string">"20%"</span>},
];

<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">compareSite</span><span class="hljs-params">(site, item)</span></span>{
  <span class="hljs-keyword">return</span> site === item.site
}
<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">containSite</span><span class="hljs-params">(site, items)</span> </span>{
  <span class="hljs-keyword">return</span> items.some( compareSite.bind(<span class="hljs-literal">null</span>, site) )
}
<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">groupBySite</span><span class="hljs-params">(memo, item)</span></span>{
  <span class="hljs-keyword">var</span> site = memo.filter( containSite.bind(<span class="hljs-literal">null</span>, item.site) );
  <span class="hljs-keyword">if</span> (site.length &gt; <span class="hljs-number">0</span>) {
    site[<span class="hljs-number">0</span>].push(item)
  } <span class="hljs-keyword">else</span> {
    memo.push([item])
  }
  <span class="hljs-keyword">return</span> memo
}
<span class="hljs-comment">// Nous utilisons un tableau vide comme accumulateur</span>
<span class="hljs-keyword">var</span> results = stats.reduce( groupBySite, [] );
</code></pre>
<p>Concernant cet exemple, on pouvait arriver au même résultat en déclarant une variable
 qui aurait le rôle d’accumulateur et un Array.forEach :</p>
<pre><code class="lang-javascript"><span class="hljs-keyword">var</span> results = {};

<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">groupBySite</span><span class="hljs-params">( item)</span></span>{
  <span class="hljs-keyword">var</span> site = results.filter( containSite.bind(<span class="hljs-keyword">null</span>, item.site) );
  <span class="hljs-keyword">if</span> (site.length &gt; <span class="hljs-number">0</span>) {
    site[<span class="hljs-number">0</span>].push(item)
  } <span class="hljs-keyword">else</span> {
    results.push([item])
  }
}

stats.<span class="hljs-keyword">forEach</span>( groupBySite );
</code></pre>
<p>Mais ici, la fonction <code>groupBySite</code> devient bien moins ré-utilisable car elle
dépend directement de la variable results, déclarée au dessus.</p>
<h3 id="a-noter"><a class="putainde-Title-anchor" href="#a-noter">#</a>À noter</h3><p>L’utilisation de  <code>Function.bind</code> nous permet de réutiliser les fonctions <code>compareSite</code>
et <code>containSite</code> en fixant leur premier paramètre. Ainsi <code>compareSite.bind(null, &#39;mozilla.fr&#39;)</code> équivaut à :</p>
<pre><code class="lang-javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">compareMozilla</span><span class="hljs-params">(item)</span></span>{
  <span class="hljs-keyword">return</span> <span class="hljs-string">"mozilla.fr"</span> === item.site;
}
</code></pre>
<p>D’ailleurs, on pourrait assez simplement rendre <code>groupBySite</code> générique pour la réutiliser avec un <code>groupByBrowser</code>.</p>
<h2 id="manipuler-la-structure-des-donnees"><a class="putainde-Title-anchor" href="#manipuler-la-structure-des-donnees">#</a>Manipuler la structure des données</h2><p><code>Array#reduce</code> peut aussi permettre de manipuler la structure de vos données et pouvoir la modifier.
Par exemple, voici une liste de sites avec, pour chaque site, le pourcentage de visite par navigateur.
Imaginons que nous souhaitons changer la structure de l’objet pour grouper ces
résultats par type de navigateur plutôt que par site. Là encore <code>Array#reduce</code> s’avère plutôt pratique.</p>
<pre><code class="lang-javascript">var data = {
      <span class="hljs-string">"google.fr"</span> : [
       {<span class="hljs-string">name:</span> <span class="hljs-string">"Chrome"</span>, <span class="hljs-string">value:</span> <span class="hljs-string">"50%"</span>},
        {<span class="hljs-string">name:</span> <span class="hljs-string">"FireFox"</span>, <span class="hljs-string">value:</span> <span class="hljs-string">"30%"</span>},
        {<span class="hljs-string">name:</span> <span class="hljs-string">"Internet Explorer"</span>, <span class="hljs-string">value:</span> <span class="hljs-string">"20%"</span> }
      ],
      <span class="hljs-string">"mozilla.fr"</span> : [
        {<span class="hljs-string">name:</span> <span class="hljs-string">"Chrome"</span>, <span class="hljs-string">value:</span> <span class="hljs-string">"20%"</span>},
        {<span class="hljs-string">name:</span> <span class="hljs-string">"FireFox"</span>, <span class="hljs-string">value:</span> <span class="hljs-string">"60%"</span>},
        {<span class="hljs-string">name:</span> <span class="hljs-string">"Internet Explorer"</span>, <span class="hljs-string">value:</span> <span class="hljs-string">"20%"</span>}
      ] ,
      <span class="hljs-string">"microsoft.fr"</span> : [
        {<span class="hljs-string">name:</span> <span class="hljs-string">"Chrome"</span>, <span class="hljs-string">value:</span> <span class="hljs-string">"10%"</span>},
        {<span class="hljs-string">name:</span> <span class="hljs-string">"FireFox"</span>, <span class="hljs-string">value:</span> <span class="hljs-string">"20%"</span>},
        {<span class="hljs-string">name:</span> <span class="hljs-string">"Internet Explorer"</span>, <span class="hljs-string">value:</span> <span class="hljs-string">"70%"</span>}
      ]
    };

function groupByBrowser( site, memo, browser){
  <span class="hljs-keyword">if</span> (!memo[browser.name]){
    memo[browser.name] = [];
  }
  memo[browser.name].push({<span class="hljs-string">site:</span>site, <span class="hljs-string">value:</span> browser.value});
  <span class="hljs-keyword">return</span> memo
}

var results = Object.keys(data).reduce( function (memo, site) {
  <span class="hljs-keyword">return</span> data[site].reduce(groupByBrowser.bind(<span class="hljs-literal">null</span>, site), memo)
}, {});
</code></pre>
<p>J’espère que vous avez apprécié ces quelques exemples d’utilisation de <code>Array#reduce</code>.
Et n’hésitez pas à partager vos cas d’utilisations en éditant l’article ou via les commentaires !</p>

]]></description><pubDate>Tue, 13 May 2014 00:00:00 GMT</pubDate><link>http://putaindecode.fr/posts/js/array-reduce/</link><guid isPermaLink="true">http://putaindecode.fr/posts/js/array-reduce/</guid></item><item><title>npm: choisir la bonne version de ses dépendances</title><description><![CDATA[
<p>Pas plus tard qu’hier, alors que je travaillais tranquillement, apparu soudainement un bug dans mon <em>workflow</em> de <em>build</em>. Il ne m’était plus possible avec <a href="https://github.com/gruntjs/grunt-contrib-clean">grunt-contrib-clean</a> de supprimer des fichiers. Hmmm, ballot, car sans la suppression, mon <em>workflow</em> devenait tout bancal. Bien. Il me fallut remonter la rivière - comme souvent, en tant que développeur - afin de constater où était le bug. Je suis alors tombé sur <a href="https://github.com/isaacs/rimraf">rimraf</a> (bon c’était pas bien loin) qui s’était vu être mis à jour il y a à peine 12 heures, comprenant un bug.</p>
<h2 id="contexte"><a class="putainde-Title-anchor" href="#contexte">#</a>Contexte</h2><p>Bon, vous voyez le topo ?</p>
<pre><code>{
  "<span class="hljs-attribute">name</span>": <span class="hljs-value"><span class="hljs-string">"grunt-contrib-clean"</span></span>,
  "<span class="hljs-attribute">dependencies</span>": <span class="hljs-value">{
    "<span class="hljs-attribute">rimraf</span>": <span class="hljs-value"><span class="hljs-string">"~2.2.1"</span>
  </span>}
</span>}
</code></pre><p><a href="https://github.com/gruntjs/grunt-contrib-clean">grunt-contrib-clean</a> qui contient en <em>dependencies</em> <a href="https://github.com/isaacs/rimraf">rimraf</a> avec une version bugguée. Oh la belle affaire. Oui car <code>~2.2.1</code> veut dire “<a href="https://github.com/isaacs/node-semver#ranges">Raisonnablement proche de 2.2.1</a>“, ce qui se traduit par télécharger la dernière version en <code>2.2.x</code>, soit la <code>2.2.7</code> (celle bugguée) lorsque je mis à jour le package <a href="https://github.com/gruntjs/grunt-contrib-clean">grunt-contrib-clean</a>.</p>
<h2 id="le-hic"><a class="putainde-Title-anchor" href="#le-hic">#</a>Le hic</h2><p>Une question m’est venue : comment faire en sorte de figer la version de <a href="https://github.com/isaacs/rimraf">rimraf</a> qui est une dépendance de dépendance ?</p>
<p>Ha ! Pas évident comme ça.</p>
<p>J’ai d’abord essayé sans trop d’espoir de télécharger <a href="https://github.com/isaacs/rimraf">rimraf</a> lui-même en <code>2.2.6</code> mais vu que chaque dépendance à ses propres dépendances et qu’elles ne se les partagent pas… c’était peine perdue.</p>
<p>J’ai donc cherché, cherché, et je suis tombé sur <a href="https://www.npmjs.org/doc/cli/npm-shrinkwrap.html">npm-shrinkwrap</a>: “Lock down dependency versions”. Bingo !</p>
<h2 id="npm-shrinkwrap-la-solution-pour-figer-vos-dependances-toutes-vos-dependances"><a class="putainde-Title-anchor" href="#npm-shrinkwrap-la-solution-pour-figer-vos-dependances-toutes-vos-dependances">#</a>npm-shrinkwrap, la solution pour figer vos depéndances, toutes vos dépendances</h2><p><a href="https://www.npmjs.org/doc/cli/npm-shrinkwrap.html">npm-shrinkwrap</a> va vous permettre de définir avec précision chaque version de chaque dépendance.</p>
<p>Pour cela, faites d’abord un <code>npm install</code> (si vous avez évidemment un <code>package.json</code>) afin d’installer vos <code>node_modules</code>. Une fois cela fait, lancez <code>npm shrinkwrap</code> qui créera le fichier <code>npm-shrinkwrap.json</code> qui comprendra toutes les définitions de chaque dépendance.</p>
<h3 id="figer-une-dependance-de-dependance"><a class="putainde-Title-anchor" href="#figer-une-dependance-de-dependance">#</a>Figer une dépendance de dépendance</h3><p>Simple, regardez :</p>
<pre><code>{
  "<span class="hljs-attribute">name</span>": <span class="hljs-value"><span class="hljs-string">"my-project"</span></span>,
  "<span class="hljs-attribute">version</span>": <span class="hljs-value"><span class="hljs-string">"1.0.0"</span></span>,
  "<span class="hljs-attribute">dependencies</span>": <span class="hljs-value">{
    "<span class="hljs-attribute">grunt-contrib-clean</span>": <span class="hljs-value">{
      "<span class="hljs-attribute">version</span>": <span class="hljs-value"><span class="hljs-string">"0.5.0"</span></span>,
      "<span class="hljs-attribute">from</span>": <span class="hljs-value"><span class="hljs-string">"grunt-contrib-clean@~0.5.*"</span></span>,
      "<span class="hljs-attribute">dependencies</span>": <span class="hljs-value">{
        "<span class="hljs-attribute">rimraf</span>": <span class="hljs-value">{
          "<span class="hljs-attribute">version</span>": <span class="hljs-value"><span class="hljs-string">"2.2.6"</span></span>,
          "<span class="hljs-attribute">from</span>": <span class="hljs-value"><span class="hljs-string">"rimraf@~2.2.1"</span></span>,
          "<span class="hljs-attribute">resolved</span>": <span class="hljs-value"><span class="hljs-string">"https://registry.npmjs.org/rimraf/-/rimraf-2.2.6.tgz"</span>
        </span>}
      </span>}
    </span>}
  </span>}
</span>}
</code></pre><p>J’ai défini la version de <a href="https://github.com/isaacs/rimraf">rimraf</a> dans <code>dependencies.grunt-contrib-clean.dependencies.rimraf</code>.</p>
<p>Bon, je ne connais pas tout par coeur non plus, npm-shrinkwrap vous écrira la totalité du fichier avec toutes les définitions mais j’ai volontairement tout supprimé et gardé uniquement la partie <a href="https://github.com/gruntjs/grunt-contrib-clean">grunt-contrib-clean</a> car seule cette partie est à figer. Quand je dis supprimer, je parle réellement dans le fichier final, pas juste ici dans l’article.</p>
<p>Vous aurez toute l’explication de npm-shrinkwrap sur la <a href="https://www.npmjs.org/doc/cli/npm-shrinkwrap.html">documentation officielle [en]</a>.</p>
<h2 id="choisir-la-bonne-strategie-de-version"><a class="putainde-Title-anchor" href="#choisir-la-bonne-strategie-de-version">#</a>Choisir la bonne stratégie de version</h2><p>Parce qu’il est important de savoir quelle version exacte nous souhaitons installer dans notre projet, il faut définir avec précisions ces versions dans <code>package.json</code>.</p>
<p>Vous pouvez avoir <code>1.2.1</code> ou encore <code>~1.4.6</code> ou bien encore <code>^2.3.1</code>. Mais que veulent dire <code>^</code> ou <code>~</code> ?</p>
<ul>
<li><code>1.2.1</code> : cette version exacte</li>
<li><code>~1.4.6</code> : raisonnablement proche de <code>1.4.6</code></li>
<li><code>^2.3.1</code> : compatible avec <code>2.3.1</code></li>
</ul>
<p>Il est clair que lu comme ça, le plus intéressant est le <code>^</code> et c’est justement <a href="http://fredkschott.com/post/2014/02/npm-no-longer-defaults-to-tildes/">celui qui est choisi maintenant [en]</a> lorsque l’on fait un <code>npm install --save</code>. Cool non ?!</p>
<p>Pour plus d’information sur la définition des versions, <a href="https://github.com/isaacs/node-semver#ranges">c’est par là</a> (Oh mon dieu, il a fait un lien avec un “cliquez ici”).</p>
<p>Bon. C’est bon ? Vous avez tout compris ? Okay, vous pouvez passer à <a href="/posts/nodejs/napa-ou-comment-telecharger-package-napa-package-json/"><strong>napa</strong></a> maintenant qui vous aidera grandement sur le téléchargement de projets n’ayant pas de <code>package.json</code>.</p>
<p>En ce qui concerne npm, je m’arrête là, et vous propose une petite solution afin d’augmenter la vitesse de vos installations de node modules.</p>
<h2 id="bonus"><a class="putainde-Title-anchor" href="#bonus">#</a>Bonus</h2><p>Envie d’accélérer vos installations npm ? Je vous conseille <a href="https://github.com/vvo/npm-pkgr">npm-pkgr</a>.</p>
<p>Il hashera votre <code>package.json</code> pour savoir s’il a été modifié ou non, et en fonction de ça, il lancera <code>npm install</code> ou non. Sacré gain de temps (surtout si vous faites des <code>npm install</code> à chaque <em>deploy</em>).</p>
<p>You are now a npm master. 👨</p>

]]></description><pubDate>Mon, 12 May 2014 00:00:00 GMT</pubDate><link>http://putaindecode.fr/posts/nodejs/npm-choisir-version/</link><guid isPermaLink="true">http://putaindecode.fr/posts/nodejs/npm-choisir-version/</guid></item><item><title>napa ou comment télécharger un package qui napa de package.json</title><description><![CDATA[
<p>(Grosse grosse blague ce titre…)</p>
<p><a href="https://twitter.com/kewah">@kewah</a> nous a récemment parlé de <a href="/posts/frontend/npm-comme-package-manager-pour-le-front-end/"><strong>npm</strong> comme front-end packager manager</a>, je vais aller encore plus loin. Je vais vous dévoiler comment installer des projets qui n’ont pas de <code>package.json</code>. Oui, car c’est bien beau de virer Bower (oh que oui c’est beau) mais comme npm requiert constamment un <code>package.json</code>, on ne va pas pouvoir télécharger grand chose sauf si on fait des <em>PR</em> afin d’ajouter ce fichier sur les projets que l’on souhaite obtenir.</p>
<p>C’est pourquoi je vais vous parler de <a href="https://github.com/shama/napa"><strong>napa</strong></a>.</p>
<p>napa est un <em>helper for installing stuff without a package.json with npm</em>. Pardon, napa est un aideur pour installer des trucs sans un package.json avec npm. BON. napa vous aide à travers npm à installer des modules qui n’ont pas de package.json. C’est plus clair là ?</p>
<p>napa est ce qui manque à npm où bower avait justement son utilité : télécharger n’importe quel <em>package</em> <em>front</em> n’importe où. Mais plutôt que d’installer un autre <em>packager</em>, napa s’insère directement dans npm afin de ne pas perturber le <em>workflow</em>, et ça, j’apprécie grandement.</p>
<p>Simple, tout simple. Dans un premier temps, téléchargez-le :</p>
<pre><code>$ npm install napa --<span class="hljs-built_in">save</span>-<span class="hljs-built_in">dev</span>
</code></pre><p>Cela ajoutera napa au <code>package.json</code>.</p>
<p>Puis dans <code>package.json</code>, ajoutez :</p>
<pre><code>{
  "<span class="hljs-attribute">scripts</span>": <span class="hljs-value">{
    "<span class="hljs-attribute">install</span>": <span class="hljs-value"><span class="hljs-string">"napa"</span>
  </span>}
</span>}
</code></pre><p>Cela permettra de lancer napa à chaque fois que vous faites <code>npm install</code>.</p>
<p>Afin d’ajouter les projets qui seront téléchargés par napa et donc par npm, il suffit d’ajouter un objet <code>napa</code> toujours dans <code>package.json</code> :</p>
<pre><code>{
  "<span class="hljs-attribute">napa</span>": <span class="hljs-value">{
    "<span class="hljs-attribute">foo</span>": <span class="hljs-value"><span class="hljs-string">"username/repo"</span></span>,
    "<span class="hljs-attribute">bar</span>": <span class="hljs-value"><span class="hljs-string">"git@example.com:user/repo"</span>
  </span>}
</span>}
</code></pre><p>ce qui donne au final :</p>
<pre><code>{
  "<span class="hljs-attribute">scripts</span>": <span class="hljs-value">{
    "<span class="hljs-attribute">install</span>": <span class="hljs-value"><span class="hljs-string">"napa"</span>
  </span>}</span>,
  "<span class="hljs-attribute">napa</span>": <span class="hljs-value">{
    "<span class="hljs-attribute">foo</span>": <span class="hljs-value"><span class="hljs-string">"username/repo"</span></span>,
    "<span class="hljs-attribute">bar</span>": <span class="hljs-value"><span class="hljs-string">"git@example.com:user/repo"</span>
  </span>}
</span>}
</code></pre><p>Je vous ai volontairement donné la version structurée (et/ou explicite) parce que d’une, c’est celle que j’utilise :D et de deux, c’est celle que je trouve la plus claire, mais il y a d’<a href="https://github.com/shama/napa#want-to-name-the-package-something-else">autres façons</a> de l’écrire.</p>
<p>On se retrouve alors dans la vraie vie à avoir un <code>package.json</code> comme ceci :</p>
<pre><code>{
  "<span class="hljs-attribute">name</span>": <span class="hljs-value"><span class="hljs-string">"my-project"</span></span>,
  "<span class="hljs-attribute">version</span>": <span class="hljs-value"><span class="hljs-string">"1.0.0"</span></span>,
  "<span class="hljs-attribute">description</span>": <span class="hljs-value"><span class="hljs-string">"Brilliant project"</span></span>,
  "<span class="hljs-attribute">scripts</span>": <span class="hljs-value">{
    "<span class="hljs-attribute">install</span>": <span class="hljs-value"><span class="hljs-string">"napa"</span>
  </span>}</span>,
  "<span class="hljs-attribute">devDependencies</span>": <span class="hljs-value">{
    "<span class="hljs-attribute">animate.css</span>": <span class="hljs-value"><span class="hljs-string">"git://github.com/daneden/animate.css#3.1.1"</span></span>,
    "<span class="hljs-attribute">backbone</span>": <span class="hljs-value"><span class="hljs-string">"^1.1.2"</span></span>,
    "<span class="hljs-attribute">jquery</span>": <span class="hljs-value"><span class="hljs-string">"^1.9.0"</span></span>,
    "<span class="hljs-attribute">jquery-migrate</span>": <span class="hljs-value"><span class="hljs-string">"git://github.com/jquery/jquery-migrate#1.2.1"</span></span>,
    "<span class="hljs-attribute">lodash</span>": <span class="hljs-value"><span class="hljs-string">"^2.4.1"</span></span>,
    "<span class="hljs-attribute">moment</span>": <span class="hljs-value"><span class="hljs-string">"^2.6.0"</span></span>,
    "<span class="hljs-attribute">napa</span>": <span class="hljs-value"><span class="hljs-string">"^0.4.1"</span></span>,
    "<span class="hljs-attribute">putainde-cookie</span>": <span class="hljs-value"><span class="hljs-string">"^0.2.0"</span>
  </span>}</span>,
  "<span class="hljs-attribute">napa</span>": <span class="hljs-value">{
    "<span class="hljs-attribute">swfobject</span>": <span class="hljs-value"><span class="hljs-string">"swfobject/swfobject#a22b7db077abc126d6aa5f2d0f44b11e4ed97940"</span></span>,
    "<span class="hljs-attribute">modernizr</span>": <span class="hljs-value"><span class="hljs-string">"Modernizr/Modernizr#v2.8.1"</span>
  </span>}</span>,
  "<span class="hljs-attribute">repository</span>": <span class="hljs-value"><span class="hljs-string">"git://github.com/my/project.git"</span></span>,
  "<span class="hljs-attribute">author</span>": <span class="hljs-value"><span class="hljs-string">"Myself"</span></span>,
  "<span class="hljs-attribute">license</span>": <span class="hljs-value"><span class="hljs-string">"BSD"</span></span>,
  "<span class="hljs-attribute">readmeFilename</span>": <span class="hljs-value"><span class="hljs-string">"readme.md"</span>
</span>}
</code></pre><p>Top non ?</p>
<p>Note : napa et npm-shrinkwrap, c’est pas encore ça, alors n’hésitez pas à supprimer la partie “napa” avant de lancer votre génération de npm-shrinkwrap.</p>
<p>Bon download à vous.</p>

]]></description><pubDate>Mon, 12 May 2014 00:00:00 GMT</pubDate><link>http://putaindecode.fr/posts/nodejs/napa-ou-comment-telecharger-package-napa-package-json/</link><guid isPermaLink="true">http://putaindecode.fr/posts/nodejs/napa-ou-comment-telecharger-package-napa-package-json/</guid></item><item><title>Premiers pas avec Ruby</title><description><![CDATA[
<h2 id="tl-dr"><a class="putainde-Title-anchor" href="#tl-dr">#</a>tl;dr</h2><pre><code class="lang-sh">$ git clone git:<span class="hljs-comment">//github.com/sstephenson/rbenv.git ~/.rbenv</span>
$ echo <span class="hljs-string">'export PATH="$HOME/.rbenv/bin:$PATH"'</span> &gt;&gt; ~/<span class="hljs-class">.bashrc</span>
$ echo <span class="hljs-string">'eval "$(rbenv init -)"'</span> &gt;&gt; ~/<span class="hljs-class">.bashrc</span>
$ source ~/<span class="hljs-class">.bashrc</span>
$ git clone git@github<span class="hljs-class">.com</span>:sstephenson/ruby-build<span class="hljs-class">.git</span> ~/.rbenv/plugins/ruby-build
$ rbenv install <span class="hljs-number">2.1</span>.<span class="hljs-number">1</span>
$ rbenv global <span class="hljs-number">2.1</span>.<span class="hljs-number">1</span>
$ gem install sinatra
$ rbenv rehash
</code></pre>
<p>Tous les ans, depuis des années, sort un article : <em>“<a href="http://www.reddit.com/comments/1oi8wd">Est-ce que Ruby est mort ?</a>“</em>. Et chaque année les résultats sont les mêmes, <em>“Ruby perd en intensité”</em>, <em>“Node.js prend le dessus”</em>. Et pourtant Ruby reste chaque année dans l’actualité avec autant d’importance. Il faut être honnête et admettre que <a href="http://blog.federicocarrone.com/2014/01/18/ruby-dying-or-ruby-hype-dead">Ruby souffre de certaines difficultés</a> comme tous les langages, mais <a href="http://jmoses.co/2013/12/21/is-ruby-dying.html">Ruby n’est pas mort</a> et il y a encore beaucoup à en tirer, du langage, de ses frameworks et de sa communauté. Sans oublier que de grands sites l’ont utilisé et l’utilisent toujours comme Twitter, Github, Shopify, ou encore Hulu.</p>
<p>Nous commençons donc une série d’articles sur Ruby afin de le découvrir et commencer à développer et à devenir productif avec. Et pour ce premier article, nous allons voir comment l’installer. Dans les suivants nous installerons notre première gem, nous utiliserons Sinatra pour notre premier projet, puis nous n’arriverons plus à nous arrêter.</p>
<h2 id="un-langage-des-implementations"><a class="putainde-Title-anchor" href="#un-langage-des-implementations">#</a>Un langage, des implémentations</h2><p>Tout d’abord il faut savoir qu’il existe plusieurs implémentations de Ruby, c’est à dire différents interpréteurs du langage. L’implémentation principale et originale est <em>MRI</em>, pour Matz’s Ruby Interpreter, Yukihiro “Matz” Matsumoto étant le créateur de Ruby. On trouve également JRuby, un interpretteur Ruby en Java, permattant de bénéficier de toutes les fonctionnalités de la JVM. Parmis les plus connues également MacRuby qui est une implémentation spécifique à OS X et dont <a href="http://www.rubymotion.com">RubyMotion</a> dépend. Pour nos articles nous devrions utiliser MRI à moins qu’une envie sur une différente implémentation se fasse ressentir.</p>
<blockquote>
<p>C’est bien tout ça mais au final j’en sais pas plus sur Ruby.</p>
</blockquote>
<p>Et ça va en rester ainsi pour le moment, car au lieu de voir la théorie sur Ô combien <a href="http://www.slideshare.net/astrails/ruby-is-awesome-16466895">Ruby est génial</a>, nous allons tout de suite installer Ruby pour nous rapprocher rapidement de notre éditeur de texte.</p>
<h2 id="installation-avec-em-rbenv-em-"><a class="putainde-Title-anchor" href="#installation-avec-em-rbenv-em-">#</a>Installation avec <em>rbenv</em></h2><p>Il existe de nombreuses façons d’installer Ruby, un petit peu comme Node.js en passant par Github, par les packages officiels, brew, etc. <em>rbenv</em> reste d’après moi la façon la plus simple, propre et légère. Beaucoup pourront préférer <em>RVM</em> disant qu’il fait la même chose en mieux, d’autres diront qu’au contraire il en fait trop en écrasant par exemple la méthode <code>cd</code>. J’ai utilisé les deux, il fallait faire un choix, ce sera <em>rbenv</em>.</p>
<p>Pour utiliser <em>rbenv</em>, il faut avoir Git. Si vous ne l’avez pas, vous devriez. Et ça tombe bien, <a href="https://github.com/madx">madx</a> et <a href="https://github.com/Erwyn">Erwyn</a> ont fait deux super articles pour l’<a href="/posts/git/versionner-avec-git/">utiliser</a> et le <a href="/posts/git/boutez-les-bugs-domptez-votre-historique/">dompter</a>. On commence donc par installer <em>rbenv</em> :</p>
<pre><code class="lang-sh">$ git clone git:<span class="hljs-comment">//github.com/sstephenson/rbenv.git ~/.rbenv</span>
$ echo <span class="hljs-string">'export PATH="$HOME/.rbenv/bin:$PATH"'</span> &gt;&gt; ~/<span class="hljs-class">.bashrc</span>
$ echo <span class="hljs-string">'eval "$(rbenv init -)"'</span> &gt;&gt; ~/<span class="hljs-class">.bashrc</span>
$ source ~/.bashrc
</code></pre>
<p>Désormais <em>rbenv</em> est installé et ses commandes sont disponibles dans votre terminal. Il faut maintenant lui installer le plugin pour récupérer les différentes versions de Ruby :</p>
<pre><code class="lang-sh">$ git clone git<span class="hljs-annotation">@github</span>.<span class="hljs-string">com:</span>sstephenson<span class="hljs-regexp">/ruby-build.git ~/</span>.rbenv<span class="hljs-regexp">/plugins/</span>ruby-build
</code></pre>
<p>C’est bon, vous pouvez installer Ruby. J’ai constaté sur Ubuntu qu’il était nécessaire d’installer au préalable <code>libssl-dev</code> et <code>g++</code>, simplement avec <code>sudo apt-get install libssl-dev g++</code>. Lançons-nous :</p>
<pre><code class="lang-sh">rbenv <span class="hljs-operator"><span class="hljs-keyword">install</span> <span class="hljs-number">2.1</span><span class="hljs-number">.1</span>
rbenv <span class="hljs-keyword">global</span> <span class="hljs-number">2.1</span><span class="hljs-number">.1</span></span>
</code></pre>
<p>Séquence émotion. Vous êtes désormais maître de l’Univers.</p>
<p>Vous avez Ruby 2.1.1 d’installé. La ligne <code>rbenv global</code> permet comme son nom l’indique d’utiliser cette version de Ruby de façon globale à l’utilisateur, si jamais plusieurs versions coexistent.</p>
<p>C’était facile n’est-ce pas ? Et bien c’est encore plus facile d’utiliser une bibliothèque (appelée “gem”) ou un framework Ruby. Comme nous allons utiliser Sinatra dans notre prochain article, autant l’installer tout de suite. Pour installer une gem qui sera exécutée dans la console comme Sass il est nécessaire de l’installer de cette façon : <code>gem install sass</code>. Seulement pour Sinatra, nous avons seulement besoin que le framework soit disponible dans nos scripts Ruby. Pour cela nous allons utiliser un gestionnaire de dépendance des gem Ruby, et nous verrons cela dans <a href="/posts/backend/ruby-dependances-et-projet">le prochain article pour nos premiers pas avec Sinatra</a>.</p>
<p>D’ici là vous pouvez commencer à jouer avec Ruby en tapant la commande <code>irb</code> dans votre terminal, qui lance l’interpretteur Ruby. Pourquoi pas essayer un <em>Hello World!</em> à la Ruby ?</p>
<pre><code class="lang-ruby">puts <span class="hljs-string">'Hello World!'</span>
puts (<span class="hljs-number">1</span>..<span class="hljs-number">3</span>)<span class="hljs-class">.to_a</span><span class="hljs-class">.reverse</span><span class="hljs-class">.join</span>(<span class="hljs-string">' ... '</span>) &lt;&lt; <span class="hljs-string">' ... The World is ours!!!'</span>
</code></pre>
<p>Enjoy!</p>

]]></description><pubDate>Wed, 07 May 2014 00:00:00 GMT</pubDate><link>http://putaindecode.fr/posts/backend/premiers-pas-avec-ruby/</link><guid isPermaLink="true">http://putaindecode.fr/posts/backend/premiers-pas-avec-ruby/</guid></item><item><title>NPM comme package manager pour le front-end</title><description><![CDATA[
<p>NPM, le package manager de Node.js, a grandement participé au succès de ce dernier.
Il facilite la création, le partage et l’installation de modules.
Il permet aux développeurs de suivre la <a href="http://www.faqs.org/docs/artu/ch01s06.html">philosophie Unix</a>
où chaque module fait une seule tâche (évite la complexité, facilite la réutilisation et les tests).</p>
<p>Cependant NPM ne se limite pas aux modules JavaScript. Il est en effet possible
de publier tout type de fichier et c’est là que ça devient intéressant pour nos
modules front-end, qui peuvent aussi être CSS, HTML, fonts, etc.</p>
<h2 id="module-javascript"><a class="putainde-Title-anchor" href="#module-javascript">#</a>Module JavaScript</h2><p>Si vous n’êtes pas familier(e) avec la création d’un module JavaScript, je vous
conseille d’exécuter la commande <code>npm init</code> qui va vous aider à générer votre
<code>package.json</code> (fichier de configuration utilisé par NPM). Le champ
“<a href="https://www.npmjs.org/doc/json.html#main">main</a>“ définit le point d’entrée de
votre module.</p>
<pre><code class="lang-json">{
  "<span class="hljs-attribute">name</span>": <span class="hljs-value"><span class="hljs-string">"putaindemodule"</span></span>,
  "<span class="hljs-attribute">version</span>": <span class="hljs-value"><span class="hljs-string">"0.0.1"</span></span>,
  "<span class="hljs-attribute">main</span>": <span class="hljs-value"><span class="hljs-string">"index.js"</span>
</span>}
</code></pre>
<p>Dans un article précédent, il vous a été présenté le développement d’une application
autour de <a href="/posts/js/browserify-all-the-things/">modules JavaScript avec Browserify</a>.</p>
<h2 id="module-pour-tout-type-de-fichier"><a class="putainde-Title-anchor" href="#module-pour-tout-type-de-fichier">#</a>Module pour tout type de fichier</h2><p>C’est grâce au champ “<a href="https://www.npmjs.org/doc/json.html#files">files</a>“ que
l’on peut définir la liste des fichiers que l’on va publier (autre que les fichiers JavaScript).
Voici un exemple de <code>package.json</code> d’un module pour un système de grille CSS.</p>
<pre><code class="lang-json">{
  "<span class="hljs-attribute">name</span>": <span class="hljs-value"><span class="hljs-string">"putaindegrid"</span></span>,
  "<span class="hljs-attribute">version</span>": <span class="hljs-value"><span class="hljs-string">"0.0.1"</span></span>,
  "<span class="hljs-attribute">files</span>": <span class="hljs-value">[
    <span class="hljs-string">"grid.css"</span>
  ]
</span>}
</code></pre>
<p>Il ne reste de plus qu’à le <a href="https://gist.github.com/coolaj86/1318304">publier</a>
et à l’installer (<code>npm install putaindegrid --save</code>) dans vos différents projets
où vous en aurez besoin. Votre fichier <code>grid.css</code> est accessible dans le dossier
<code>node_modules/putaindegrid/grid.css</code>, vous pouvez donc l’inclure dans votre page
HTML. (Ou l’<code>@import</code>er dans votre fichier Sass/Less principal.)</p>
<pre><code class="lang-html">&lt;link <span class="hljs-variable">href=</span><span class="hljs-string">"node_modules/putaindegrid/grid.css"</span> <span class="hljs-variable">rel=</span><span class="hljs-string">"stylesheet"</span> <span class="hljs-variable">type=</span><span class="hljs-string">"text/css"</span>&gt;
</code></pre>
<h2 id="pourquoi-npm-plutot-qu-un-autre-package-manager-"><a class="putainde-Title-anchor" href="#pourquoi-npm-plutot-qu-un-autre-package-manager-">#</a>Pourquoi NPM plutôt qu’un autre package manager ?</h2><ul>
<li>Il a déjà fait ses preuves comme package manager pour Node.js.</li>
<li>Pas besoin d’installer un nouvel outil, NPM étant installé avec Node.js, ce qui
évite un lot de bugs et de fichiers de configuration supplémentaires (un simple <code>package.json</code> suffit).</li>
<li>Et surtout, toutes les dépendances de votre projet peuvent être gérées via NPM:
votre tasks runner et ses plugins (<a href="/posts/js/introduction-gulp/">Gulp</a>, <a href="/posts/js/premiers-pas-avec-grunt/">Grunt</a> &amp; co), vos <a href="/posts/js/browserify-all-the-things/">modules JavaScript</a>, vos <a href="/posts/js/introduction-au-testing-js-front/">tests</a>
et comme on vient de le voir, vos fichiers de style.</li>
</ul>
<p>Dans le cas où vous n’auriez pas envie de passer par l’étape de publication
(<code>npm publish</code>) pour diverses raisons, sachez qu’il est possible
d’<a href="https://www.npmjs.org/doc/cli/npm-install.html">installer</a> des packages qui ne
sont pas publiés. Mon alternative favorite étant l’utilisation du namespace Github
<code>npm install user/repo --save</code>.<br>Cependant, même si vous ne publiez pas votre module, lorsque vous en modifiez le
code n’oubliez jamais de mettre à jour sa version suivant la convention
<a href="http://semver.org/">semver</a>. Sinon vous serez susceptible d’inclure des bugs dans
les projets qui l’utilisent. Ce qui implique :</p>
<ul>
<li>Mettre à jour le champ “version” de votre <code>package.json</code> (vous pouvez vous
aider des commandes <code>npm version patch</code>, <code>npm version minor</code> et <code>npm version major</code>).</li>
<li>Ajouter un tag git (<code>git tag -a 0.1.0 -m &quot;Initial release&quot;</code>).</li>
</ul>
<p>NPM est une excellente solution pour gérer les dépendences de votre projet, aussi
bien pour vos outils de build, que pour vos assets front-end. Je pense qu’il est
important de garder les choses simples, en commençant par utiliser un seul
gestionnaire de dépendances, dans le cas où celui-ci n’intègre pas d’autres
fonctionnalités que le téléchargement de modules.  </p>
<p>Bye bye Bower!</p>
<p>PS: vous avez besoin d’un module qui n’a pas de package.json ? Pas de problème, <a href="/posts/nodejs/napa-ou-comment-telecharger-package-napa-package-json/">napa est là pour ça</a></p>

]]></description><pubDate>Tue, 06 May 2014 00:00:00 GMT</pubDate><link>http://putaindecode.fr/posts/frontend/npm-comme-package-manager-pour-le-front-end/</link><guid isPermaLink="true">http://putaindecode.fr/posts/frontend/npm-comme-package-manager-pour-le-front-end/</guid></item><item><title>Table ronde #3 - Les bonnes pratiques et organisation CSS/HTML</title><description><![CDATA[
<p>Mardi 29 avril s’est déroulée la troisième table ronde qui est finalement la première sous le nom de <strong>{p!}</strong>. Une petite explication s’impose étant donné que nous allons en faire de plus en plus et que je souhaite vraiment vous faire un compte rendu sur chacun de ces évènements.</p>
<h2 id="preambule"><a class="putainde-Title-anchor" href="#preambule">#</a>Préambule</h2><p>Partant du constat qu’il est difficile d’apprendre et d’échanger en conférence du fait du manque du niveau assez élevé (trop de gens avec un niveau différent, il faut forcément s’aligner) et à sens unique (une personne parle, les autres écoutent), nous avons décidé de créer des tables rondes où un fil conducteur est suivi amenant à débattre, échanger, affirmer.</p>
<p>Attention, je ne dis pas que les conférences ne servent à rien mais à mon sens elles sont trop magistrales et parfois trop marketing (coucou WebRTC Paris).</p>
<p>Les premières tables rondes n’étaient pas sous le nom de <strong>p!</strong>, elles étaient plutôt de mon initiative (@_kud) dans le but de rassembler des gens que j’appréciais et dont je connaissais le niveau afin de progresser tous ensemble.</p>
<p>Je tiens à vous mettre en garde ici que les propos tenus ne sont pas forcément toujours justifiés, c’est un compte rendu qui synthétise des choix que vous devriez sûrement explorer par vous-même ou au travers de d’autres articles <strong>p!</strong>.</p>
<p>Bon allez, on y va.</p>
<h2 id="ou-"><a class="putainde-Title-anchor" href="#ou-">#</a>Où ?</h2><p>C’est cette fois-ci Altima qui nous a gentillement accueilli dans ses locaux.</p>
<p><a href="http://www.altima.fr">Altima</a> est une agence web composée de 6 bureaux dans le monde, proposant des expertises notamment dans les domaines du design, UX, SEO, in-store, hosting, et développement.</p>
<p>On les remercie bien fort, tout était nickel.</p>
<h2 id="themes"><a class="putainde-Title-anchor" href="#themes">#</a>Thèmes</h2><p>Voici le fil conducteur de la soirée.</p>
<ul>
<li>les resets / normalize, lesquels, pourquoi, quand ?</li>
<li>stratégie de dossiers / fichiers (architecture)</li>
<li>OOCSS, BEM, SMACSS, Atomique etc.</li>
<li>sémantique</li>
<li>accessibilité</li>
<li>les pièges de l’intégration (e.g. display: inline-block)</li>
<li>unités px, rem, em, pt</li>
<li>CSS Frameworks ? lesquels ? pourquoi ? quand ?</li>
</ul>
<h2 id="qui-"><a class="putainde-Title-anchor" href="#qui-">#</a>Qui ?</h2><p>Voici les personnes présentes. Si vous avez d’ailleurs le moindre problème avec ce qui est dit dans cet article, c’est à eux que vous devriez vous adresser. 😊</p>
<table>
<thead>
<tr>
<th>Membres</th>
<th style="text-align:center">Statut</th>
</tr>
</thead>
<tbody>
<tr>
<td><a href="https://twitter.com/_kud">_kud</a></td>
<td style="text-align:center">👮</td>
</tr>
<tr>
<td><a href="https://twitter.com/bloodyowl">bloodyowl</a></td>
<td style="text-align:center">🏠</td>
</tr>
<tr>
<td><a href="https://twitter.com/yannickc">yannickc</a></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td><a href="https://twitter.com/dhoko_">dhoko_</a></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td><a href="https://twitter.com/philippebarbosa">philippebarbosa</a></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td><a href="https://twitter.com/tchak13">tchak13</a></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td><a href="https://twitter.com/remitbri">remitbri</a></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td><a href="https://twitter.com/dizwix">dizwix</a></td>
<td style="text-align:center"></td>
</tr>
</tbody>
</table>
<h2 id="c-est-parti"><a class="putainde-Title-anchor" href="#c-est-parti">#</a>C’est parti</h2><h3 id="reset-normalize"><a class="putainde-Title-anchor" href="#reset-normalize">#</a>Reset / Normalize</h3><p>Bon, alors, commençons. Ce sont évidemment les resets / normalizes qui débutent étant donné que c’est la base de toute intégration.</p>
<p>Pour rappel, la différence entre un normalize et un reset est simple.</p>
<ul>
<li>Le <strong>normalize</strong> fait en sorte que les styles de base se ressemblent sur tous les navigateurs.</li>
<li>Le <strong>reset</strong> va plus loin que ça puisqu’il s’occupe d’écraser totalement les styles par défaut pour finalement n’avoir aucun style sur votre page lorque vous débutez votre intégration.</li>
</ul>
<p>Bref, peu ou pas de gens dans cette salle utilisent finalement des resets. Les resets sont uniquement intéressants lors d’applications très poussées où le style par défaut des navigateurs n’est pas du tout pertinent. Mais attention, ceci peut être dangereux car il est plus compliqué de retrouver le style par défaut d’un navigateur que de le supprimer. D’où l’intérêt du normalize.</p>
<p>Je vous indique tout de même les plus connus :</p>
<ul>
<li><a href="http://meyerweb.com/eric/tools/css/reset/">Le reset d’Eric Meyer</a></li>
<li><a href="http://necolas.github.io/normalize.css/">Le normalize de Necolas</a></li>
</ul>
<h3 id="strategie-de-fichiers"><a class="putainde-Title-anchor" href="#strategie-de-fichiers">#</a>Stratégie de fichiers</h3><p>Allez, on continue, stratégie de fichiers, où est ce qu’on range tout ce beau monde, comment on s’y retrouve.</p>
<p>On en a discuté un peu, certains préfèrent mettre leurs fichiers dans directement dans le <em>root</em> du projet, moi je préfère le mettre dans un dossier <code>/src</code> afin de bien différencier source, sortie, et fichiers de configuration du projet. Ce qui donne ceci :</p>
<pre><code>.
├── README<span class="hljs-class">.md</span>
├── bin <span class="hljs-comment">// executables</span>
├── dist <span class="hljs-comment">// fichiers finaux</span>
├── src <span class="hljs-comment">// votre application</span>
│   ├── assets <span class="hljs-comment">// fichiers statiques (pas de compilation)</span>
│   ├── collections
│   ├── events
│   ├── glyphicons <span class="hljs-comment">// svg qui seront transformés en font</span>
│   ├── images
│   ├── lib
│   ├── models
│   ├── styles
│   │   ├── base
│   │   ├── shared
│   │   ├── views
│   │   ├── import<span class="hljs-class">.css</span>
│   │   └── shame<span class="hljs-class">.css</span> <span class="hljs-comment">// hack css où il est obligatoire de commenter pourquoi</span>
│   ├── routers
│   ├── templates
│   └── views
│   ├── app<span class="hljs-class">.js</span>
│   ├── bootstrap<span class="hljs-class">.js</span>
|   └── import<span class="hljs-class">.json</span>
├── gulpfile<span class="hljs-class">.js</span>
├── Makefile
├── package.json
</code></pre><h3 id="oocss-bem-smacss-whatever-else"><a class="putainde-Title-anchor" href="#oocss-bem-smacss-whatever-else">#</a>OOCSS, BEM, SMACSS, whatever else</h3><p>Haaaaaaa, grand débat ici. Quelle est la meilleure façon, la meileure manière de maintenir du CSS, de nommer ses classes, d’avoir des conventions de nommage.</p>
<p>Tout d’abord, on s’est tous accordés sur un point : OOCSS, SMACSS, le reste, ça ne marche pas. Ca marche pas parce que ça casse dans certains cas la sémantique, dans d’autres cas, ça revient à faire du style inline mais avec des noms de classes style <code>.left</code> pour un <code>float: left</code>. On a tous plus ou moins essayé et ça devient vite le bordel. On s’est aussi accordés, mais ça c’est évident, qu’avoir une convention de nommage est primordiale pour maintenir correctement du style (ou autre d’ailleurs).
Et surtout il n’est plus nécessaire d’utiliser les IDs. Les IDs doivent servir uniquement dans le cas de la combinaison label/input, mais sinon ils empêchent toute généralisation d’un block.</p>
<p>Il est clair qu’après des années d’intégration, le constat est là, la cascade, ce n’est vraiment pas l’idéal. Cela reste toujours aussi difficile de faire du css generique et/ou maintenable, et c’est justement en quoi BEM permet de résoudre à la fois les problématiques de cascade mais aussi de nommage.</p>
<p>Il y a de nombreux articles sur BEM, sur ses conventions (oui, il peut y avoir plusieurs conventions de nommage, BEM reste plus une méthologie).</p>
<p>En quelques termes, BEM redéfinit la cascade en ne plus l’utilisant comme par exemple : <code>.header .title.is-active</code> mais <code>.header__title--is-active</code>, BEM venant de Block, Element, Modifier. C’est exactement ce que je viens de découper en une seule classe plutôt que 3.</p>
<p>Pour ma part, j’utilise la convention de nommage qui se rapproche très fortément du framework JavaScript “Montage.js” : <code>.org-(js-)-MyBlock-myElement--myModifier</code>.</p>
<p>Je ne souhaite volontairement pas m’étendre sur le sujet car je vous invite à lire <a href="/posts/css/petite-definition-bem/">mon article à ce sujet</a>.</p>
<p>Je vous laisse tout de même deux articles à ce sujet qui présentent plutôt bien le principe (ils sont en anglais).</p>
<ul>
<li><a href="http://www.smashingmagazine.com/2012/04/16/a-new-front-end-methodology-bem/">A New Front-End Methodology: BEM</a></li>
<li><a href="http://webdesign.tutsplus.com/articles/an-introduction-to-the-bem-methodology--cms-19403">An Introduction to the BEM Methodology</a></li>
</ul>
<h3 id="semantique"><a class="putainde-Title-anchor" href="#semantique">#</a>Sémantique</h3><p>On est tous d’accord, faire de la sémantique oui, quand cela ne va pas à l’encontre de la maintenabilité et de la réutilisation de code.</p>
<p>Pour ma part, trop de fois je me suis pris la tête sur la sémantique au point de faire des classes uniques qui ont du sens mais qui <code>@extend</code> (voir pré-processeurs) une classe générique.</p>
<h3 id="accessibilite"><a class="putainde-Title-anchor" href="#accessibilite">#</a>Accessibilité</h3><p>Pour être franc, l’accessibilité a un coût en terme de temps qui n’est jamais négligeable et rentre souvent en conflit avec l’UX d’une personne sans handicap.</p>
<p>Typiquement, imaginons que nous avons un formulaire bancaire, comment faire un boucle uniquement sur ce formulaire (pratique dans le cas d’une personne sans handicap) tout en ne contraignant pas la navigation “classique” ?</p>
<p>Le constat est là aussi, nous sommes tous ici sensibilisés par l’accessibilité, nous essayons d’en faire le plus possible (souvent sur notre temps libre ou entre deux tâches) mais personne n’administre du temps à cela.</p>
<p>Une éventuelle solution a émmergé durant les discussions : pourquoi ne pourrait-on pas connaître d’emblée la situation de l’utilisateur lorsqu’il arrive sur le site ?</p>
<p>Un navigateur dédié à certains handicaps devrait être détectable d’entée de jeu et que l’on puisse nous développeurs faire en conséquence dans ce cas-là.</p>
<p>C’est exactement comme l’histoire de résolution / bande passante. Le W3C nous propose à l’heure actuelle de détecter la résolution pour faire en conséquence sur notre site, or, ce n’est pas du tout le pivot intéressant, c’est surtout la bande passante qui nous permet d’ajuster notre site web.</p>
<p>Bref, comme souvent, le W3C est à la rue, n’avance pas comme le web avance (vite, très vite) et les outils nous font défaut à l’heure actuelle pour répondre à certains besoins. (Note : je ne dis pas qu’ils ne font pas un bon boulot ou que ce n’est pas compliqué, je dis simplement qu’il y a un grand écart entre les besoins et les solutions à l’heure actuelle sur plusieurs domaines : l’accessibilité, la video, la capacité de fournir un site en fonction de la bande passante plutôt que la résolution, etc, etc).</p>
<h3 id="les-pieges-de-l-integration-e-g-display-inline-block-"><a class="putainde-Title-anchor" href="#les-pieges-de-l-integration-e-g-display-inline-block-">#</a>Les pièges de l’intégration (e.g. display: inline-block)</h3><p>Certains cas de l’intégration restent encore du domaine hack plutôt qu’une solution propre et fiable. On ne dit pas que ces hacks sont difficiles ou laborieux mais qu’ils sont encore nécessaires sur des propriétés CSS très communes en 2014.</p>
<p>L’inline-block par exemple, il n’y a malheureusement pas le choix de soit coller les balises, soit minifier le html (ou la partie ayant des inline-block), soit de mettre des commentaires.</p>
<p>Les layouts seront toujours aussi pénibles tant que les flexbox ne sont pas supportés par la majorité des navigateurs du marché. Les 3 solutions principales pour le moment : float, inline-block, table(-cell).</p>
<p>En ce qui concerne le box-sizing, il sauve beaucoup d’intégration. Il faut juste voir le support des navigateurs que vous supportez.
Oh et attention, tous les navigateurs ne font pas 16px de base. Je dis ça si vous utilisez les <code>(r)em</code> (qui sont expliqués juste après).</p>
<p>Enfin, <code>&lt;input type=&quot;number&quot;&gt;</code> est tout buggé sous Firefox. Par exemple, mettre min=”1900” sur cet input et que vous cliquez sur le “+”, vous commencerez à “1” et non “1900”… Je sens que je vais devoir encore faire un ticket. :’)</p>
<h3 id="unites-px-rem-em-pt-"><a class="putainde-Title-anchor" href="#unites-px-rem-em-pt-">#</a>Unités px, rem, em, pt, %</h3><p>Pour être clair, personne n’utilise des <code>pt</code>, les <code>px</code>, faut les oublier de plus en plus, et <code>rem</code> est sûrement le plus simple et le mieux mais dépend malheureusement de vos supports navigateurs où dans quels cas il faut souvent se rabattre sur les <code>em</code>. Le pourcentage est forcément préconisé.</p>
<h3 id="css-frameworks-lesquels-pourquoi-quand-"><a class="putainde-Title-anchor" href="#css-frameworks-lesquels-pourquoi-quand-">#</a>CSS Frameworks ? Lesquels ? Pourquoi ? Quand ?</h3><p><a href="http://foundation.zurb.com/">Foundation</a>, <a href="http://getbootstrap.com/">Bootstrap</a>, <a href="http://purecss.io/">pure</a> sont les plus connus (et peut-être les pires). Il ne vous serviront uniquement que dans le cas d’une <a href="http://fr.wikipedia.org/wiki/Preuve_de_concept">PoC</a> ou une administration de site (<em>back-office</em>).</p>
<p>Par contre, <a href="http://topcoat.io/">topcoat</a> peut se révéler assez intéressant de par sa haute personnalisation et de son <em>BEM-way</em>. Éventuellement <a href="http://inuitcss.com/">inuit.css</a> sinon.</p>
<h3 id="bonus"><a class="putainde-Title-anchor" href="#bonus">#</a>Bonus</h3><p>Lors de cas de contenus affichés via de l’ajax, pensez de plus en plus à faire du “prerender”, c’est à dire que pendant que le contenu se charge, au lieu de mettre des <em>spinners</em>, <em>loaders</em>, <em>toussa</em>, essayez de mettre des visuels qui ressembleront à l’élément final. C’est ce que fait par exemple facebook, et c’est pas mal du tout. Tenez :</p>
<figure>
  <img src="prerender.jpg" alt="facebook prerender">
  <figcaption>Image d’aperçu des posts sur Facebook</figcaption>
</figure>

<p>Voilà pour cette table ronde, j’espère que le compte rendu vous a plu. Il est évident que c’est sûrement plus intéressant en direct, on essayera peut-être par la suite de faire du streaming (live) ou du podcast, à voir.</p>
<p>N’hésitez pas à continuer le débat dans les commentaires.</p>
<p>Pour ma part, j’ai déjà d’autres articles “dans le pipe” (comme disent certains marketeux). Je vous retrouve bientôt ici ou sur Twitter, kiss.</p>

]]></description><pubDate>Mon, 05 May 2014 00:00:00 GMT</pubDate><link>http://putaindecode.fr/posts/table-ronde/bonnes-pratiques-et-organisation-css-html/</link><guid isPermaLink="true">http://putaindecode.fr/posts/table-ronde/bonnes-pratiques-et-organisation-css-html/</guid></item><item><title>Petite définition de BEM</title><description><![CDATA[
<p><strong><a href="http://bem.info">BEM</a></strong> n’est ni une marque de voiture ni un groupe de musique, et encore moins une onomatopée (quoique). C’est plutôt une façon de nommer les classes en CSS, une convention en d’autres termes voire une méthodologie.</p>
<p>Dans cet article, je ne vous expliquerai pas pourquoi il faut préférer BEM à une autre convention, je vous explique surtout comment l’utiliser.</p>
<p><strong>BEM</strong> apporte une solution à un problème majeur en informatique : le nommage.</p>
<p>Il n’y a rien de plus compliqué en informatique que de nommer un objet : besoin d’être explicite, ne doit pas être trop générique, ni trop compliqué, ni trop verbeux (ça, ça reste à voir avec BEM…).</p>
<p>Lorsque l’on nomme un objet, une méthode, une fonction, une classe, on se doit d’être avant tout compréhensible. Une personne devant lire votre code doit directement comprendre de quoi vous parlez. Cette personne peut très bien être vous 6 mois, 1 an après. Je pense sincèrement qu’un code clair vaut toute la documentation du monde. Je ne dis pas qu’il ne faut pas documenter mais un code doit être facilement compréhensible, la documentation doit juste apporter un contexte, une situation particulière.</p>
<p>Bref, <strong>BEM</strong> est le sigle pour <em>Block</em>, <em>Element</em>, <em>Modifier</em>. Qu’est-ce que cela veut dire.</p>
<p>Prenons par exemple un site web. Nous avons un ensemble avec dedans deux onglets et en dessous le contenu de chaque onglet.</p>
<p>Nous allons définir ce que sont le <em>block</em>, le ou les <em>elements</em> et les <em>modifiers</em>.</p>
<p>Dans ce cas précis, le <em>block</em> est le conteneur, l’ensemble, ce qui entoure le tout. Appelons-le “Window”.</p>
<p>Nous avons alors aussi les <em>elements</em> suivants : les onglets, que nous allons nommer “Tab”, et le contenu, là où il y a le texte de chaque onglet “Content”.</p>
<p>Comment cela se traduit en <strong>BEM</strong> :</p>
<ul>
<li>Notre <em>block</em> s’appelant “Window” sera alors <code>.Window</code></li>
<li>Nos <em>elements</em> “Tab” seront <code>.Window-tab</code></li>
<li>Notre <em>element</em> “Content” sera <code>.Window-content</code></li>
</ul>
<p>Jusque là, cela devrait aller :</p>
<pre><code class="lang-css"><span class="hljs-class">.Window</span> <span class="hljs-rules">{

<span class="hljs-rule">}</span></span>

  <span class="hljs-class">.Window-tab</span> <span class="hljs-rules">{

  <span class="hljs-rule">}</span></span>

  <span class="hljs-class">.Window-content</span> <span class="hljs-rules">{

  <span class="hljs-rule">}</span></span>
</code></pre>
<p>Ce qui revient de manère générique à :</p>
<pre><code class="lang-css">.<span class="hljs-keyword">Block</span> <span class="hljs-list">{

}</span>

  .<span class="hljs-keyword">Block</span>-element <span class="hljs-list">{

  }</span>
</code></pre>
<p>Oui, je vous conseille d’indenter votre code afin de grouper vos classes.</p>
<p>Maintenant, nous allons définir ce qu’est un <em>modifier</em>. Un <em>modifier</em> change l’état de l’élément, il peut s’appliquer aussi bien sur un <em>block</em>, qu’un <em>element</em>.</p>
<p>Si par exemple je souhaite mettre en actif un onglet (le mettre en avant car séléctionné), je ferai alors <code>.Window-tab--active</code>, soit :</p>
<pre><code class="lang-css"><span class="hljs-class">.Window</span> <span class="hljs-rules">{

<span class="hljs-rule">}</span></span>

  <span class="hljs-class">.Window-tab</span> <span class="hljs-rules">{
    <span class="hljs-rule"><span class="hljs-attribute">color</span>:<span class="hljs-value"> gray</span></span>;
  <span class="hljs-rule">}</span></span>

    <span class="hljs-class">.Window-tab--active</span> <span class="hljs-rules">{
      <span class="hljs-rule"><span class="hljs-attribute">color</span>:<span class="hljs-value"> black</span></span>;
    <span class="hljs-rule">}</span></span>

  <span class="hljs-class">.Window-content</span> <span class="hljs-rules">{

  <span class="hljs-rule">}</span></span>
</code></pre>
<p>J’aimerais aussi afficher ou non le contenu. Pour cela, je vais lui rajouter un <em>modifier</em></p>
<pre><code class="lang-css"><span class="hljs-class">.Window</span> <span class="hljs-rules">{

<span class="hljs-rule">}</span></span>

  <span class="hljs-class">.Window-tab</span> <span class="hljs-rules">{
    <span class="hljs-rule"><span class="hljs-attribute">color</span>:<span class="hljs-value"> gray</span></span>;
  <span class="hljs-rule">}</span></span>

    <span class="hljs-class">.Window-tab--active</span> <span class="hljs-rules">{
      <span class="hljs-rule"><span class="hljs-attribute">color</span>:<span class="hljs-value"> black</span></span>;
    <span class="hljs-rule">}</span></span>

  <span class="hljs-class">.Window-content</span> <span class="hljs-rules">{
  <span class="hljs-rule">}</span></span>

  <span class="hljs-class">.Window-content--hidden</span> <span class="hljs-rules">{
    <span class="hljs-rule"><span class="hljs-attribute">display</span>:<span class="hljs-value"> none</span></span>;
  <span class="hljs-rule">}</span></span>
</code></pre>
<p>J’aurais très bien pu inverser et dire que par défaut le contenu est caché et je lui rajoute la classe <code>.Window-tab--active</code> pour l’afficher (<code>display: block</code>) mais lorsqu’il s’agit de cacher ou de faire appaître des éléments, je vous conseille vivement de plutôt ajouter un <em>modifier</em> qui cache les éléments, car cela évite de se prendre la tête sur quel <code>display</code> mettre par défaut. Là, vous mettez un <code>display: none</code> et voilà, qu’importe si celui de base est un <code>inline</code>, <code>inline-block</code>, <code>table-cell</code> ou autre.</p>
<p>Du coup, nous avons maintenant nos différents types de classes. Cela se résume de manière générique à :</p>
<pre><code class="lang-css">.<span class="hljs-keyword">Block</span> <span class="hljs-list">{

}</span>

  .<span class="hljs-keyword">Block</span>--modifier <span class="hljs-list">{

  }</span>

  .<span class="hljs-keyword">Block</span>-element <span class="hljs-list">{

  }</span>

    .<span class="hljs-keyword">Block</span>-element--modifier <span class="hljs-list">{

    }</span>
</code></pre>
<p>Ce qui donne <code>.Block-element--modifier</code> (notre <strong>BEM</strong>).</p>
<p>Parlons maintenant du cas des termes multiples dans chaque partie. Voici comment cela se traduit.</p>
<p><code>.MyBlock-myElement--myModifier</code></p>
<p>Les <em>blocks</em> sont en “PascalCase” (ou UpperCamelCase), les <em>elements</em> et <em>modifiers</em> sont en “camelCase” (ou lowerCamelCase). Nous séparons le <em>block</em> de l’élément par “-“ et le <em>block</em> ou l’ <em>element</em> d’un <em>modifier</em> par “—“.</p>
<p>Maintenant, vous savez tout sur <strong>BEM</strong>. Sachez qu’il existe tout de même plusieurs conventions de <strong>BEM</strong>. Celle que je vous ai apprise là est la norme de <strong>montage.js</strong> mais il y en a d’autres par exemple qui n’utilisent pas les majuscules et font ce genre de choses : <code>.my-block__my-element--my-modifier</code>. Il s’avère que c’est la <a href="http://bem.info/method/definitions/#naming-for-independent-css-classes">convention pseudo-officielle</a>.</p>
<p>L’inconvénient de ceci est que c’est moins lisible au premier abord qui est quoi, et de plus, les <code>_</code> ne permettent pas de sélectionner facilement un terme en <em>double-cliquant</em> dessus.</p>
<p>Deux petites choses avant de partir.</p>
<p>Dans le but d’éviter de vous faire écraser vos propriétés par quelqu’un d’autre (une bibliothèque, un <em>SDK</em>), je vous conseille de rajouter votre organisation.</p>
<p>Typiquement, ça donne <code>.org-Block-element--modifier</code>. Tout en minuscule et si possible ne pas dépasser les 3 lettres car vous allez devoir le répéter à chaque fois et ça peut être lourd.</p>
<p>La deuxième chose est la classe qui sert de sélecteur en JavaScript. Plutôt que <em>binder</em> un élément via sa classe “CSS” (à chaque classe sa responsabilité), il est nettement préférable de créer une classe spécifique au JavaScript. Cela donne : <code>.org-js-Block-element--modifier</code>. Il suffit simplement de rajouter <code>-js</code> entre l’organisation et le <em>block</em>.</p>
<p>Nous arrivons à la convention suivante : <code>.org[-js]-Block[-element][--modifier]</code></p>
<p>Certains vous diront qu’ils mettent <code>.js-org-</code> mais étant donné que je considère cela comme un <em>namespace</em> global (autant css que js), je préfère mettre l’ <code>org</code> au début.</p>
<p>Voilà, voilà, c’est certes un peu déroutant au début, et ca parait très verbeux mais cela vous permettra d’éviter de nooooooombreux soucis de nommage de classes où vous vous emmèlerez les pinceaux à coup de :</p>
<pre><code class="lang-css"><span class="hljs-class">.footer</span> <span class="hljs-rules">{
  <span class="hljs-rule"><span class="hljs-attribute">text-decoration</span>:<span class="hljs-value"> underline</span></span>;
<span class="hljs-rule">}</span></span>

<span class="hljs-class">.content</span> <span class="hljs-class">.footer</span> <span class="hljs-rules">{
  <span class="hljs-rule"><span class="hljs-attribute">color</span>:<span class="hljs-value"> black</span></span>;
  <span class="hljs-rule"><span class="hljs-attribute">text-decoration</span>:<span class="hljs-value"> none</span></span>; <span class="hljs-comment">/* annule la propriété du précédent sélecteur */</span>
<span class="hljs-rule">}</span></span>
</code></pre>
<p>Ciao les kids.</p>

]]></description><pubDate>Mon, 05 May 2014 00:00:00 GMT</pubDate><link>http://putaindecode.fr/posts/css/petite-definition-bem/</link><guid isPermaLink="true">http://putaindecode.fr/posts/css/petite-definition-bem/</guid></item><item><title>Introduction au testing js front</title><description><![CDATA[
<p>Les tests automatisés en front-end ont longtemps été ignorés,
et le sont encore trop.</p>
<p>Écrire des tests peut paraître chiant, mais le temps qu’ils rapportent
compense largement celui que l’on passe à les écrire.</p>
<h2 id="ecrire-du-js-testable"><a class="putainde-Title-anchor" href="#ecrire-du-js-testable">#</a>Écrire du js testable</h2><p>Prenons un exemple simple et moche :</p>
<pre><code class="lang-javascript"><span class="hljs-comment">//app.js</span>
;(<span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">()</span></span>{

  <span class="hljs-keyword">var</span> cart = $(<span class="hljs-string">"#cart"</span>)
  <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">addToCart</span><span class="hljs-params">(id)</span></span>{
    <span class="hljs-keyword">var</span> element = $(<span class="hljs-string">"&lt;li&gt;&lt;/li&gt;"</span>)
    element.html(catalog[id])
    cart.append(element)
  }

  $(<span class="hljs-string">".js-updateCart"</span>)
    .on(<span class="hljs-string">"click"</span>, <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">(eventObject)</span></span>{
      addToCart($(<span class="hljs-keyword">this</span>).data(<span class="hljs-string">"id"</span>))
    })

})()
</code></pre>
<p>Tester ce code est particulièrement lourd, pour plusieurs raisons :</p>
<ul>
<li>les functions à tester ne sont pas accessibles</li>
<li>on doit simuler un <code>click</code> pour tester un comportement logique.</li>
<li>on doit créer un element et modifier sont <code>data-id</code> à chaque cas souhaité.</li>
<li>pour tester <code>addToCart</code> on doit aller regarder dans le DOM.</li>
</ul>
<h3 id="1-rendez-accessibles-vos-methodes-au-test-runner"><a class="putainde-Title-anchor" href="#1-rendez-accessibles-vos-methodes-au-test-runner">#</a>1. Rendez accessibles vos méthodes au test runner</h3><p>Vous pouvez utiliser un namespace adéquat.</p>
<pre><code class="lang-javascript"><span class="hljs-keyword">var</span> app = <span class="hljs-built_in">window</span>.app = {}
app.cart = {}
app.cart.addToCart = <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">()</span></span>{ <span class="hljs-comment">/* … */</span> }
</code></pre>
<p>Mais ne souhaitez probablement pas rendre vos méthodes accessibles à la console.</p>
<p>Utilisez un module-system : <a href="http://browserify.org">browserify</a> ou
<a href="http://requirejs.org">requirejs</a> (si vous n’avez pas besoin de chargement
conditionnel et souhaitez créer un bundle par build, utilisez browserify qui
possède une syntaxe beaucoup plus sympathique et une codebase réduite, vous
pourrez même <code>require</code> depuis un module npm
<a href="/posts/js/browserify-all-the-things/">comme on vous l’explique dans un article dédié</a>).</p>
<pre><code class="lang-javascript"><span class="hljs-keyword">var</span> $ = <span class="hljs-built_in">require</span>(<span class="hljs-string">"jquery"</span>) <span class="hljs-comment">// oh, un module npm</span>

<span class="hljs-built_in">module</span>.exports = {
  element : $(<span class="hljs-string">"#cart"</span>),
  addToCart : <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">()</span></span>{
    <span class="hljs-comment">/* … */</span>
  }
}
</code></pre>
<p>Vous pourrez ainsi séparer proprement votre application en modules et les tester individuellement.</p>
<h3 id="2-oui-mais-les-modules-interdependants-alors-"><a class="putainde-Title-anchor" href="#2-oui-mais-les-modules-interdependants-alors-">#</a>2. Oui, mais les modules interdépendants alors ?</h3><p>Là, ça devient un peu plus tricky.
Ce que je conseille à titre personnel c’est d’utiliser des events
pour faire communiquer les différentes parties de l’application.</p>
<p>Cela permet d’éviter d’utiliser des mocks d’autres parties de l’application partout.</p>
<p>Par exemple, si je souhaite tester le fait qu’un click sur <code>.js-updateCart</code>
déclanchera bien <code>updateCart</code> :</p>
<pre><code class="lang-javascript"><span class="hljs-comment">//view.js</span>

<span class="hljs-comment">// view est une petite class qui route les events</span>
<span class="hljs-comment">// en rendant les listeners accessibles aux tests</span>
<span class="hljs-comment">// vous pouvez très facilement en concevoir une</span>
<span class="hljs-comment">// à votre goût en quelques lignes de code</span>
<span class="hljs-keyword">var</span> view = <span class="hljs-built_in">require</span>(<span class="hljs-string">"../lib/view"</span>)

<span class="hljs-comment">// eventbus est l'event bus de l'application, il orchestre</span>
<span class="hljs-comment">// la communication entre les différents modules</span>
<span class="hljs-keyword">var</span> eventbus = <span class="hljs-built_in">require</span>(<span class="hljs-string">"../eventbus"</span>)

<span class="hljs-keyword">var</span> $ = <span class="hljs-built_in">require</span>(<span class="hljs-string">"jquery"</span>)

<span class="hljs-built_in">module</span>.exports = view.extend({
  element : <span class="hljs-built_in">document</span>.body,
  events : [
    {
      type : <span class="hljs-string">"click"</span>,
      selector : <span class="hljs-string">".js-addToCart"</span>,
      listener : <span class="hljs-string">"addToCart"</span>
    }
  ],
  addToCart : <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">(eventObject)</span></span>{
    <span class="hljs-keyword">var</span> target = eventObject.currentTarget
    <span class="hljs-keyword">var</span> id = $(target).data(<span class="hljs-string">"id"</span>)
    eventbus.fire(<span class="hljs-string">"addToCart"</span>, {
      id : id
    })
  }
})
</code></pre>
<p>et je n’aurais qu’à écouter cet event depuis <code>cart</code> :</p>
<pre><code class="lang-javascript"><span class="hljs-comment">// cart.js</span>
<span class="hljs-keyword">var</span> eventbus = <span class="hljs-built_in">require</span>(<span class="hljs-string">"../eventbus"</span>)
<span class="hljs-keyword">var</span> catalog = <span class="hljs-built_in">require</span>(<span class="hljs-string">"../catalog"</span>)

<span class="hljs-built_in">module</span>.exports = {
  initialize : <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">()</span></span>{
    <span class="hljs-keyword">this</span>._addToCart = <span class="hljs-keyword">this</span>.addToCart.bind(<span class="hljs-keyword">this</span>)
    eventbus.listen(<span class="hljs-string">"addToCart"</span>, <span class="hljs-keyword">this</span>._addToCart)
  },
  release : <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">()</span></span>{
    eventbus.stopListening(<span class="hljs-string">"addToCart"</span>, <span class="hljs-keyword">this</span>._addToCart)
  },
  addToCart : <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">(eventObject)</span></span>{
    <span class="hljs-comment">// et on a eventObject.id</span>
    <span class="hljs-keyword">this</span>.products.push(catalog[eventObject.currentTarget.data(<span class="hljs-string">"id"</span>)])
  }
}
</code></pre>
<p>Grâce à cette architecture, je vais pouvoir tester individuellement
les deux modules.</p>
<pre><code class="lang-javascript"><span class="hljs-comment">// view.test.js</span>

<span class="hljs-keyword">var</span> tape = <span class="hljs-built_in">require</span>(<span class="hljs-string">"tape"</span>)
<span class="hljs-keyword">var</span> view = <span class="hljs-built_in">require</span>(<span class="hljs-string">"../app/view"</span>)
<span class="hljs-keyword">var</span> eventbus = <span class="hljs-built_in">require</span>(<span class="hljs-string">"../eventbus"</span>)
<span class="hljs-keyword">var</span> $ = <span class="hljs-built_in">require</span>(<span class="hljs-string">"jquery"</span>)

tape(<span class="hljs-string">"view"</span>, <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">(test)</span></span>{
  test.plan(<span class="hljs-number">1</span>)
  <span class="hljs-keyword">var</span> element = $(<span class="hljs-string">"&lt;div&gt;&lt;/div&gt;"</span>)
  element.data(<span class="hljs-string">"id"</span>, <span class="hljs-number">1</span>)
  <span class="hljs-comment">// on teste facilement l'envoi</span>
  eventbus.listen(<span class="hljs-string">"addToCart"</span>, <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">(eventObject)</span></span>{
    test.equal(eventObject.id, <span class="hljs-number">1</span>)
  })
  view.addToCart({
    currentTarget : element
  })
})
</code></pre>
<pre><code class="lang-javascript"><span class="hljs-comment">// cart.test.js</span>

<span class="hljs-keyword">var</span> tape = <span class="hljs-built_in">require</span>(<span class="hljs-string">"tape"</span>)
<span class="hljs-keyword">var</span> cart = <span class="hljs-built_in">require</span>(<span class="hljs-string">"../app/cart"</span>)
<span class="hljs-keyword">var</span> eventbus = <span class="hljs-built_in">require</span>(<span class="hljs-string">"../eventbus"</span>)
<span class="hljs-keyword">var</span> catalog = <span class="hljs-built_in">require</span>(<span class="hljs-string">"../catalog"</span>)

tape(<span class="hljs-string">"cart"</span>, <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">(test)</span></span>{
  cart.initialize()
  eventbus.fireSync(<span class="hljs-string">"addToCart"</span>, {id:<span class="hljs-number">1</span>})
  test.deepEqual(
    cart[<span class="hljs-number">0</span>],
    catalog[<span class="hljs-number">1</span>],
    <span class="hljs-string">"receives addToCart event"</span>
  )
  test.end()
})
</code></pre>
<h2 id="tester-tous-les-cas-possibles"><a class="putainde-Title-anchor" href="#tester-tous-les-cas-possibles">#</a>Tester tous les cas possibles</h2><p>Ce sont souvent les edge-cases qui nous font nous arracher les cheveux.
Pour pallier ces soucis, tester en profondeur est essentiel.</p>
<p>Prenons un exemple, une méthode qui teste si la valeur qu’on lui passe est
une <code>string</code>.</p>
<p>On serait tenté de simplement tester les résultats positifs de cette façon :</p>
<pre><code class="lang-javascript">tape(<span class="hljs-string">"type.isString on strings"</span>, <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">(test)</span></span>{
  test.equal(<span class="hljs-built_in">type</span>.isString(<span class="hljs-string">""</span>), <span class="hljs-keyword">true</span>)
  test.<span class="hljs-keyword">end</span>()
})
</code></pre>
<p>Or, si par mégarde ma méthode <code>isString</code> se révèle être :</p>
<pre><code class="lang-javascript">type.isString = <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">(value)</span> </span>{
  <span class="hljs-keyword">return</span> <span class="hljs-keyword">typeof</span> value == <span class="hljs-string">"string"</span>
}
</code></pre>
<p>on ne vérifie pas le cas <code>type.isString(new String(&quot;&quot;))</code>.</p>
<p>Du coup, des tests complets :</p>
<pre><code class="lang-javascript">tape(<span class="hljs-string">"type.isString on strings"</span>, <span class="hljs-keyword">function</span>(test){
  test.equal(<span class="hljs-class"><span class="hljs-keyword">type</span>.<span class="hljs-title">isString</span></span>(<span class="hljs-string">""</span>), <span class="hljs-keyword">true</span>)
  test.equal(<span class="hljs-class"><span class="hljs-keyword">type</span>.<span class="hljs-title">isString</span></span>(<span class="hljs-keyword">new</span> String(<span class="hljs-string">""</span>)), <span class="hljs-keyword">false</span>)
  test.<span class="hljs-keyword">end</span>()
})
</code></pre>
<p>permettent ici d’identifier qu’en réalité on a besoin de :</p>
<pre><code class="lang-javascript"><span class="hljs-typedef"><span class="hljs-keyword">type</span>.isString = function<span class="hljs-container">(<span class="hljs-title">value</span>)</span> <span class="hljs-container">{
  <span class="hljs-title">return</span> <span class="hljs-type">Object</span>.<span class="hljs-title">prototype</span>.<span class="hljs-title">toString</span>.<span class="hljs-title">call</span>(<span class="hljs-title">value</span>) == "[<span class="hljs-title">object</span> <span class="hljs-type">String</span>]"
}</span></span>
</code></pre>
<p>Et c’est à la force des résultats de tests que vous identifierez rapidement
vous familiariserez à tous ces edge-cases.</p>
<p>À chaque correctif de bug, ajoutez des tests (mais ça, vous le saviez déjà).</p>
<h2 id="cross-browser-testing"><a class="putainde-Title-anchor" href="#cross-browser-testing">#</a>Cross-browser testing</h2><p>À l’heure actuelle, où l’on se trouve notamment très souvent avec du
feature testing.
Pour le tester complètement, on doit se servir de vrais navigateurs :
un headless (certes, très pratique) comme <a href="http://phantomjs.org">phantomjs</a>
ne permettra pas d’obtenir 100% de coverage.</p>
<pre><code class="lang-javascript"><span class="hljs-tag">var</span> supportsAnimationFrame =
  !!(
    win<span class="hljs-class">.requestAnimationFrame</span> ||
    win<span class="hljs-class">.webkitRequestAnimationFrame</span> ||
    win<span class="hljs-class">.mozRequestAnimationFrame</span> ||
    win<span class="hljs-class">.ORequestAnimationFrame</span> ||
    <span class="hljs-comment">// vous avez fait une faute de frappe,</span>
    <span class="hljs-comment">// et mis un `O` majuscule, seul un</span>
    <span class="hljs-comment">// test sur les version concernées d'Opera</span>
    <span class="hljs-comment">// vous permettront de l'identifier</span>
    win<span class="hljs-class">.msRequestAnimationFrame</span>
  )
</code></pre>
<p>De plus, vous pouvez par habitude être tenté d’utiliser un
<code>Array.prototype.forEach</code> alors que votre scope navigateur inclut
IE8; seuls des tests sur un vrai browser vous permettront d’identifier le souci.</p>
<p>Je vous conseille fortement testling, très simple à intégrer dans vos
modules, et gratuit pour tout projet open-source.</p>
<p>Dans le <code>package.json</code> :</p>
<pre><code class="lang-json">{
  "<span class="hljs-attribute">testling</span>": <span class="hljs-value">{
    "<span class="hljs-attribute">files</span>": <span class="hljs-value"><span class="hljs-string">"test/**/*.js"</span></span>,
    "<span class="hljs-attribute">browsers</span>": <span class="hljs-value">[
      <span class="hljs-string">"ie/9..latest"</span>,
      <span class="hljs-string">"chrome/22..latest"</span>,
      <span class="hljs-string">"firefox/16..latest"</span>,
      <span class="hljs-string">"safari/6..latest"</span>,
      <span class="hljs-string">"opera/11.0..latest"</span>,
      <span class="hljs-string">"iphone/6..latest"</span>,
      <span class="hljs-string">"ipad/6..latest"</span>,
      <span class="hljs-string">"android-browser/latest"</span>
    ]
  </span>}
</span>}
</code></pre>
<p>Et ajouter un webhook dans l’admin de votre repository GitHub pointant vers</p>
<blockquote>
<p><a href="http://git.testling.com">http://git.testling.com</a></p>
</blockquote>
<p>Vous pouvez l’utiliser avec tape (son test harness par défaut)
Mocha, QUnit et n’importe quelle bibliothèque
de test supportant <code>TAP</code> comme indiqué sur
<a href="https://ci.testling.com/guide/custom_libraries">le site de testling</a>.</p>
<p>Vous trouverez aussi des alternatives populaires
<a href="http://www.browserstack.com">similaires</a>,
ou ayant <a href="http://karma-runner.github.io">une approche différente</a>.</p>
<p>Par ailleurs, si dans votre code il existe des variations entre les navigateurs,
vous pouvez utiliser du test conditionnel :</p>
<pre><code class="lang-javascript"><span class="hljs-keyword">if</span>(typeof {}.__proto__ == <span class="hljs-string">"object"</span>){
  test.equal(<span class="hljs-keyword">list</span>.__proto__ === <span class="hljs-keyword">Array</span>.prototype, <span class="hljs-keyword">false</span>, <span class="hljs-string">"__proto__ isn't Array.prototype"</span>)
} <span class="hljs-keyword">else</span> {
  test.equal(<span class="hljs-keyword">list</span> <span class="hljs-keyword">instanceof</span> <span class="hljs-keyword">Array</span>, <span class="hljs-keyword">false</span>, <span class="hljs-string">"Isn't a window Array"</span>)
}
</code></pre>
<p>Happy testing!</p>
<pre><code class="lang-bash">$ testling

TAP version <span class="hljs-number">13</span>
<span class="hljs-preprocessor"># tests</span>
ok <span class="hljs-number">1</span> bisous

<span class="hljs-number">1.</span><span class="hljs-number">.1</span>
<span class="hljs-preprocessor"># tests 1</span>
<span class="hljs-preprocessor"># pass  1</span>

<span class="hljs-preprocessor"># ok</span>
</code></pre>

]]></description><pubDate>Thu, 01 May 2014 00:00:00 GMT</pubDate><link>http://putaindecode.fr/posts/js/introduction-au-testing-js-front/</link><guid isPermaLink="true">http://putaindecode.fr/posts/js/introduction-au-testing-js-front/</guid></item><item><title>Introduction à Gulp</title><description><![CDATA[
<p>Vous commencez tous à connaitre les <em>tasks runners</em>, ces outils qui permettent
d’automatiser les tâches de développement récurrentes.
Personnellement
 <a href="http://moox.io/slides/2013/grunt-before-after/">je n’ai</a>
 <a href="http://www.24joursdeweb.fr/2013/automatisez-votre-workflow-front-end/">pas arrêté</a>
 <a href="http://moox.io/slides/2014/introduction-gulp/">d’en parler</a>
 depuis que
 <a href="/posts/js/premiers-pas-avec-grunt/">Grunt</a>
 à déterré cette vielle problématique, assez récente pour le développement Web côté front end.</p>
<p>Il faut avouer que de par l’évolution du développement Web, côté front end,
on voit beaucoup de personnes qui n’ont pas de vraies bases de développeur.
Je veux dire par là non pas que ces personnes sont incompétentes, mais plutôt
qu’il manque parfois la bonne flemme du développeur, celle qui le pousse à <strong>développer</strong>
des solutions techniques pour mieux développer des produits.
Il manque un peu <a href="http://fr.wiktionary.org/wiki/algorithmie">d’algorithmie</a>
dans les veines, de curiosité et d’amour du risque.
Ce n’est pas en restant dans sa zone de confort qu’on va de l’avant. Enfin si vous
avez des exemples contraires, je suis preneur.
Mais tout cela doit provenir du fait que pas mal de métiers dans le web sont nouveaux,
dont celui de « développeur Web front end » et que du coup, peu de personnes ont
initialement suivi des formations appropriés (pour ma part je proviens d’une
formation <em>d’analyste-programmeur</em>, conception et développement software quoi).
Je remarque que niveau back end il y a beaucoup moins de lacunes, du fait que
les problématiques gérées de ce côté sont (il me semble) moins nouvelles.</p>
<p>Bref. Je ne vais pas m’éterniser sur une intro du pourquoi on met en place un task
runner, ni faire une comparaison entre Make, Rake, Cake, Jake, Grunt, Brunch
et Broccoli.
Rentrons dans le vif. Parlons Gulp.</p>
<h1 id="pourquoi-gulp"><a class="putainde-Title-anchor" href="#pourquoi-gulp">#</a>Pourquoi Gulp</h1><p>Je vais faire court. Pour faire simple, son point fort réside dans le fait qu’il utilise des
<a href="http://dailyjs.com/2012/09/10/streams/">streams</a> (tl;dr: un flux de données - en mémoire)
et qu’il limite au maximum l’utilisation de fichiers.
Au point qu’il existe une <a href="https://github.com/godaddy/gulp-header/issues/4#issuecomment-32111457">police Gulp</a>
pour vous dire.
Si vous voulez en savoir plus sur les streams, n’hésitez pas à lire l’article de
Nicolas Froidure <a href="http://www.insertafter.com/articles-gulp_vs_grunt.html">Gulp remplacera-t-il Grunt ?</a>
qui contient une partie explicative sur les streams.</p>
<p>Dans la pratique cela évite d’avoir un gruntfile qui, si on imagine une task
sass -&gt; autoprefixer -&gt; csso, passe <a href="/posts/css/mise-en-place-autoprefixer/#autoprefixer-avec-grunt">3 fois par des lectures/écritures sur le système
de fichiers</a>.</p>
<figure>
  <img src="http://jaysoo.ca/images/grunt-flow-2.png" alt="">
  <figcaption>Sans stream</figcaption>
</figure>

<p>Et du coup au lieu d’avoir un fichier de conf d’une soixantaine de lignes, on arrive
à avoir <a href="http://putaindecode.fr/posts/css/mise-en-place-autoprefixer/#autoprefixer-avec-gulp">quelque chose de concis</a>
(une vingtaine de ligne seulement).</p>
<figure>
  <img src="http://jaysoo.ca/images/gulp-flow.png" alt="">
  <figcaption>Avec stream</figcaption>
</figure>

<h2 id="installation"><a class="putainde-Title-anchor" href="#installation">#</a>Installation</h2><p>Pour avoir la commande globale sur le système (comme grunt-cli) :</p>
<pre><code class="lang-bash">$ npm <span class="hljs-tag">i</span> -g gulp
</code></pre>
<p>Ensuite dans votre projet :</p>
<pre><code class="lang-bash">$ npm <span class="hljs-tag">i</span> -D gulp gulp-util gulp-plumber gulp-WHATEVER
</code></pre>
<p><em>Note : <code>npm i -D</code> == <code>npm install --save-dev</code>, c’est cadeau.</em></p>
<p>Bon dans mon exemple j’ai mis un peu n’importe quoi, donc on va faire un mini workflow de hipster hacker.</p>
<h2 id="utilisation"><a class="putainde-Title-anchor" href="#utilisation">#</a>Utilisation</h2><p>On part avec une tâche très simple : pré-processeur CSS <a href="http://www.myth.io">Myth</a> et
optimisation avec <a href="https://github.com/css/csso">CSSO</a>.</p>
<pre><code class="lang-bash"><span class="hljs-variable">$ </span>mkdir putaindegulp &amp;&amp; cd putaindegulp
<span class="hljs-variable">$ </span>npm init
<span class="hljs-variable">$ </span>npm i -<span class="hljs-constant">D </span>gulp gulp-util gulp-plumber gulp-myth gulp-csso minimist
</code></pre>
<pre><code class="lang-js"><span class="hljs-keyword">var</span> gulp = <span class="hljs-built_in">require</span>(<span class="hljs-string">"gulp"</span>)
<span class="hljs-keyword">var</span> gutil = <span class="hljs-built_in">require</span>(<span class="hljs-string">"gulp-util"</span>)
<span class="hljs-keyword">var</span> plumber = <span class="hljs-built_in">require</span>(<span class="hljs-string">"gulp-plumber"</span>)
<span class="hljs-keyword">var</span> myth = <span class="hljs-built_in">require</span>(<span class="hljs-string">"gulp-myth"</span>)
<span class="hljs-keyword">var</span> csso = <span class="hljs-built_in">require</span>(<span class="hljs-string">"gulp-csso"</span>)
<span class="hljs-keyword">var</span> options = <span class="hljs-built_in">require</span>(<span class="hljs-string">"minimist"</span>)(process.argv.slice(<span class="hljs-number">2</span>))

gulp.task(<span class="hljs-string">"styles"</span>, <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">()</span> </span>{
  gulp.src(<span class="hljs-string">"./src/css/*.css"</span>)
    .pipe(options.production ? plumber() : gutil.noop())
    .pipe(myth({sourcemap: !options.production}))
    .pipe(options.production ? csso() : gutil.noop())
    .pipe(gulp.dest(<span class="hljs-string">"./dist/css/"</span>))
})

gulp.task(<span class="hljs-string">"default"</span>, [<span class="hljs-string">"styles"</span>], <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">()</span> </span>{
  gulp.watch(<span class="hljs-string">"./src/css/**/*"</span>, [<span class="hljs-string">"styles"</span>])
})
</code></pre>
<p>Voilà c’est tout. Et heureusement.</p>
<p>Bon, on se refait l’exemple commenté :</p>
<pre><code class="lang-js"><span class="hljs-comment">// bah là ok, on est obligé d'y passer pour avoir l'API Gulp</span>
<span class="hljs-keyword">var</span> gulp = <span class="hljs-built_in">require</span>(<span class="hljs-string">"gulp"</span>)

  <span class="hljs-comment">// Ça c'est optionnel, c'est pour avoir (entre autres la méthode noop())</span>
  <span class="hljs-comment">// je reviens dessus après</span>
  <span class="hljs-comment">// https://github.com/gulpjs/gulp-util</span>
<span class="hljs-keyword">var</span> gutil = <span class="hljs-built_in">require</span>(<span class="hljs-string">"gulp-util"</span>)

  <span class="hljs-comment">// Là on a Mario le plombier qui fixe la tuyauterie foireuse.</span>
  <span class="hljs-comment">// Ce plugin patch le problème de stream avec node.js qui fait que tout le process</span>
  <span class="hljs-comment">// explose à la moindre erreur (pas pratique en cas de watch par exemple)</span>
  <span class="hljs-comment">// en gros, il remplace la méthode pipe et attrape les erreurs pour les ressortir gentiment</span>
  <span class="hljs-comment">// https://gist.github.com/floatdrop/8269868</span>
<span class="hljs-keyword">var</span> plumber = <span class="hljs-built_in">require</span>(<span class="hljs-string">"gulp-plumber"</span>)

  <span class="hljs-comment">// Ici, rien de magique, du plugin en veux-tu en voilà</span>
<span class="hljs-keyword">var</span> myth = <span class="hljs-built_in">require</span>(<span class="hljs-string">"gulp-myth"</span>)
<span class="hljs-keyword">var</span> csso = <span class="hljs-built_in">require</span>(<span class="hljs-string">"gulp-csso"</span>)

  <span class="hljs-comment">// ici on chope les options de la ligne de commande</span>
  <span class="hljs-comment">// exemple: pour avoir options.production à true,</span>
  <span class="hljs-comment">// il suffit de faire `gulp --production`</span>
<span class="hljs-keyword">var</span> options = <span class="hljs-built_in">require</span>(<span class="hljs-string">"minimist"</span>)(process.argv.slice(<span class="hljs-number">2</span>))

<span class="hljs-comment">// Définition d'une tâche, un nom et une fonction.</span>
<span class="hljs-comment">// Ce qui est pratique c'est le fait de pouvoir mettre ce qu'on veut</span>
<span class="hljs-comment">// y compris un console.log() ^^</span>
<span class="hljs-comment">// un autre paramètre peut être ajouté avant la fonction, qui permet de préciser</span>
<span class="hljs-comment">// les dépendances (cf task dev plus bas par exemple)</span>
gulp.task(<span class="hljs-string">"styles"</span>, <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">()</span> </span>{

  <span class="hljs-comment">// Ici on attrape les fichiers (glob classique)</span>
  <span class="hljs-comment">// à la racine (on va considérer que nos fichiers finaux ne seront pas dans</span>
  <span class="hljs-comment">// des sous dossiers, réservés aux partials &amp; co)</span>
  gulp.src(<span class="hljs-string">"./src/css/*.css"</span>)

    <span class="hljs-comment">// On utilise plumber que si on build en dev, sinon faut que ça pête, qu'on</span>
    <span class="hljs-comment">// soit prévenu lors d'un build pour la prod</span>
    .pipe(options.production ? plumber() : gutil.noop())

    <span class="hljs-comment">// Et là on pipe nos plugins</span>
    <span class="hljs-comment">// toujours en jouant avec les options si besoin</span>
    .pipe(myth({sourcemap: !options.production}))
    .pipe(options.production ? csso() : gutil.noop())

    <span class="hljs-comment">// Super important, on convertit nos streams en fichiers</span>
    .pipe(gulp.dest(<span class="hljs-string">"./dist/css/"</span>))
})

<span class="hljs-comment">// Ici on a une tâche de dev qui lance un watch APRES avoir exécuté `styles` une fois</span>
gulp.task(<span class="hljs-string">"default"</span>, [<span class="hljs-string">"styles"</span>], <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">()</span> </span>{

  <span class="hljs-comment">// gulp.watch est natif (pas comme avec grunt)</span>
  <span class="hljs-comment">// vous noterez qu'ici par exemple on va surveiller tous les fichiers</span>
  <span class="hljs-comment">// et non pas ceux juste à la racine par exemple</span>
  gulp.watch(<span class="hljs-string">"./src/css/**/*"</span>, [<span class="hljs-string">"styles"</span>])
})

<span class="hljs-comment">// Comme grunt, `gulp` sans argument lancera la tâche `default`.</span>
</code></pre>
<p>Bien entendu, vous avez déjà compris que si vous voulez remplacer Myth par Sass,
c’est l’histoire de 4 secondes.</p>
<h2 id="putain-de-code-approuve-gulp-"><a class="putainde-Title-anchor" href="#putain-de-code-approuve-gulp-">#</a>Putain de Code approuve Gulp.</h2><p>Ici on est carrément fan de Gulp. Il faut bien avouer que
<a href="https://twitter.com/putaindecode/status/460868992396460032">ça va vite</a>
(encore plus appréciable lorsque l’on n’a pas de SSD) et que c’est plaisant à écrire.
Pas de configurations pas spécialement verbeuse et trop espacée.
Avec Gulp on se sent plus libre, moins contraint.
Du coup, <strong>on a carrément fait notre site avec Gulp</strong>
(puis au passage un petit refresh graphique tant qu’à faire).</p>
<p>Pour aller plus loin, vous n’avez qu’à ouvrir notre <a href="https://github.com/putaindecode/putaindecode.fr/blob/master/Gulpfile.js">Gulpfile</a>
et regarder nos <a href="https://github.com/putaindecode/putaindecode.fr/tree/master/tasks">tasks</a>
qui vont de <a href="https://github.com/putaindecode/putaindecode.fr/blob/master/tasks/clean.js">la plus simple</a>
à <a href="https://github.com/putaindecode/putaindecode.fr/blob/master/tasks/contributors.js">la plus compliqué</a>.</p>
<p>Pour voir des tâches plus « real world example » je vous invite à regarder les tasks suivantes :</p>
<ul>
<li><a href="https://github.com/putaindecode/putaindecode.fr/blob/master/tasks/server.js">server</a>,
le server de dev local avec livereload dedans ;</li>
<li><a href="https://github.com/putaindecode/putaindecode.fr/blob/master/tasks/watch.js">watch</a>,
le classique et si simple watcher ;</li>
<li><a href="https://github.com/putaindecode/putaindecode.fr/blob/master/tasks/publish.js">publish</a>,
la tâche pour publier le dossier <code>dist/</code> sur les <a href="https://pages.github.com/">gh-pages</a> ;</li>
<li><a href="https://github.com/putaindecode/putaindecode.fr/blob/master/tasks/icons.js">icons</a>,
qui transforme des SVG en fontes d’icones avec le bout de CSS qui va bien ;</li>
<li><a href="https://github.com/putaindecode/putaindecode.fr/blob/master/tasks/scripts-linting.js">scripts-linting</a>,
qui vérifie la qualité du code ;</li>
<li><a href="https://github.com/putaindecode/putaindecode.fr/blob/master/tasks/scripts.js">scripts</a>,
du <a href="/posts/js/browserify-all-the-things/">browserify</a> pour nos JS côté client ;</li>
<li><a href="https://github.com/putaindecode/putaindecode.fr/blob/master/tasks/stylesheets.js">stylesheets</a>,
notre tâche qui mélange (pour l’instant) Stylus et Rework (suite à une rixe à la récré, on n’a pas réussi à se mettre d’accord, donc chacun à rajouté son morceau) ;</li>
</ul>
<p>Bien entendu, si vous ne comprenez pas certaines parties, n’hésitez pas à
<a href="https://github.com/putaindecode/putaindecode.fr/issues/new">ouvrir une issue</a>
pour demander des explications.</p>
<h2 id="vous-reprendrez-bien-un-peu-de-gulp-pardon-"><a class="putainde-Title-anchor" href="#vous-reprendrez-bien-un-peu-de-gulp-pardon-">#</a>Vous reprendrez bien un peu de… Gulp* ! Pardon.</h2><p>Si vous avez encore envie de détails je vous renvoie sur l’article anglais
<a href="http://markgoodyear.com/2014/01/getting-started-with-gulp/">Getting started with gulp</a>
qui détaille tellement bien chaque point que même un anglophobe comprendrait.</p>
<p>Vous avez aussi
<a href="https://github.com/gulpjs/gulp/blob/master/docs/README.md">une documentation</a>
très bien faite, qui comporte carrément
<a href="https://github.com/gulpjs/gulp/tree/master/docs/recipes">des exemples <em>officiels</em> tout prêts</a>.</p>
<p>Comme je vous disais plus tôt, les auteurs de Gulp sont assez carrés et valident
(ou plutôt <em>invalident</em>) <a href="https://www.npmjs.org/search?q=gulpplugin">les plugins</a> qui
ne respectent pas les
<a href="https://github.com/gulpjs/gulp/blob/master/docs/writing-a-plugin/guidelines.md">règles</a>.
Je trouve que c’est gage de qualité.</p>
<p>Pour finir quelques liens pour ceux qui en veulent toujours plus :</p>
<ul>
<li><a href="http://www.insertafter.com/articles-retour_experience_gulp.html">Gulp : Retour d’expérience</a></li>
<li><a href="http://jaysoo.ca/2014/01/27/gruntjs-vs-gulpjs/">Grunt vs. Gulp, au-delà des chiffres</a> (anglais)</li>
</ul>
<pre><code class="lang-bash"><span class="hljs-variable">$ </span>gulp bisous
❯ ♡ 😘
</code></pre>

]]></description><pubDate>Tue, 29 Apr 2014 00:00:00 GMT</pubDate><link>http://putaindecode.fr/posts/js/introduction-gulp/</link><guid isPermaLink="true">http://putaindecode.fr/posts/js/introduction-gulp/</guid></item><item><title>Les post-processeurs CSS</title><description><![CDATA[
<p>Vous avez surement entendu parler des <a href="http://iamvdo.me/blog/les-postprocesseurs-css"><em>post-processeurs CSS</em></a>.
J’ai personnellement pas mal fait référence à <del>ce concept</del> cette expression ces derniers temps.
Que ce soit lorsque je vous racontais
<a href="/posts/css/comment-en-finir-avec-les-prefixes/">comment se passer des préfixes CSS</a>
ou lors
<a href="/posts/css/le-point-sur-les-preprocesseurs/">d’un point sur les pré-processeurs CSS</a>.
N’y a-t-il rien qui vous a fait tiquer ?</p>
<h2 id="du-post-processing-"><a class="putainde-Title-anchor" href="#du-post-processing-">#</a>Du post-processing ?</h2><p>Bon on va pas jouer sur les mots mais quand même un peu. <em>Post</em> ça veut dire après.
Mais après quoi ? Après du <em>processing</em>. Donc en théorie après que la feuille de
style ait été traitée.</p>
<p>Si on revient sur <em>pré-processeurs</em>, on a quelques choses de sensé.
On travaille sur la feuille de style avant qu’elle n’ait été traitée.
Traitée par qui ? Je dirais le navigateur pas vous ?
Dans ce cas le pré-processing est tout à fait logique.</p>
<p>Mais le post-processing ? Du vrai post-processing ça existe ? Oui et ça ressemblerait à ça par exemple :
<a href="http://jsfiddle.net/yyx990803/B5JTg/">Interpolation de CSS avec Vue.js</a> (enfin je crois).
Ici on a un process sur du CSS existant, déjà traité par le navigateur.</p>
<p>Bon ok j’avoue que je pinaille un peu. On pourrait considérer que le “process”,
c’est le fait d’améliorer sa feuille de style et dans ce cas, on pourrait accepter pré- et post-process.
Mais ça reste pas super exact de mon point de vue.</p>
<p>Du coup on appelle ça comment les post-processeurs ?
Devrait-on appeler ça du <em>post-pré-processing</em> ? Je vous le demande.</p>
<p>Assez plaisanté, passons donc à l’explication de ce qu’on appelera le <em>post-processing.</em></p>
<h2 id="le-post-processing"><a class="putainde-Title-anchor" href="#le-post-processing">#</a>Le post-processing</h2><p>Quel est la différence avec du pré-processing ? Pour répondre à cette question,
il faut bien définir ce qu’est le pré-processing dans notre contexte.</p>
<h3 id="le-pre-processing-css"><a class="putainde-Title-anchor" href="#le-pre-processing-css">#</a>Le pré-processing CSS</h3><p>Le pré-processing est un pré-traitement avant le traitment final. Dans le cas de feuille de style,
on travaille donc sur des pré-feuilles de style. Ce ne sont donc pas des feuilles de style.
Comment les différencie-t-on ? La syntaxe.</p>
<p>Hola hola, calmez-vous. J’en entends déjà chouiner qu’avec Sass, Less et Stylus,
on peut coller du CSS valide et Ça Marche™. Oui ça marche. Mais seulement dans ce sens.
Si on essaye de faire parser un <code>@foreach</code>, <code>@include</code> ou ce genre de nouveautés
apportés par un pré-processeur, votre navigateur il va faire la gueule.</p>
<p>En effet un pré-processeur n’est rien d’autre qu’un langage. Un nouveau.
Il ajoute des éléments à ce langage, et change même éventuellement la syntaxe.
Certes il peut s’appuyer sur un langage existant (par exemple la syntaxe Scss de Sass, ou la syntaxe Less )
mais ça n’est pas obligé (exemple avec l’ancienne syntaxe Sass, ou encore pour changer de registre, CoffeeScript pour du JavaScript).</p>
<h3 id="difference-entre-post-processing-et-pre-processing"><a class="putainde-Title-anchor" href="#difference-entre-post-processing-et-pre-processing">#</a>Différence entre post-processing et pré-processing</h3><p>Avant de parler des différences il nous faut un cas concret pour y voir plus clair.
Autoprefixer est un très bon exemple, mais je vais vous en montrer un encore plus pertinent: les fallbacks REM.
J’espère que vous connaissez le REM (root EM), cette unité CSS très utile qui permet d’avoir la souplesse de l’unité EM,
en se basant non sur l’élement parent, mais l’élement root (donc le document).
Cette unité CSS n’est par exemple pas compatible avec IE8, et certain d’entre vous doivent encore le supporter.</p>
<p>On a donc vu pas mal de mixins genre <code>rem2px()</code> pour ajouter un fallback, via des pré-processeurs CSS.
Sauf que là, il semble beaucoup plus pertinent de ne pas alourdir son code (car on y ajoute rien d’intéressant),
surtout lorsque c’est pour supporter de vieux navigateurs.
Et si on pouvait ajouter un petit coup de peinture magique, je dirais même automatique,
afin d’avoir ce fallback ?</p>
<p>Et bien, on peut. Ça prend 20 secondes, et ça fera les choses bien, sans oubli.
Exemple avec <a href="https://github.com/ctalkington/rework-rem-fallback">rework-rem-fallback</a></p>
<pre><code class="lang-js"><span class="hljs-comment">// il faudrait installer les dépendances de la façon suivante</span>
<span class="hljs-comment">// $ npm i rework rework-rem-fallback</span>

<span class="hljs-tag">var</span> rework = <span class="hljs-function"><span class="hljs-title">require</span><span class="hljs-params">(<span class="hljs-string">'rework'</span>)</span></span> <span class="hljs-comment">// le moteur rework, je reviens dessus après</span>
<span class="hljs-tag">var</span> remFallback = <span class="hljs-function"><span class="hljs-title">require</span><span class="hljs-params">(<span class="hljs-string">'rework-rem-fallback'</span>)</span></span> <span class="hljs-comment">// le plugin rework</span>

  <span class="hljs-comment">// lecture du fichier css</span>
<span class="hljs-tag">var</span> css = <span class="hljs-function"><span class="hljs-title">require</span><span class="hljs-params">(<span class="hljs-string">'fs'</span>)</span></span>.<span class="hljs-function"><span class="hljs-title">readFileSync</span><span class="hljs-params">(<span class="hljs-string">'dist/index.css'</span>, <span class="hljs-string">'utf8'</span>)</span></span>.<span class="hljs-function"><span class="hljs-title">toString</span><span class="hljs-params">()</span></span>

  <span class="hljs-comment">// on traite le CSS en indiquant à rework la source, et le plugin à utiliser</span>
<span class="hljs-tag">var</span> out = <span class="hljs-function"><span class="hljs-title">rework</span><span class="hljs-params">(css)</span></span>.<span class="hljs-function"><span class="hljs-title">use</span><span class="hljs-params">(remFallback()</span></span>).<span class="hljs-function"><span class="hljs-title">toString</span><span class="hljs-params">()</span></span>

  <span class="hljs-comment">// ici on fait la même chose, mais comme si la font de base était en 14px</span>
<span class="hljs-tag">var</span> out14 = <span class="hljs-function"><span class="hljs-title">rework</span><span class="hljs-params">(css)</span></span>.<span class="hljs-function"><span class="hljs-title">use</span><span class="hljs-params">(remFallback(<span class="hljs-number">14</span>)</span></span>).<span class="hljs-function"><span class="hljs-title">toString</span><span class="hljs-params">()</span></span>
</code></pre>
<p>Avec l’exemple d’avant, et ce bout de CSS:</p>
<pre><code class="lang-css">.main-header { width: <span class="hljs-number">5</span><span class="hljs-comment">rem }</span>
</code></pre>
<p>… On obtiendra le résultat suivant:</p>
<pre><code class="lang-css"><span class="hljs-class">.main-header</span> <span class="hljs-rules">{
  <span class="hljs-rule"><span class="hljs-attribute">width</span>:<span class="hljs-value"> <span class="hljs-number">80px</span></span></span>;
  <span class="hljs-rule"><span class="hljs-attribute">width</span>:<span class="hljs-value"> <span class="hljs-number">5rem</span></span></span>;
<span class="hljs-rule">}</span></span>
</code></pre>
<p>Notre exemple n’est pas intégré dans un
<a href="http://www.24joursdeweb.fr/2013/automatisez-votre-workflow-front-end/">workflow automatisé</a>,
mais c’est juste pour vous montrer que c’est l’histoire de 5 lignes de code
et pas autant de lignes que de fois où l’on a <code>rem</code> dans sa feuille de style.</p>
<p>Sexy n’est-ce pas ?</p>
<p>L’autre grosse différence entre le pré- et le post-processing, c’est le langage.
Ce post-processing s’effectue après du pré-processing. Donc après que le pré-processeur,
cet autre langage, ait fait son boulot.</p>
<p><strong>Le post-processing s’effectue sur du CSS de manière transparente.</strong></p>
<p><em>Ce processing s’effectue sur du vrai CSS (disons la syntaxe CSS).</em></p>
<p>Cette syntaxe étant très simple (se résumant principalement à <code>selecteur { prop: value }</code> - oui y’a les règles <code>@*</code> en plus je sais),
<a href="https://github.com/reworkcss/css-parse#performance">c’est très rapide à parser</a>.</p>
<h2 id="pourquoi-du-post-processing-"><a class="putainde-Title-anchor" href="#pourquoi-du-post-processing-">#</a>Pourquoi du post-processing ?</h2><p>Comme on vient de le voir avec les 2 points précédents, on a déjà 3 bonnes raisons :</p>
<ul>
<li>la simplicité (pour certains cas de figures, c’est plus pertinent, ça évite trop de code et des
oublis)</li>
<li>la vitesse</li>
<li>le fait de pouvoir brancher ses propres plugins</li>
</ul>
<p>Je sais pas vous mais moi ça me suffit. Et en cherchant mieux, on pourrait sûrement trouver d’autres arguments.
(<em>Rappel : d’ailleurs n’hésitez pas à modifier cet article si vous en avez</em>).</p>
<h2 id="avec-quoi-doit-on-post-processer-ces-css-"><a class="putainde-Title-anchor" href="#avec-quoi-doit-on-post-processer-ces-css-">#</a>Avec quoi doit-on post-processer ces CSS ?</h2><p>Comme vous avez pu le voir tout à l’heure j’ai pris dans un exemple Rework,
mais il existe aussi PostCSS, plus récent.</p>
<h3 id="rework"><a class="putainde-Title-anchor" href="#rework">#</a><a href="https://github.com/reworkcss/rework">Rework</a></h3><p>Rework a été initié par le grand <a href="https://github.com/visionmedia">TJ Holowaychuck</a>,
cette machine de guerre (<a href="http://www.quora.com/TJ-Holowaychuk-1/How-is-TJ-Holowaychuk-so-insanely-productive">que certains ne pensent même pas humain</a> pour vous dire).
TJ était il fut un temps utilisateur de Sass, il avait donc même commencé le
portage de <a href="https://github.com/stunti/sass.js">Sass en Node</a>.
Il a dû se rendre compte bien avant nous que ce n’était finalement pas forcément la meilleure option.
Il a donc développé <a href="https://github.com/LearnBoost/stylus/">Stylus</a> (si, si, c’est bien lui),
le temps de comprendre qu’une autre approche était possible (pour info, il ne maintient maintenant plus Stylus).</p>
<p>C’est donc <a href="https://github.com/reworkcss/rework/commit/0a7be255bfe753d03f93c7072351266fa636e80a">le 1er Septembre 2012 qu’il pousse la première version de Rework</a>.</p>
<p>L’objectif de Rework n’est pas spécialement de gérer du post-process.
Rework se place comme un manipulateur de CSS, permettant (entre autres) :</p>
<ul>
<li>l’automatisation d’ajout des préfixes</li>
<li>la création de nouvelles propriétés</li>
<li>l’intégration d’images inline</li>
</ul>
<p>Vous me direz que ça ressemble vachement à un pré-processeur n’est-ce pas ?
Vu l’historique que je viens de vous conter et <a href="https://github.com/reworkcss/rework#plugins">les plugins par défaut</a>,
vous aurez bien compris que c’est l’idée : faire un moteur de pré-processeur où l’on y branche des plugins pour ajouter nos propres fonctionnalités.
C’est grâce à ce projet qu’Autoprefixer a initialement vu le jour d’ailleurs.</p>
<h3 id="postcss"><a class="putainde-Title-anchor" href="#postcss">#</a><a href="https://github.com/ai/postcss">PostCSS</a></h3><p>Beaucoup plus récent, PostCSS a été écrit par l’auteur d’Autoprefixer.</p>
<blockquote>
<p>Heu mais quoi ? Tu viens de nous dire que Autoprefixer utilisait Rework ?!</p>
</blockquote>
<p>Oui <em>c’était</em> le cas. <em>Utilisait</em>. L’auteur de PostCSS s’explique dans <a href="https://github.com/ai/postcss#rework">son README</a>.
Il y indique que, bien que très similaire, Rework et PostCSS n’ont pas été développé pour les mêmes raisons.
C’est ce qui explique les différences au niveau des moteurs.
PostCSS se veut plus préservateur par rapport à votre source d’origine,
et gère donc mieux sourcemap, peut conserver votre espacement et indentation,
parse de manière plus sécurisé (vu que ça se veut mieux gérer le code legacy).</p>
<p>Dans la pratique je n’ai jamais eu de problème avec Rework, me souciant peu de la mise en forme de la sortie CSS.
Mais PostCSS semble avoir une API plus haut niveau et plus souple pour mieux travailler les feuilles de styles.</p>
<h3 id="rework-ou-postcss-"><a class="putainde-Title-anchor" href="#rework-ou-postcss-">#</a>Rework ou PostCSS ?</h3><p>Tout dépend ce que vous voulez faire. Si vous avez en tête l’idée de développer un outil,
je pencherais plus vers PostCSS. Mais en temps qu’utilisateur, pour l’instant, définitivement Rework.</p>
<p>Ce dernier a clairement beaucoup plus de plugins existants. Voyez par vous-mêmes :</p>
<ul>
<li><a href="https://www.npmjs.org/search?q=rework">npmjs.org/search?q=rework</a></li>
<li><a href="https://www.npmjs.org/search?q=postcss">npmjs.org/search?q=postcss</a></li>
</ul>
<h2 id="rework-ce-n-est-pas-em-que-em-du-post-processing-"><a class="putainde-Title-anchor" href="#rework-ce-n-est-pas-em-que-em-du-post-processing-">#</a>Rework ce n’est pas <em>que</em> du post-processing ?</h2><p>Oui en effet, comme je le disais avant, c’est pas le but. C’est du “processing”.
Pré-, post-… Qu’est-ce que ça change dans le fond hein ?</p>
<p>L’idée, en temps que développeur, est d’améliorer le confort d’écriture sans contrainte.
Comme je l’ai indiqué <a href="/posts/css/le-point-sur-les-preprocesseurs/#mon-avis-sur-les-pr-processeurs">précédemment</a>,
j’ai laché les pré-processeurs “classiques” ayant l’impression d’utiliser un tank pour tuer une mouche.
Car au fond pour 90% (si ce n’est plus) d’entres nous,
que nous faut-il pour bien développer des feuilles de styles ?
Un peu d’organisation, des variables et un poil de math ?
Personnellement je me contente de ça. Pour l’organisation, je suis devenu fan de BEM
(on vous en parle bientôt).</p>
<p><strong>Et en attendant de vraiment pouvoir utiliser les variables CSS associé à <code>calc()</code>,
je reste sur du <em>custom pré-processing</em> via Rework avec lequel je peux coder avec la syntaxe des specs (même si c’est en draft), plus future-proof.</strong></p>
<p>J’aime conserver la syntaxe CSS et avoir un process ultra-rapide et transparent.</p>
<h3 id="prochaine-etape-faire-son-propre-pre-post-processeur-css-c-est-simple"><a class="putainde-Title-anchor" href="#prochaine-etape-faire-son-propre-pre-post-processeur-css-c-est-simple">#</a>Prochaine étape: faire son propre pré/post-processeur CSS, c’est simple</h3><p>Rework ayant un bon petit paquet de plugins déjà existants, c’est assez simple de <a href="/posts/css/preprocesseur-a-la-carte/">réaliser son propre pré-processeur</a> via quelques lignes de code seulement.</p>

]]></description><pubDate>Tue, 08 Apr 2014 00:00:00 GMT</pubDate><link>http://putaindecode.fr/posts/css/les-post-processeurs/</link><guid isPermaLink="true">http://putaindecode.fr/posts/css/les-post-processeurs/</guid></item></channel></rss>