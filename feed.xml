<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Putain de Code !</title>
        <description>On voulait mettre une baseline mais on a pas été foutu d&#x27;en trouver une</description>
        <link>/</link>
        <generator>happyplan 0.4.0-alpha.10</generator>
        <lastBuildDate>Fri, 06 December 2013 00:00:00 +0100</lastBuildDate>

          <item>
              <title>De jQuery à Vanilla JS</title>
              <description><![CDATA[

<div style="float: left; margin-right: 15px; background: white; padding: 5px; border-radius: 4px; margin-top: 10px"><img src="/media/jquery-die.jpg"></div>

<p>Oui alors jQuery, c&#39;est sûrement très bien, ça simplifie pas mal de choses et le <em>chaining</em> est intéressant mais eeeest-ce que vous connaissez l&#39;équivalent en <em>pur</em> JavaScript ? Pas sûr hein.</p>
<p>Ce petit article vous propose de quoi peut-être vous faire changer d&#39;avis sur la bibliothèque qui pèse tout de même environ ~80ko.</p>
<p><em>Note : <a href="http://vanilla-js.com/">Vanilla JS</a> n&#39;est pas un framework mais veut simplement dire &quot;à nu&quot;, c&#39;est du JavaScript sans bibliothèque.</em></p>
<p>C&#39;est parti !</p>
<h2 id="table-des-mati-res">Table des matières</h2>
<ol>
<li><a href="/posts/js/de-jquery-a-vanillajs/#-v-nements">Évènements</a></li>
<li><a href="/posts/js/de-jquery-a-vanillajs/#s-lecteurs">Sélecteurs</a></li>
<li><a href="/posts/js/de-jquery-a-vanillajs/#attributs">Attributs</a></li>
<li><a href="/posts/js/de-jquery-a-vanillajs/#classes">Classes</a></li>
<li><a href="/posts/js/de-jquery-a-vanillajs/#manipulation">Manipulation</a></li>
<li><a href="/posts/js/de-jquery-a-vanillajs/#navigation">Navigation</a></li>
<li><a href="/posts/js/de-jquery-a-vanillajs/#ajax">AJAX</a></li>
<li><a href="/posts/js/de-jquery-a-vanillajs/#jsonp">JSONP</a></li>
</ol>
<h2 id="-v-nements">Évènements</h2>
<pre><code class="language-javascript"><span class="comment">// jQuery</span>
$(document).ready(<span class="function"><span class="keyword">function</span><span class="params">()</span> {</span>
  <span class="comment">// code</span>
})

<span class="comment">// Vanilla</span>
document.addEventListener(<span class="string">'DOMContentLoaded'</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span> {</span>
  <span class="comment">// code</span>
})</code></pre>
<pre><code class="language-javascript"><span class="comment">// jQuery</span>
$(<span class="string">'a'</span>).click(<span class="function"><span class="keyword">function</span><span class="params">()</span> {</span>
  <span class="comment">// code…</span>
})

<span class="comment">// Vanilla</span>
[].forEach.call(document.querySelectorAll(<span class="string">'a'</span>), <span class="function"><span class="keyword">function</span><span class="params">(el)</span> {</span>
  el.addEventListener(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span> {</span>
    <span class="comment">// code…</span>
  })
})</code></pre>
<h2 id="s-lecteurs">Sélecteurs</h2>
<pre><code class="language-javascript"><span class="comment">// jQuery</span>
<span class="keyword">var</span> divs = $(<span class="string">'div'</span>)

<span class="comment">// Vanilla</span>
<span class="keyword">var</span> divs = document.querySelectorAll(<span class="string">'div'</span>)</code></pre>
<pre><code class="language-javascript"><span class="comment">// jQuery</span>
<span class="keyword">var</span> newDiv = $(<span class="string">'&lt;div/&gt;'</span>)

<span class="comment">// Vanilla</span>
<span class="keyword">var</span> newDiv = document.createElement(<span class="string">'div'</span>)</code></pre>
<h2 id="attributs">Attributs</h2>
<pre><code class="language-javascript"><span class="comment">// jQuery</span>
$(<span class="string">'img'</span>).filter(<span class="string">':first'</span>).attr(<span class="string">'alt'</span>, <span class="string">'My image'</span>)

<span class="comment">// Vanilla</span>
document.querySelector(<span class="string">'img'</span>).setAttribute(<span class="string">'alt'</span>, <span class="string">'My image'</span>)</code></pre>
<h2 id="classes">Classes</h2>
<pre><code class="language-javascript"><span class="comment">// jQuery</span>
newDiv.addClass(<span class="string">'foo'</span>)

<span class="comment">// Vanilla</span>
newDiv.classList.add(<span class="string">'foo'</span>)</code></pre>
<pre><code class="language-javascript"><span class="comment">// jQuery</span>
newDiv.toggleClass(<span class="string">'foo'</span>)

<span class="comment">// Vanilla</span>
newDiv.classList.toggle(<span class="string">'foo'</span>)</code></pre>
<h2 id="manipulation">Manipulation</h2>
<pre><code class="language-javascript"><span class="comment">// jQuery</span>
$(<span class="string">'body'</span>).append($(<span class="string">'&lt;p/&gt;'</span>))

<span class="comment">// Vanilla</span>
document.body.appendChild(document.createElement(<span class="string">'p'</span>))</code></pre>
<pre><code class="language-javascript"><span class="comment">// jQuery</span>
<span class="keyword">var</span> clonedElement = $(<span class="string">'#about'</span>).clone()

<span class="comment">// Vanilla</span>
<span class="keyword">var</span> clonedElement = document.getElementById(<span class="string">'about'</span>).cloneNode(<span class="literal">true</span>)</code></pre>
<pre><code class="language-javascript"><span class="comment">// jQuery</span>
$(<span class="string">'#wrap'</span>).empty()

<span class="comment">// Vanilla</span>
<span class="keyword">var</span> wrap = document.getElementById(<span class="string">'wrap'</span>)
<span class="keyword">while</span>(wrap.firstChild) wrap.removeChild(wrap.firstChild)</code></pre>
<h2 id="navigation">Navigation</h2>
<pre><code class="language-javascript"><span class="comment">// jQuery</span>
<span class="keyword">var</span> parent = $(<span class="string">'#about'</span>).parent()

<span class="comment">// Vanilla</span>
<span class="keyword">var</span> parent = document.getElementById(<span class="string">'about'</span>).parentNode</code></pre>
<pre><code class="language-javascript"><span class="comment">// jQuery</span>
<span class="keyword">if</span>($(<span class="string">'#wrap'</span>).is(<span class="string">':empty'</span>))

<span class="comment">// Vanilla</span>
<span class="keyword">if</span>(!document.getElementById(<span class="string">'wrap'</span>).hasChildNodes())</code></pre>
<pre><code class="language-javascript"><span class="comment">// jQuery</span>
<span class="keyword">var</span> nextElement = $(<span class="string">'#wrap'</span>).next()

<span class="comment">// Vanilla</span>
<span class="keyword">var</span> nextElement = document.getElementById(<span class="string">'wrap'</span>).nextSibling</code></pre>
<h2 id="ajax">AJAX</h2>
<h3 id="get">GET</h3>
<pre><code class="language-javascript"><span class="comment">// jQuery</span>
$.get(<span class="string">'//example.com'</span>, <span class="function"><span class="keyword">function</span> <span class="params">(data)</span> {</span>
  <span class="comment">// code</span>
})

<span class="comment">// Vanilla</span>
<span class="keyword">var</span> httpRequest = <span class="keyword">new</span> XMLHttpRequest()
httpRequest.onreadystatechange = <span class="function"><span class="keyword">function</span> <span class="params">(data)</span> {</span>
  <span class="comment">// code</span>
}
httpRequest.open(<span class="string">'GET'</span>, url)
httpRequest.send()</code></pre>
<h3 id="post">POST</h3>
<pre><code class="language-javascript"><span class="comment">// jQuery</span>
$.post(<span class="string">'//example.com'</span>, { username: username }, <span class="function"><span class="keyword">function</span> <span class="params">(data)</span> {</span>
  <span class="comment">// code</span>
})

<span class="comment">// Vanilla</span>
<span class="keyword">var</span> httpRequest = <span class="keyword">new</span> XMLHttpRequest()
httpRequest.onreadystatechange = <span class="function"><span class="keyword">function</span> <span class="params">(data)</span> {</span>
  <span class="comment">// code</span>
}
httpRequest.setRequestHeader(<span class="string">'Content-Type'</span>, <span class="string">'application/x-www-form-urlencoded'</span>)
httpRequest.open(<span class="string">'POST'</span>, url)
httpRequest.send(<span class="string">'username='</span> + encodeURIComponent(username))</code></pre>
<h3 id="jsonp">JSONP</h3>
<pre><code class="language-javascript"><span class="comment">// jQuery</span>
$.getJSON(<span class="string">'//openexchangerates.org/latest.json?callback=?'</span>, <span class="function"><span class="keyword">function</span> <span class="params">(data)</span> {</span>
  <span class="comment">// code</span>
})

<span class="comment">// Vanilla</span>
<span class="function"><span class="keyword">function</span> <span class="title">success</span><span class="params">(data)</span> {</span>
  <span class="comment">// code</span>
}
<span class="keyword">var</span> scr = document.createElement(<span class="string">'script'</span>)
scr.src = <span class="string">'//openexchangerates.org/latest.json?callback=formatCurrency'</span>
document.body.appendChild(scr)</code></pre>
<p>Cela vous parait-il encore difficile de vous passer de jQuery ? :)</p>
<p>Un grand merci à <a href="http://playground.deaxon.com/js/vanilla-js/">@deaxon</a> qui est à l&#39;origine de cet éclaircissement.</p>
<h2 id="a-creuser">A creuser</h2>
<p>Il existe une version minimaliste de jQuery basée sur la même API mais beaucoup plus légère s&#39;appelant <a href="http://zeptojs.com/">Zepto</a>. Il est actuellement utilisé en production sur le site mobile de ma boite.</p>

]]></description>
              <pubDate>Thu, 05 December 2013 01:00:00 +0100</pubDate>
              <link>/dist/posts/js/de-jquery-a-vanillajs/index.html</link>
              <guid isPermaLink="true">/dist/posts/js/de-jquery-a-vanillajs/index.html</guid>
          </item>

          <item>
              <title>ExternalInterface.call() de Flash (et Backbone), toute une histoire</title>
              <description><![CDATA[

<div style="float: left; margin-right: 15px;"><img src="/media/occupyflash.png"></div>

<p>Je voulais vous parler d&#39;un bug qui m&#39;a bien emmerdé récemment et comme j&#39;aimerais que vous ne perdiez pas de temps avec cela, un article s&#39;imposait.</p>
<p><em>Note de la direction : j&#39;y connais rien en Flash (et je ne crois pas avoir trop envie de connaître en fait).</em></p>
<p>Dans la boite où je travaille, nous utilisons Flash en tant que lecteur vidéo étant donné qu&#39;il est pour le moment très difficile de faire lire sur toutes les plateformes des vidéos au format <em>H.264</em> et/ou passant par du <em>HLS</em>. Longue histoire qui fera office d&#39;un autre article. (Je dis ça à chaque fois, haha).</p>
<h2 id="le-pitch">Le pitch</h2>
<p>Avec notre <em>flasheur</em> attitré, nous nous sommes mis en tête de créer un objet <em>event</em> qui permettrait au Flash de déclencher des évènements lorsqu&#39;il le souhaite afin de communiquer avec l&#39;application JavaScript et que celui-ci fasse en conséquence. Cet objet, nous l&#39;avons appelé <code>App.FlashManager</code> et plus précisemment <code>App.FlashManager.Events</code> dans le cas des évènements. Nous utilisons <strong>Backbone.js</strong> pour gérer ce principe d&#39;évènement mais vous en avez d&#39;<a href="http://microjs.com/#event">autres</a> de disponible. En pratique, voilà ce que ça donne :</p>
<pre><code class="language-javascript"> <span class="comment">// on crée un objet vide</span>
App.FlashManager.Events = {}

<span class="comment">// on lui ajoute les fonctionnalités des events Backbone</span>
_.extend(App.FlashManager.Events, Backbone.Events)</code></pre>
<p>En soi, pas de souci, tout se passe bien à ce moment, nous avons un <a href="http://backbonejs.org/#Events">objet d&#39;évènement façon Backbone</a>. Il pourra alors s&#39;écouter lui même, écouter un autre objet, mais aussi déclencher des évènements.</p>
<h2 id="c-t-flash">Côté Flash</h2>
<p>La base est en place, maintenant on souhaite que le Flash déclenche un évènement. On passe par l&#39;objet <code>ExternalInterface</code> :</p>
<pre><code class="language-javascript">ExternalInterface.call(<span class="string">"window.App.FlashManager.Events.trigger"</span>, <span class="string">"my-event"</span>)
<span class="comment">// http://help.adobe.com/en_US/FlashPlatform/reference/actionscript/3/flash/external/ExternalInterface.html#call</span></code></pre>
<p>Et là, bug.</p>
<h2 id="pourquoi-bug-">Pourquoi bug ?</h2>
<p>Parce que <code>ExtercalInterface.call()</code> ne s&#39;attend pas à recevoir ce que <strong>Backbone.js</strong> lui propose. Lorsque vous faites <code>.trigger()</code>, <strong>Backbone.js</strong> renvoie l&#39;<a href="https://github.com/jashkenas/backbone/blob/master/backbone.js#L144-L153">objet en cours</a>, ce qui provoque un énooooorme bug dans le plugin Flash de votre navigateur faisant tout bonnement une boucle infinie d&#39;appel à la méthode interne de Flash <code>__flash__toXML</code> :</p>
<pre><code class="language-javascript">__flash__toXML
  __flash__toXML
    __flash__toXML
      __flash__toXML
        __flash__toXML
          __flash__toXML
           __flash__toXML
            __flash__toXML
              __flash__toXML
                __flash__toXML
                  __flash__toXML
                    __flash__toXML</code></pre>
<p>Peut-être que vous allez vous empresser de regarder si une autre méthode qu&#39;<code>ExtercalInterface.call()</code> existe pour faire un appel à JavaScript (vous vous trompez) ou encore d&#39;aller insulter Adobe sur son bugtracker en leur disant &quot;c&#39;est quoi c&#39;bordel ?!&quot; (vous n&#39;auriez pas forcément tort, quand bien même ce n&#39;est pas vraiment de leur faute dans le cas présent). Nope, c&#39;est du côté JavaScript qu&#39;il faut régler ça.</p>
<h2 id="c-t-javascript">Côté JavaScript</h2>
<p>Comme je vous disais, <strong>Backbone.js</strong> renvoie lorsqu&#39;on utilise <code>.trigger()</code> l&#39;instance en cours de l&#39;objet, provoquant un bug dû à une <a href="https://developer.mozilla.org/fr/docs/Web/JavaScript/Une_r%C3%A9introduction_%C3%A0_JavaScript#Fuites_de_m.C3.A9moire">référence circulaire</a>. En gros, ici nous sommes en train de retourner l&#39;élément Flash (<code>&lt;object|embed&gt;</code>).</p>
<p>Pour contrer cela, je vous propose la solution suivante qui est de ne pas utiliser directement l&#39;objet <code>Backbone.Events|View</code> mais plutôt de passer par une interface, un objet proxy.</p>
<p>Voici le schéma :</p>
<ul>
<li>Créer un objet simple qui contient les mêmes noms de méthodes que les objets évènements <strong>Backbone.js</strong> (en gros, se mapper sur l&#39;API Backbone)</li>
<li>Utiliser <strong>Backbone.js</strong> dans les méthodes de cet objet <em>Proxy</em></li>
</ul>
<p>Exemple :</p>
<pre><code class="language-javascript"><span class="comment">// Bridge between flash and js</span>
App.FlashManager = {}
App.FlashManager.Events = {}

<span class="comment">// Backbone events used for Flash</span>
App.InternalFlashManager = {}
App.InternalFlashManager.Events = {}

_.extend(App.InternalFlashManager.Events, Backbone.Events)

App.FlashManager.Events.trigger = <span class="function"><span class="keyword">function</span><span class="params">(name, opts)</span> {</span>
    App.InternalFlashManager.Events.trigger(name, opts)

    <span class="comment">// Must return nothing not to loop JavaScript engine, important!</span>
    <span class="keyword">return</span>
}</code></pre>
<h2 id="a-creuser">A creuser</h2>
<p>Note de <a href="https://twitter.com/b_lionel">@b_lionel</a> : Pour le problème de référence circulaire, il est possible que ce soit dû au fait de renvoyer un objet ayant une référence vers un object qui lui même à une référence sur le premier objet :</p>
<pre><code class="language-javascript"><span class="keyword">var</span> obj1 = {label: <span class="string">'objet1'</span>}
  ,  obj2 = {label: <span class="string">'objet2'</span>}
obj1.child = obj2
obj2.child = obj1

<span class="keyword">return</span> obj1</code></pre>
<p>...ce qui fait que le sérialiseur se prend probablement les pieds dans le tapis.</p>
<h2 id="oh-et-">Oh et...</h2>
<p>...il existe une version similaire de cet article en anglais disponible là : <a href="https://coderwall.com/p/e-8niw">ExternalInterface#call in a deadly loop (<strong>flash</strong>toXML)</a>.</p>
<h2 id="conclusion">Conclusion</h2>
<p>De manière générale (hors <strong>Backbone.js</strong>), lorsque vous utilisez <code>ExtercalInterface.call()</code>, faites en sorte que votre JavaScript ne retourne pas l&#39;élément Flash lui-même (<code>&lt;object|embed&gt;</code>).</p>
<p>Merci à <a href="https://twitter.com/zr0z">@zr0z</a> et à <a href="https://twitter.com/alexmex_">@alexmex_</a> pour la relecture.</p>

]]></description>
              <pubDate>Thu, 05 December 2013 01:00:00 +0100</pubDate>
              <link>/dist/posts/js/externalinterface-call-flash-backbone-toute-une-histoire/index.html</link>
              <guid isPermaLink="true">/dist/posts/js/externalinterface-call-flash-backbone-toute-une-histoire/index.html</guid>
          </item>

          <item>
              <title>Premiers pas avec Grunt</title>
              <description><![CDATA[

<div style="float: left"><img src="/media/gruntjs.png"></div>

<p>Vous avez sûrement déjà entendu parler de <strong>Grunt</strong> à droite à gauche, en conférence, voire votre boite l&#39;utilise déjà mais vous ne savez toujours pas trop ce qui se cache derrière ce terme saugrenu digne d&#39;un personnage de Warcraft. Soit, ce n&#39;est pas bien grave. <strong>Grunt</strong> est simplement un <em>JavaScript Task Runner</em>, un outil vous permettant de créer des tâches automatisées en JavaScript. Forcément ce n&#39;est pas très parlant mais c&#39;est tout l&#39;intérêt de cet article, vous expliquer ce qu&#39;est <strong>Grunt</strong> et pourquoi il peut vous être utile dans un <em>workflow</em> de front-end dev.</p>
<h1 id="commen-ons">Commençons</h1>
<p>Vous est-il déjà arrivé(e) de devoir régulièrement lancer, lancer et relancer des processus tels que <em>Sass</em>, <em>LESS</em>, <em>uglify</em> - en somme des préprocesseurs ou des minifiers - régulièrement à la main ? N&#39;est-ce pas pénible ? N&#39;est-ce pas aussi pénible de devoir indiquer à tous ses collègues comment ils doivent bosser pour que vous soyez tous cohérents ? Oui ? <strong>Grunt</strong> permet de résoudre ce genre de choses : respecter un putain de <em>workflow</em> en s&#39;assurant que le parcours soit le même pour tout le monde et d&#39;exécuter tout ça en lançant une seule commande. N&#39;est-ce pas fucking aweeeeesome dude ? Bref.</p>
<p>Voici un <em>workflow</em> assez classique :</p>
<ul>
<li>Compiler mes <code>.scss</code> en <code>.css</code>;</li>
<li>Concaténer mes <code>*.js</code> en un seul fichier;</li>
<li>Minifier (avec <em>uglify</em> par exemple) la résultante de l&#39;action précédente.</li>
</ul>
<p>Voyons maintenant comment l&#39;on peut mettre en place ceci via <strong>Grunt</strong>.</p>
<h2 id="installation">Installation</h2>
<p>Tout d&#39;abord, installons <strong>Grunt</strong>. Notez que <strong>Grunt</strong> est en <em>nodejs</em> et que je considère que vous avez déjà <em>nodejs</em> d&#39;installé. D&#39;autre part, nous allons créer un nouveau projet <strong>npm</strong> afin d&#39;enregistrer tous les packages que vous allez installer. Je vous explique par la suite pourquoi nous faisons ça.</p>
<pre><code class="language-bash">$ npm init // puis plusieurs fois entrée</code></pre>
<p>En premier lieu, il faut installer le <em>package</em> qui permet de gérer <strong>Grunt</strong> en ligne de commande. C&#39;est le <em>commander</em> de <strong>Grunt</strong> en gros.</p>
<pre><code class="language-bash">$ npm install -g grunt-cli</code></pre>
<p>Une fois cela fait, installez <strong>Grunt</strong> en local dans votre projet.</p>
<pre><code class="language-bash">$ npm install grunt --save-dev</code></pre>
<p>Ni plus ni moins, <strong>Grunt</strong> est enfin installé dans votre projet.</p>
<h2 id="initialisation">Initialisation</h2>
<p>Maintenant, il est nécessaire de créer un fichier de configuration <strong>Grunt</strong>. Pour cela, nous allons créer un fichier nommé <code>Gruntfile.js</code> à la racine de votre projet.</p>
<pre><code class="language-bash">$ touch Gruntfile.js</code></pre>
<p>Fait ? Voici maintenant à quoi doit ressembler la base d&#39;une configuration <strong>Grunt</strong>.</p>
<pre><code class="language-javascript">module.exports = <span class="function"><span class="keyword">function</span><span class="params">(grunt)</span> {</span>

  <span class="comment">// Configuration de Grunt</span>
  grunt.initConfig({})

  <span class="comment">// Définition des tâches Grunt</span>
  grunt.registerTask(<span class="string">'default'</span>, <span class="string">''</span>)

}</code></pre>
<p>Nous avons maintenant tout le nécessaire pour débuter notre projet. Nous allons enfin pouvoir attaquer les choses sérieuses. Revenons un peu en arrière où nous expliquions que nous voulons en tout premier lieu compiler nos <code>.scss</code> en <code>.css</code>.</p>
<h2 id="cr-er-sa-premi-re-t-che">Créer sa première tâche</h2>
<p>Une petite recherche sur votre moteur de recherche préféré en tapant <code>grunt sass</code> et vous trouverez le projet <a href="https://github.com/gruntjs/grunt-contrib-sass"><code>grunt-contrib-sass</code></a>.</p>
<p>Toute documentation pour installer une tâche <strong>Grunt</strong> est indiquée sur chaque <code>README.md</code> du projet mais pour un souci de clarté et de compréhension, je vais tout de même vous expliquer ici comment faire.</p>
<p>D&#39;abord, installons le package pour <em>Sass</em>.</p>
<pre><code class="language-bash">$ npm install grunt-contrib-sass --save-dev</code></pre>
<p>Ceci va installer le <em>package</em> <code>grunt-contrib-sass</code> dans votre dossier <code>node_modules</code> où vous pourrez l&#39;utiliser en l&#39;important dans votre <code>Gruntfile.js</code>.</p>
<p>Un exemple d&#39;utilisation :</p>
<pre><code class="language-javascript">module.exports = <span class="function"><span class="keyword">function</span><span class="params">(grunt)</span> {</span>

  grunt.initConfig({
    sass: {                              <span class="comment">// Nom de la tâche</span>
      dist: {                            <span class="comment">// Nom de la sous-tâche</span>
        options: {                       <span class="comment">// Options</span>
          style: <span class="string">'expanded'</span>
        },
        files: {                         <span class="comment">// Liste des fichiers</span>
          <span class="string">'main.css'</span>: <span class="string">'main.scss'</span>,       <span class="comment">// 'destination': 'source'</span>
          <span class="string">'widgets.css'</span>: <span class="string">'widgets.scss'</span>
        }
      }
    }
  })

  <span class="comment">// Import du package</span>
  grunt.loadNpmTasks(<span class="string">'grunt-contrib-sass'</span>)

  <span class="comment">// Redéfinition de la tâche `default` qui est la tâche lancée dès que vous lancez Grunt sans rien spécifier.</span>
  <span class="comment">// Note : ici, nous définissons sass comme une tâche à lancer si on lance la tâche `default`.</span>
  grunt.registerTask(<span class="string">'default'</span>, [<span class="string">'sass:dist'</span>])
}</code></pre>
<p>Nous avons maintenant tout le nécessaire pour pouvoir compiler nos <code>.scss</code> en  <code>.css</code>.</p>
<p>Vous vous demandez peut-être comment vous pouvez généraliser vos sources plutôt que les définir une par une. Pas de souci.</p>
<pre><code class="language-javascript">module.exports = <span class="function"><span class="keyword">function</span><span class="params">(grunt)</span> {</span>

  grunt.initConfig({
    sass: {
      dist: {
        options: {
          style: <span class="string">'expanded'</span>
        },
        files: { <span class="comment">// C'est ici que l'on définit le dossier que l'on souhaite importer</span>
          <span class="string">"expand"</span>: <span class="literal">true</span>,
          <span class="string">"cwd"</span>: <span class="string">"src/styles/"</span>,
          <span class="string">"src"</span>: [<span class="string">"*.scss"</span>],
          <span class="string">"dest"</span>: <span class="string">"dist/styles/"</span>,
          <span class="string">"ext"</span>: <span class="string">".css"</span>
        }
      }
    }
  })

  grunt.loadNpmTasks(<span class="string">'grunt-contrib-sass'</span>)

  grunt.registerTask(<span class="string">'default'</span>, [<span class="string">'sass:dist'</span>])
}</code></pre>
<h2 id="deuxi-me-t-che-concat-ner-ses-fichiers-javascript">Deuxième tâche : concaténer ses fichiers JavaScript</h2>
<p>Passons maintenant à la concaténation des fichiers JavaScripts.</p>
<p>Comme pour la majorité des tâches que vous aurez besoin avec <strong>Grunt</strong>, un <em>package</em> <strong>Grunt</strong> existe déjà pour ce travail demandé.</p>
<p>-&gt; <a href="https://github.com/gruntjs/grunt-contrib-concat"><code>grunt-contrib-concat</code></a></p>
<p>Installation : <code>npm install grunt-contrib-concat --save-dev</code> (<code>--save-dev</code> permet de sauvegarder le package dans <code>package.json</code> pour pouvoir à tout moment le réinstaller en faisant <code>npm install</code>)</p>
<p>On ajoute alors à notre configuration <strong>Grunt</strong> l&#39;importation de <code>grunt-contrib-concat</code> :</p>
<pre><code class="language-javascript">module.exports = <span class="function"><span class="keyword">function</span><span class="params">(grunt)</span> {</span>

  grunt.initConfig({
    sass: {
      dist: {
        options: {
          style: <span class="string">'expanded'</span>
        },
        files: {
          <span class="string">"expand"</span>: <span class="literal">true</span>,
          <span class="string">"cwd"</span>: <span class="string">"src/styles/"</span>,
          <span class="string">"src"</span>: [<span class="string">"*.scss"</span>],
          <span class="string">"dest"</span>: <span class="string">"dist/styles/"</span>,
          <span class="string">"ext"</span>: <span class="string">".css"</span>
        }
      }
    }
  })

  grunt.loadNpmTasks(<span class="string">'grunt-contrib-sass'</span>);
  grunt.loadNpmTasks(<span class="string">'grunt-contrib-concat'</span>); <span class="comment">// Voilà l'ajout.</span>

  grunt.registerTask(<span class="string">'default'</span>, [<span class="string">'sass:dist'</span>])
}</code></pre>
<p>Puis on ajoute notre tâche :</p>
<pre><code class="language-javascript">module.exports = <span class="function"><span class="keyword">function</span><span class="params">(grunt)</span> {</span>

  grunt.initConfig({
    sass: {
      dist: {
        options: {
          style: <span class="string">'expanded'</span>
        },
        files: {
          <span class="string">"expand"</span>: <span class="literal">true</span>,
          <span class="string">"cwd"</span>: <span class="string">"src/styles/"</span>,
          <span class="string">"src"</span>: [<span class="string">"*.scss"</span>],
          <span class="string">"dest"</span>: <span class="string">"dist/styles/"</span>,
          <span class="string">"ext"</span>: <span class="string">".css"</span>
        }
      }
    },
    concat: {
      options: {
        separator: <span class="string">';'</span>, <span class="comment">// permet d'ajouter un point-virgule entre chaque fichier concaténé.</span>
      },
      dist: {
        src: [<span class="string">'src/intro.js'</span>, <span class="string">'src/project.js'</span>, <span class="string">'src/outro.js'</span>], <span class="comment">// la source</span>
        dest: <span class="string">'dist/built.js'</span> <span class="comment">// la destination finale</span>
      }
    }
  })

  grunt.loadNpmTasks(<span class="string">'grunt-contrib-sass'</span>);
  grunt.loadNpmTasks(<span class="string">'grunt-contrib-concat'</span>);

  grunt.registerTask(<span class="string">'default'</span>, [<span class="string">'sass:dist'</span>])
}</code></pre>
<p>Ne pas oublier d&#39;ajouter la tâche de concaténation à notre tâche par défaut :</p>
<pre><code class="language-javascript">module.exports = <span class="function"><span class="keyword">function</span><span class="params">(grunt)</span> {</span>

  grunt.initConfig({
    sass: {
      dist: {
        options: {
          style: <span class="string">'expanded'</span>
        },
        files: {
          <span class="string">"expand"</span>: <span class="literal">true</span>,
          <span class="string">"cwd"</span>: <span class="string">"src/styles/"</span>,
          <span class="string">"src"</span>: [<span class="string">"*.scss"</span>],
          <span class="string">"dest"</span>: <span class="string">"dist/styles/"</span>,
          <span class="string">"ext"</span>: <span class="string">".css"</span>
        }
      }
    },
    concat: {
      options: {
        separator: <span class="string">';'</span>, <span class="comment">// permet d'ajouter un point-virgule entre chaque fichier concaténé.</span>
      },
      dist: {
        src: [<span class="string">'src/intro.js'</span>, <span class="string">'src/project.js'</span>, <span class="string">'src/outro.js'</span>], <span class="comment">// la source</span>
        dest: <span class="string">'dist/built.js'</span> <span class="comment">// la destination finale</span>
      }
    }
  })

  grunt.loadNpmTasks(<span class="string">'grunt-contrib-sass'</span>);
  grunt.loadNpmTasks(<span class="string">'grunt-contrib-concat'</span>);

  grunt.registerTask(<span class="string">'default'</span>, [<span class="string">'sass:dist'</span>, <span class="string">'concat:dist'</span>]) <span class="comment">// ici même.</span>
}</code></pre>
<h2 id="compressons-le-tout-">Compressons le tout !</h2>
<p>Pour finir, compressons nos fichiers JavaScript ! Pour cela : <a href="https://github.com/gruntjs/grunt-contrib-uglify"><code>grunt-contrib-uglify</code></a> fera l&#39;affaire.</p>
<p>Je vous passe les détails pour l&#39;installer, si vous avez bien suivi cet article, vous ne devriez avoir aucun problème pour l&#39;installer.</p>
<pre><code class="language-javascript">module.exports = <span class="function"><span class="keyword">function</span><span class="params">(grunt)</span> {</span>

  grunt.initConfig({
    sass: {
      dist: {
        options: {
          style: <span class="string">'expanded'</span>
        },
        files: {
          <span class="string">"expand"</span>: <span class="literal">true</span>,
          <span class="string">"cwd"</span>: <span class="string">"src/styles/"</span>,
          <span class="string">"src"</span>: [<span class="string">"*.scss"</span>],
          <span class="string">"dest"</span>: <span class="string">"dist/styles/"</span>,
          <span class="string">"ext"</span>: <span class="string">".css"</span>
        }
      }
    },
    concat: {
      options: {
        separator: <span class="string">';'</span>
      },
      dist: {
        src: [<span class="string">'src/intro.js'</span>, <span class="string">'src/project.js'</span>, <span class="string">'src/outro.js'</span>],
        dest: <span class="string">'dist/built.js'</span>
      }
    },
    uglify: {
      options: {
        separator: <span class="string">';'</span>
      },
      dist: {
        src: [<span class="string">'src/intro.js'</span>, <span class="string">'src/project.js'</span>, <span class="string">'src/outro.js'</span>]
        dest: <span class="string">'dist/built.js'</span>
      }
    }
  })

  grunt.loadNpmTasks(<span class="string">'grunt-contrib-sass'</span>)
  grunt.loadNpmTasks(<span class="string">'grunt-contrib-concat'</span>)

  grunt.registerTask(<span class="string">'default'</span>, [<span class="string">'sass:dist'</span>, <span class="string">'concat:dist'</span>])
}</code></pre>
<p>Ne constatez vous pas un souci ici ? Oui, nous ne voulons sûrement pas à la fois concaténer nos fichiers et les compresser. Alors comment faire ? Pas d&#39;inquiètude, il suffit de créer des tâches d&#39;environnement ou de contexte. On pourrait par exemple créer une tâche développement et une tâche de production, qu&#39;en pensez-vous ? Pas mal non ? :)</p>
<h2 id="optimisons-">Optimisons !</h2>
<p>Supprimons alors dans un premier temps notre tâche par défaut et créons deux tâches : <code>dev</code> et <code>dist</code>.</p>
<pre><code class="language-javascript">module.exports = <span class="function"><span class="keyword">function</span><span class="params">(grunt)</span> {</span>

  grunt.initConfig({
    sass: {
      dist: {
        options: {
          style: <span class="string">'expanded'</span>
        },
        files: {
          <span class="string">"expand"</span>: <span class="literal">true</span>,
          <span class="string">"cwd"</span>: <span class="string">"src/styles/"</span>,
          <span class="string">"src"</span>: [<span class="string">"*.scss"</span>],
          <span class="string">"dest"</span>: <span class="string">"dist/styles/"</span>,
          <span class="string">"ext"</span>: <span class="string">".css"</span>
        }
      }
    },
    concat: {
      options: {
        separator: <span class="string">';'</span>
      },
      dist: {
        src: [<span class="string">'src/intro.js'</span>, <span class="string">'src/project.js'</span>, <span class="string">'src/outro.js'</span>],
        dest: <span class="string">'dist/built.js'</span>
      }
    },
    uglify: {
      options: {
        separator: <span class="string">';'</span>
      },
      dist: {
        src: [<span class="string">'src/intro.js'</span>, <span class="string">'src/project.js'</span>, <span class="string">'src/outro.js'</span>]
        dest: <span class="string">'dist/built.js'</span>
      }
    }
  })

  grunt.loadNpmTasks(<span class="string">'grunt-contrib-sass'</span>)
  grunt.loadNpmTasks(<span class="string">'grunt-contrib-concat'</span>)

  grunt.registerTask(<span class="string">'dev'</span>, [])
  grunt.registerTask(<span class="string">'dist'</span>, [])
}</code></pre>
<p>Sauf que comme ça, vous le voyez, cela ne va pas faire grand chose, voire rien du tout. Agrémentons alors nos deux tâches par ce qu&#39;on souhaite faire.</p>
<pre><code class="language-javascript">module.exports = <span class="function"><span class="keyword">function</span><span class="params">(grunt)</span> {</span>

  grunt.initConfig({
    sass: {
      dist: {
        options: {
          style: <span class="string">'expanded'</span>
        },
        files: {
          <span class="string">"expand"</span>: <span class="literal">true</span>,
          <span class="string">"cwd"</span>: <span class="string">"src/styles/"</span>,
          <span class="string">"src"</span>: [<span class="string">"*.scss"</span>],
          <span class="string">"dest"</span>: <span class="string">"dist/styles/"</span>,
          <span class="string">"ext"</span>: <span class="string">".css"</span>
        }
      }
    },
    concat: {
      options: {
        separator: <span class="string">';'</span>
      },
      dist: {
        src: [<span class="string">'src/intro.js'</span>, <span class="string">'src/project.js'</span>, <span class="string">'src/outro.js'</span>],
        dest: <span class="string">'dist/built.js'</span>
      }
    },
    uglify: {
      options: {
        separator: <span class="string">';'</span>
      },
      dist: {
        src: [<span class="string">'src/intro.js'</span>, <span class="string">'src/project.js'</span>, <span class="string">'src/outro.js'</span>]
        dest: <span class="string">'dist/built.js'</span>
      }
    }
  })

  grunt.loadNpmTasks(<span class="string">'grunt-contrib-sass'</span>)
  grunt.loadNpmTasks(<span class="string">'grunt-contrib-concat'</span>)

  grunt.registerTask(<span class="string">'dev'</span>, [<span class="string">'sass:dist'</span>, <span class="string">'concat:dist'</span>]) <span class="comment">// C'est pas chouette ça ?</span>
  grunt.registerTask(<span class="string">'dist'</span>, [<span class="string">'sass:dist'</span>, <span class="string">'uglify:dist'</span>]) <span class="comment">// Et hop, je compresse si je lance $ grunt dist</span>
}</code></pre>
<p>Ha ! Nous y voilà ! Nous avons alors deux tâches <code>grunt dev</code> et <code>grunt dist</code> qui nous permettent dans tous les cas de générer nos css et dans un cas concaténer nos js, dans l&#39;autre les compresser (la compression fait aussi la concaténation implicitement).</p>
<p>Sauf que comme tout bon(ne) développeur/euse, vous êtes une grosse feignasse et compiler à chaque fois que vous faites des modifications sur vos fichiers va vite être saoulant.</p>
<p>Pour cela, une tâche existe, elle s&#39;appelle <code>watch</code> (via le package <a href="https://github.com/gruntjs/grunt-contrib-watch/"><code>grunt-contrib-watch</code></a>).</p>
<h2 id="regarde-ce-fichier-que-je-ne-euh-bref-">Regarde ce fichier que je ne... euh bref.</h2>
<p>Très simple, <code>watch</code> va vous permettre de &quot;regarder&quot; vos fichiers, savoir lesquels ont changé et donc lancer une action en fonction du type de fichiers.</p>
<p>Imaginons que l&#39;on veut par exemple compiler nos css à chaque fois que l&#39;on change un fichier <em>Sass</em>. Ou encore que l&#39;on concatène nos fichiers JavaScript dès que l&#39;on touche à l&#39;un d&#39;entre eux.</p>
<pre><code class="language-javascript">module.exports = <span class="function"><span class="keyword">function</span><span class="params">(grunt)</span> {</span>

  grunt.initConfig({
    sass: {
      dist: {
        options: {
          style: <span class="string">'expanded'</span>
        },
        files: {
          <span class="string">"expand"</span>: <span class="literal">true</span>,
          <span class="string">"cwd"</span>: <span class="string">"src/styles/"</span>,
          <span class="string">"src"</span>: [<span class="string">"*.scss"</span>],
          <span class="string">"dest"</span>: <span class="string">"dist/styles/"</span>,
          <span class="string">"ext"</span>: <span class="string">".css"</span>
        }
      }
    },
    concat: {
      options: {
        separator: <span class="string">';'</span>
      },
      dist: {
        src: [<span class="string">'src/intro.js'</span>, <span class="string">'src/project.js'</span>, <span class="string">'src/outro.js'</span>],
        dest: <span class="string">'dist/built.js'</span>
      }
    },
    uglify: {
      options: {
        separator: <span class="string">';'</span>
      },
      dist: {
        src: [<span class="string">'src/intro.js'</span>, <span class="string">'src/project.js'</span>, <span class="string">'src/outro.js'</span>]
        dest: <span class="string">'dist/built.js'</span>
      }
    },
    watch: {
      scripts: {
        files: <span class="string">'**/*.js'</span>, <span class="comment">// tous les fichiers JavaScript de n'importe quel dossier</span>
        tasks: [<span class="string">'concat:dist'</span>]
      },
      styles: {
        files: <span class="string">'**/*.scss'</span>, <span class="comment">// tous les fichiers Sass de n'importe quel dossier</span>
        tasks: [<span class="string">'sass:dist'</span>]
      }
    }
  })

  grunt.loadNpmTasks(<span class="string">'grunt-contrib-sass'</span>)
  grunt.loadNpmTasks(<span class="string">'grunt-contrib-concat'</span>)
  grunt.loadNpmTasks(<span class="string">'grunt-contrib-watch'</span>)

  grunt.registerTask(<span class="string">'dev'</span>, [<span class="string">'sass:dist'</span>, <span class="string">'concat:dist'</span>])
  grunt.registerTask(<span class="string">'dist'</span>, [<span class="string">'sass:dist'</span>, <span class="string">'uglify:dist'</span>])
}</code></pre>
<p>Maintenant, vous êtes capable à tout moment de compiler automatiquement vos fichiers en lançant simplement <code>$ grunt watch</code>.</p>
<p>Oui, comprenez bien que lorsque vous ajoutez une tâche dans la définition de la configuration de <strong>Grunt</strong>, elle est appelable directement. Typiquement, vous pouvez faire <code>$ grunt premier-niveau:deuxieme-niveau</code> soit par exemple <code>$ grunt sass:dist</code>. Vous n&#39;êtes pas obligé(e) de (re)définir chaque tâche via <code>grunt.registerTask()</code>.</p>
<p>Je ne sais pas si vous vous rappelez mais nous avions crée une tâche de base s&#39;appelant <code>default</code>. Cette tâche se lance dès que vous ne passez aucun paramètre à <strong>Grunt</strong> soit <code>$ grunt</code>. Vous pouvez aussi l&#39;appeler via <code>$ grunt default</code> mais aucun intérêt.</p>
<p>Tout ça pour dire qu&#39;il est serait sûrement intéressant de lancer la tâche <code>watch</code> dès qu&#39;on souhaite lancer <strong>Grunt</strong> étant donné que c&#39;est sûrement la tâche la plus récurrente que vous utiliserez.</p>
<p>C&#39;est parti !</p>
<pre><code class="language-javascript">module.exports = <span class="function"><span class="keyword">function</span><span class="params">(grunt)</span> {</span>

  grunt.initConfig({
    sass: {
      dist: {
        options: {
          style: <span class="string">'expanded'</span>
        },
        files: {
          <span class="string">"expand"</span>: <span class="literal">true</span>,
          <span class="string">"cwd"</span>: <span class="string">"src/styles/"</span>,
          <span class="string">"src"</span>: [<span class="string">"*.scss"</span>],
          <span class="string">"dest"</span>: <span class="string">"dist/styles/"</span>,
          <span class="string">"ext"</span>: <span class="string">".css"</span>
        }
      }
    },
    concat: {
      options: {
        separator: <span class="string">';'</span>
      },
      dist: {
        src: [<span class="string">'src/intro.js'</span>, <span class="string">'src/project.js'</span>, <span class="string">'src/outro.js'</span>],
        dest: <span class="string">'dist/built.js'</span>
      }
    },
    uglify: {
      options: {
        separator: <span class="string">';'</span>
      },
      dist: {
        src: [<span class="string">'src/intro.js'</span>, <span class="string">'src/project.js'</span>, <span class="string">'src/outro.js'</span>]
        dest: <span class="string">'dist/built.js'</span>
      }
    },
    watch: {
      scripts: {
        files: <span class="string">'**/*.js'</span>, <span class="comment">// tous les fichiers JavaScript de n'importe quel dossier</span>
        tasks: [<span class="string">'concat:dist'</span>]
      },
      styles: {
        files: <span class="string">'**/*.scss'</span>, <span class="comment">// tous les fichiers Sass de n'importe quel dossier</span>
        tasks: [<span class="string">'sass:dist'</span>]
      }
    }
  })

  grunt.loadNpmTasks(<span class="string">'grunt-contrib-sass'</span>)
  grunt.loadNpmTasks(<span class="string">'grunt-contrib-concat'</span>)
  grunt.loadNpmTasks(<span class="string">'grunt-contrib-watch'</span>)

  grunt.registerTask(<span class="string">'default'</span>, [<span class="string">'dev'</span>, <span class="string">'watch'</span>]) <span class="comment">// Oui, je conseille de toujours compiler une fois avant de lancer watch.</span>
  grunt.registerTask(<span class="string">'dev'</span>, [<span class="string">'sass:dist'</span>, <span class="string">'concat:dist'</span>])
  grunt.registerTask(<span class="string">'dist'</span>, [<span class="string">'sass:dist'</span>, <span class="string">'uglify:dist'</span>])
}</code></pre>
<p>That&#39;s it. Nous avons maintenant tout le nécessaire pour compiler des css, du js, l&#39;optimiser, ainsi qu&#39;avoir une commande de développement avec compilation automatique.</p>
<p>Et puisque je suis maniaque, nous allons ranger un peu :</p>
<pre><code class="language-javascript">module.exports = function(grunt) {

  // Je préfère définir mes imports tout en haut
  grunt.loadNpmTasks(&#39;grunt-contrib-sass&#39;)
  grunt.loadNpmTasks(&#39;grunt-contrib-concat&#39;)
  grunt.loadNpmTasks(&#39;grunt-contrib-watch&#39;)

  var jsSrc = [&#39;src/intro.js&#39;, &#39;src/project.js&#39;, &#39;src/outro.js&#39;]
    , jsDist = &#39;dist/built.js

  // Configuration de Grunt
  grunt.initConfig({
    sass: {
      dist: {
        options: {
          style: &#39;expanded&#39;
        },
        files: {
          &quot;expand&quot;: true,
          &quot;cwd&quot;: &quot;src/styles/&quot;,
          &quot;src&quot;: [&quot;*.scss&quot;],
          &quot;dest&quot;: &quot;dist/styles/&quot;,
          &quot;ext&quot;: &quot;.css&quot;
        }
      },
      dev: {} // A vous de le faire ! vous verrez que certaines options Sass sont plus intéressantes en mode dev que d&#39;autres.
    },
    concat: {
      options: {
        separator: &#39;;&#39;
      },
      compile: { // On renomme vu qu&#39;on a pas de mode dev/dist. Dist étant une autre tâche : uglify
        src: jsSrc, // Vu qu&#39;on doit l&#39;utiliser deux fois, autant en faire une variable.
        dest: jsDist // Il existe des hacks plus intéressants mais ce n&#39;est pas le sujet du post.
      }
    },
    uglify: {
      options: {
        separator: &#39;;&#39;
      },
      compile: {
        src: jsSrc,
        dest: jsDist
      }
    },
    watch: {
      scripts: {
        files: &#39;**/*.js&#39;,
        tasks: [&#39;scripts:dev&#39;]
      },
      styles: {
        files: &#39;**/*.scss&#39;,
        tasks: [&#39;styles:dev&#39;]
      }
    }
  })

  grunt.registerTask(&#39;default&#39;, [&#39;dev&#39;, &#39;watch&#39;])
  grunt.registerTask(&#39;dev&#39;, [&#39;styles:dev&#39;, &#39;scripts:dev&#39;])
  grunt.registerTask(&#39;dist&#39;, [&#39;styles:dist&#39;, &#39;scripts:dist&#39;])

  // J&#39;aime bien avoir des noms génériques
  grunt.registerTask(&#39;scripts:dev&#39;, [&#39;concat:compile&#39;])
  grunt.registerTask(&#39;scripts:dist&#39;, [&#39;uglify:compile&#39;])

  grunt.registerTask(&#39;styles:dev&#39;, [&#39;sass:dev&#39;])
  grunt.registerTask(&#39;styles:dist&#39;, [&#39;sass:dist&#39;])
}</code></pre>
<p>Avec ça, je pense qu&#39;on est pas trop mal. Il reste des optimisations éventuelles à faire et nombreuses autres tâches intéressantes peuvent être ajoutées comme <a href="https://github.com/gruntjs/grunt-contrib-jshint/">jshint</a>. Cela fera probablement office d&#39;un autre article.</p>
<p>J&#39;espère que vous y voyez maintenant un peu plus clair dans <strong>Grunt</strong> ainsi que dans la compilation côté front-end. <strong>Grunt</strong> est un excellent produit, avec une communauté réactive et il est rare qu&#39;une tâche que vous souhaitiez mettre en place n&#39;existe pas.</p>
<p>Bon workflow !</p>

]]></description>
              <pubDate>Sat, 16 November 2013 01:00:00 +0100</pubDate>
              <link>/dist/posts/js/premiers-pas-avec-grunt/index.html</link>
              <guid isPermaLink="true">/dist/posts/js/premiers-pas-avec-grunt/index.html</guid>
          </item>

          <item>
              <title>Structurer son projet avec Revel et Mgo</title>
              <description><![CDATA[

<p>Tu te sens l’âme d’un rebelle ? Tu veux tester de la techno atypique ? Ça tombe
bien, aujourd’hui on est là pour ça. On va toucher à un sujet pas forcément 
majoritaire : le langage Go. Si tu ne connais pas les bases, je t’invite à aller
sur la <a href="http://goo.gl/EF1rIa">homepage du projet</a> et à parcourir le 
<a href="http://goo.gl/7z0uzx">go-tour anglais</a> ou 
<a href="http://goo.gl/XMwsIY">celui en français</a>, c&#39;est un showcase complet du langage 
(et très bien fichu).
Mais si t&#39;es juste curieux et que comprendre chaque pixel de l&#39;article n&#39;est pas
une obsession pour toi, tu devrais pouvoir voir de quoi on parle. Même 
<a href="/le-crew/">Nyalab</a> y est arrivé.</p>
<p>Dans cet article on va voir <strong>comment brancher un projet go+revel à une base de 
données mongodb</strong> et obtenir ainsi une base de travail sympa pour explorer le
développement web avec Go.</p>
<h2 id="les-technos-utilis-es">Les technos utilisées</h2>
<h3 id="-golang-http-golang-org-"><a href="http://golang.org">Golang</a></h3>
<p>Langage compilé, publié en 2009, communément considéré comme “désorienté objet”, 
c’est une alternative solide au C/C++ qui prône un découpage modulaire (par 
“package”) des applications. Il est prédisposé à une utilisation en 
développement web grâce à un package natif de gestion des réseaux et du 
protocole http.</p>
<h3 id="-revel-http-robfig-github-io-revel-"><a href="http://robfig.github.io/revel/">Revel</a></h3>
<p>Framework développé en Go et pour Go. Il intègre tout ce qu’il faut pour
développer une application web : rechargement du code à chaud, gestion des urls
par routing, parsing des paramètres GET et POST, mécanisme de validation des
données, gestion de sessions, gestion du cache, framework de tests et même
moteur de tâches planifiées cron-likes. Il a pour particularité d’être
complètement découplé sur la partie modèle et ne fourni aucun ORM ou ODM,
juste un petit module pour gérer des transactions sur des bases sql-like.</p>
<h3 id="-mgo-http-labix-org-mgo-"><a href="http://labix.org/mgo">Mgo</a></h3>
<p>Driver Go complet pour MongoDB, permettant d’établir la connexion et d’envoyer
des requêtes. Il dispose d’un mécanisme de mapping des documents mongodb sur les
type struct de Go.</p>
<h3 id="-mongodb-http-www-mongodb-org-"><a href="http://www.mongodb.org/">MongoDB</a></h3>
<p>Base de données NoSql agile et scalable, les documents sont stockés au format
json dans des collections. Le requêtage se fait en manipulant des objets et des
fonctions javascript.</p>
<h2 id="attends-attends-pourquoi-go-">Attends, attends ... Pourquoi Go ?</h2>
<p>Le premier vrai argument, c&#39;est la <strong>performance</strong>. Sans rentrer dans
l&#39;explication hyper poussée d&#39;un <a href="http://goo.gl/3dqA7q">benchmark</a>, on peut
affirmer sans trop de risque que Go se hisse au moins au niveau de node.js. On
va pas risquer de vexer les autres membres du crew avec des affirmations
trollesques dès le premier post.</p>
<p>On peut aussi ajouter que Go est un <strong>langage moderne</strong>, qui inclut toutes les
<strong>petites friandises pour attirer le développeur</strong> curieux et assoiffé de
qualité. Framework de tests et outil de mise en forme du code sont natifs et
permettent à la techno d&#39;échapper aux interminables guerres de conventions :</p>
<blockquote>
<p>De toutes façons le no-newline avant &quot;{&quot; c&#39;est vraiment pour les pourritures
responsables de 99% des maux de la Terre.</p>
<ul>
<li><cite>Un évangeliste du PSR</cite></li>
</ul>
</blockquote>
<p>Troisième argument de choix en Go : la <strong>simplicité de parallélisation</strong>.
Personne ne viendra te dire <em>&quot;ça c&#39;est synchrone, sry bro.&quot;</em> ou <em>&quot;ça c&#39;est
asynchrone, callback it bitch.&quot;</em>. Tout repose sur le mot clef qui a donné son
nom au langage (ou l&#39;inverse) <code>go</code>. Tu peux te faire un <code>go myFunc()</code> et paf !
Tout ce qui est appelé dans myFunc() saute sur un thread séparé. Et pour gérer
la synchronicité entre plusieurs thread il y a un mécanisme de canaux. Ce sont
des files FIFO (the First In is the First Out) dont la lecture est bloquante
(il existe des techniques évoluées pour faire du polling, cf
<a href="http://goo.gl/ijKHTq">gotour#68</a>).</p>
<p>Pour finir, cerise sur le gateau, <strong>Go compile vite</strong>, extrêment vite, et ça va
sauver ton intégrité mentale sur les gros projets. Par contre c&#39;est foutu pour
tes pauses cafés aux prétextes douteux.</p>
<h2 id="let-s-go-nojoke-siriouz-bizness-">Let’s Go (#nojoke, siriouz bizness)</h2>
<p>On va partir du principe que tu as Go et Revel prêts pour la baston. On attaque
direct à sec par le classique “revel new” puisqu&#39;on va partir de la structure de
base.</p>
<pre><code>revel new github.com/OwlyCode/PutainDeProjet</code></pre>
<p>Là théoriquement, tu te retrouves avec la structure par défaut du boilerplate
revel, quelque chose comme ça:</p>
<ul>
<li>app<ul>
<li>controllers</li>
<li>views</li>
</ul>
</li>
<li>conf</li>
<li>messages</li>
<li>public</li>
<li>tests</li>
</ul>
<p>C’est là qu’on se met au boulot. On a de quoi faire un site complet avec ça mais
 aucune trace de gestion de base de données là dedans. On commence donc par
 créer un dossier <code>app/modules</code> et un sous dossier <code>app/modules/mongo</code>. C’est
 dans ce dossier que va se trouver notre gestionnaire de connexion à mongoDB.
 En fait ce n’est rien de plus qu’un binding entre Revel et Mgo. La technique 
 utilisée pour brancher ce binding côté Revel est celle des 
 <a href="http://robfig.github.io/revel/manual/interceptors.html">interceptors</a>.</p>
<pre><code>package mongo

import (
    &quot;github.com/robfig/revel&quot;
    &quot;labix.org/v2/mgo&quot;
    &quot;sync&quot;
)

// Extension du controlleur.
type Mongo struct {
    *revel.Controller
    MongoSession  *mgo.Session
    MongoDatabase *mgo.Database
}

// Stockage global de la session dont la visibilité est restreinte au package.
var session *mgo.Session

// Singleton
var dial sync.Once

// Renvoie la session mgo en cours, si aucune n&#39;existe, elle est créée.
func GetSession() *mgo.Session {

    host, _ := revel.Config.String(&quot;mongo.host&quot;)

    // Grâce au package sync cette fonction n&#39;est appelée
    // qu&#39;une seule fois et de manière synchrone.
    dial.Do(func() {
        var err error
        session, err = mgo.Dial(host)
        if err != nil {
            panic(err)
        }
    })

    return session
}

// Alimente les propriétés affectées au controlleur en clonant la session mongo.
func (c *Mongo) Bind() revel.Result {
    // Oublie pas de mettre mongo.database dans le app.conf, genre &quot;localhost&quot;
    databaseName, _ := revel.Config.String(&quot;mongo.database&quot;)

    c.MongoSession = GetSession().Clone()
    c.MongoDatabase = c.MongoSession.DB(databaseName)

    return nil
}

// Ferme un clone
func (c *Mongo) Close() revel.Result {

    if c.MongoSession != nil {
        c.MongoSession.Close()
    }

    return nil
}

// Fonction appelée au chargement de l&#39;application.
// Elle effectue un appel a notre fonction Bind avant
// chaque execution du controlleur.
func init() {
    revel.InterceptMethod((*Mongo).Bind, revel.BEFORE)
    revel.InterceptMethod((*Mongo).Close, revel.AFTER)
    // On veut aussi fermer le clone si le controlleur plante.
    revel.InterceptMethod((*Mongo).Close, revel.PANIC)
}</code></pre>
<p>On a créé notre connexion à mongo, mais maintenant on va aussi l’utiliser. Dans
le contrôleur, rien de plus simple :</p>
<pre><code>import (
    &quot;github.com/robfig/revel&quot;
    &quot;github.com/OwlyCode/PutainDeProjet/app/modules/mongo&quot;
)

type AppController struct {
    *revel.Controller
    mongo.Mongo // Le controlleur doit étendre notre type Mongo.
}

func (c *AppController) Index() revel.Result {
    usersCollection := c.MongoDatabase.C(&quot;users&quot;)
    // tu peux maintenant manipuler ta mgo.Collection.
    // [ ... ]
}</code></pre>
<p>Mais tu peux aussi l’appeler ailleurs dans le projet, par exemple dans un autre
module :</p>
<pre><code>import (
    &quot;github.com/OwlyCode/PutainDeProjet/app/modules/mongo&quot;
)

func DoStuff(user *models.User) {
    session := mongo.GetSession()
    defer session.Close() // Oublie pas de fermer le robinet à la fin!

    // tu peux maintenant manipuler ta mgo.Session.
    // [ ... ]
}</code></pre>
<p><strong>C&#39;est bien beau de copier coller mais ...</strong></p>
<p>... tu te demandes certainement pourquoi on a créé un dossier <code>app/modules</code>, si
c’est pour n’y mettre qu’un sous dossier mongo dedans. Et c’est une très bonne
question. En fait, notre dossier mongo représente un module du projet bien
délimité. A l’avenir, si tu veux aussi brancher du mysql, et bien y a juste à
créer <code>app/modules/mysql</code>. Rien ne change pour l’existant et tu ne pollues pas
la racine de ton projet. L’autre avantage c’est qu’en un coup d’oeil dans ce
dossier tu as un aperçu direct des features de l’application.</p>
<p>Enfin, l&#39;approche module, c&#39;est aussi un gage de MVC. Admettons qu&#39;on veuille
coder une application de facturation, il nous suffit de créer un dossier
<code>app/modules/invoicing</code> et de travailler dans ce dossier sur toute la partie
métier. Comme par exemple le calcul des totaux, le calcul de la TVA etc... Grâce
 à cette approche, on garde des contrôleurs très fins et restreints à ce que
 doit être leur rôle premier : faire communiquer le modèle et la vue.</p>
<h2 id="mod-les-globaux-mod-les-locaux">Modèles globaux, modèles locaux</h2>
<p>J’ai évoqué plus haut dans la liste des technos une feature hyper sexy de mgo :
le mapping des documents mongodb en json sur les types struct. Ce qui veut dire
qu’avec mgo, on peut définir des modèles bien structurés. Certains seront
communs à toute l’application, par exemple un utilisateur, mais d’autres seront
spécifiques à un module, comme par exemple une facture.</p>
<p>Une bonne pratique est d’approcher le rangement des modèles selon cette
structure:</p>
<ul>
<li>app<ul>
<li>controllers</li>
<li><strong>models</strong></li>
<li>modules<ul>
<li>invoicing<ul>
<li>engine</li>
<li><strong>models</strong></li>
</ul>
</li>
<li>mongo</li>
</ul>
</li>
<li>views</li>
</ul>
</li>
<li>conf</li>
<li>messages</li>
<li>public</li>
<li>tests</li>
</ul>
<p>Le but du jeu évidemment c&#39;est d&#39;avoir le moins de modèles globaux possibles.
Idéalement, si le dossier <code>app/models</code> n&#39;existe pas ce n&#39;est pas plus mal. Mais
attention à ne pas chercher à l&#39;éliminer au prix de la modularité du code. Il
vaut mieux avoir un modèle explicitement déclaré comme global plutot que de
l&#39;isoler dans un module et de rendre tous les autres modules du projet
dépendants de ce dernier.</p>
<p>Pourquoi c&#39;est important ? C&#39;est surtout parce que ça pose les bonnes questions
et amène les bonnes remarques. &quot;Vais-je avoir besoin de ce modèle réellement
PARTOUT ?&quot;, &quot;C&#39;est étrange j&#39;ai créé deux modules mais au final je passe mon
temps à faire des va-et-vient de l&#39;un à l&#39;autre... Peut être que je devrais les
fusionner.&quot; ou encore &quot;90% de mon projet se trouve dans un seul module, il y a
peut être un problème.&quot;. Mais au delà de ça, ça te permets d&#39;isoler des modules
quasi autonomes (deux ou trois coups d&#39;abstraction avec des interfaces et ça
roule). Tu pourras plus tard les sortir de ton projet si par exemple tu veux les
réutiliser sur un autre (svn include pour les ancêtres, git submodules pour les
autres).</p>
<h2 id="pour-aller-plus-loin">Pour aller plus loin</h2>
<p>Isoler distinctement le gestionnaire de connexion, la logique métier et les
modèles dans des modules est une première étape vers une architecture propre et
évolutive. Tu peux même pousser ça plus loin en utilisant des interfaces comme
je l&#39;ai brièvement mentionné un peu plus tôt, c&#39;est même d&#39;ailleurs ce que je te
conseille. Si tu veux creuser ce sujet là tu trouveras pas mal de monde qui s&#39;y
intéresse en fouinant sur le
<a href="http://goo.gl/qePO51">groupe de discussion des utilisateurs golang</a>.
Tu as par exemple ce gars là qui a
<a href="http://goo.gl/HZmrHJ">remplacé sa dépendance à la librairie mgo par des interfaces</a>
pour éviter d&#39;inclure le package a chaque fois et faciliter ses tests. Tu peux
envisager de faire la même chose pour découpler tes modèles et la logique métier
.</p>
<p>En attendant il ne me reste qu&#39;à te souhaiter une bonne coding night, tu as
toutes les armes nécessaires pour gérer mongo dans ton projet revel. ;-)</p>

]]></description>
              <pubDate>Mon, 11 November 2013 01:00:00 +0100</pubDate>
              <link>/dist/posts/backend/golang-structurer-revel-et-mgo/index.html</link>
              <guid isPermaLink="true">/dist/posts/backend/golang-structurer-revel-et-mgo/index.html</guid>
          </item>

          <item>
              <title>Vagrant, enlarge your VM</title>
              <description><![CDATA[

<p>Vagrant, au cas où tu ne connaîtrais pas encore, permet de fournir des
environnements de développements reproductibles, facilement configurables et
qui se partagent entre les membres de l’équipe. En gros, tu vas pouvoir décrire
et configurer des machines virtuelles (VM) depuis un seul fichier texte,
le <code>Vagrantfile</code>.  Plutôt pratique pour avoir un environnement de dev
équivalent à celui de la prod. Et tout cela avec un processus simplifié
à l&#39;extrême.</p>
<h1 id="et-c-est-pour-qui-le-beau-joujou-">Et c’est pour qui le beau joujou ?</h1>
<p>Vagrant s’adresse principalement à toi, mais aussi à un public
de <strong>développeurs</strong> qui souhaitent pouvoir mettre en place rapidement
un environnement de dev avec une machine virtuelle (genre apache-php-<em>sql)
sans y passer trop de temps.
Vagrant, c’est aussi pour des <em>*devops</em></em> qui voudraient tester la mise en
place et le provisioning de leur infra.
Dans la doc, ils disent même que ça s’adresse aux designers
(pour dire si c’est simple) mais faut pas déconner non plus,
on a jamais vu un designer dégainer une console :)</p>
<p>Globalement le workflow vagrant se résume à 2-3 commandes,</p>
<ol>
<li><code>vagrant init</code> au début du projet
Puis</li>
<li><code>vagrant up</code> pour lancer la VM.</li>
<li><code>vagrant halt</code>pour l’arrêter.</li>
</ol>
<h1 id="etape-1-vagrant-init">Etape 1 - vagrant init</h1>
<p>Vagrant fournit un support pour les principales plateformes de virtualisation,
appelées Provider dans la langue de Justin Bieber et avec par défaut celui
pour virtualbox.  Et  cerise sur le clafoutis, tu as aussi la possibilité
de configurer / provisionner tes box avec des scripts Chef ou Puppet
(ou juste un script shell si t’es old-school \o/ ).</p>
<p>Bon, je suppose que c’est encore un peu flou, alors voilà comme ça se présente.
Une fois installé ( <a href="http://downloads.vagrantup.com/">http://downloads.vagrantup.com/</a> ), tu devrais avoir
une nouvelle commande de dispo.
Alors dégaine ton terminal et envoie un <code>vagrant init</code>. Ça devrait créer
un fichier <code>Vagrantfile</code>  qui va décrire ta machine virtuelle
(ne t’inquiète pas, c’est juste écrit en Ruby).
En gros de quelle box de base tu pars, comment tu la configures (réseaux,
dossier partagé entre la VM et le Host, ta machine réelle) et comment tu
la provisionnes (via un shell, avec un script Puppet...)</p>
<h2 id="la-config-de-la-box">La config de la box</h2>
<p>Ensuite voilà les quelques points à paramétrer.</p>
<ul>
<li><code>config.vm.box = &quot;base&quot;</code>pour spécifier le nom d’une box préalablement
téléchargée.</li>
<li><code>config.vm.box_url = &quot;http://domain.com/path/to/above.box&quot;</code> Tu remplaces
par l’url de la box de tes rêves. Tu peux trouver une liste assez complètes
de box plus ou moins configurées sur le site <a href="http://www.vagrantbox.es/">http://www.vagrantbox.es/</a>
( ProTip™: Choisis bien le provider correspondant à ton gestionnaire de VM)</li>
<li><code>config.vm.network :forwarded_port, guest: 80, host: 8080</code> Pratique
pour accéder au serveur qui tourne sur la VM. Après tu retrouves un peu
les mêmes options de config réseaux qu’avec virtualbox
(réseaux privés, connexion par pont...)</li>
<li><code># config.vm.synced_folder &quot;../data&quot;, &quot;/vagrant_data&quot;</code> Avec ça,
tu vas pouvoir ajouter un répertoire qui sera partagé
avec ta machine virtuelle.
Par défaut, Vagrant te permet d’accéder au répertoire courant
depuis <code>/home/vagrant</code> dans la VM.</li>
</ul>
<h2 id="le-provisioning-de-box">le provisioning de box</h2>
<p>Alors attention, c&#39;est un des trucs cools avec vagrant. Avant, quand tu
voulais te monter une VM pour travailler, il fallait aussi la configurer,
installer les bonnes versions de chaque brique que le projet utilisé. Ça‎
pouvait être long, pénible, et surtout prendre du temps.
Avec Vagrant, tu peux automatiser cette partie, soit en utilisant simplement
un script, soit avec un moyen moderne comme Chef ou Puppet. Et si jamais t&#39;as
besoin d&#39;un truc particulier, une config que tu utilises souvent, tu peux
toujours packager la box que t&#39;as configuré avec amour pour pouvoir la
réutiliser dès que l&#39;occasion se présente. Sinon tu peux déjà trouver pas mal
de box déjà prêtes à l&#39;emploi, avec ou sans support pour puppet, chef...</p>
<p>La suite du fichier contient des exemples de type de provisioning
(Puppet, Chef solo ou Chef server)
Et si jamais tu souhaites lancer un script de provisioning :</p>
<pre><code class="language-ruby"><span class="constant">Vagrant</span>.configure(<span class="string">"2"</span>) <span class="keyword">do</span> |config|
  config.vm.provision <span class="string">"shell"</span>, <span class="symbol">path:</span> <span class="string">"provision.sh"</span>
<span class="keyword">end</span></code></pre>
<blockquote>
<p>Vagrant te permet aussi de créer tes propres box déjà provisionnées via
la commande vagrant package. C’est assez pratique quand tu dois
télécharger-compiler-installer tout l’internet</p>
</blockquote>
<h1 id="etape-2-vagrant-up">Etape 2 - vagrant up</h1>
<p>Bon, la première fois risque de prendre du temps, parce que vagrant
va télécharger ta box, puis lancer le provisioning. Profites-en pour faire
un tour sur <a href="http://vim-adventures.com/">http://vim-adventures.com/</a> et jouer un peu en attendant.</p>
<p>Une fois terminé, tu as maintenant une box dispo avec laquelle travailler.</p>
<h1 id="etape-3-joie-o-">Etape 3 - Joie \o/.</h1>
<p>Je pensais faire une troisième partie sur comment arrêter la VM mais
ça présente pas vraiment d’intérêt car ça tient en une ligne de commande.</p>
<p>Bref, le point important de tout ça, c’est que les autres relous de ton équipe
ne pourront plus dire que pourtant ça marche bien chez eux, et qu’ils
comprennent pas, c’est vraiment étrange... enfin sauf s&#39;ils sont
de mauvaise foi :)</p>
<ul>
<li>L’intégrateur n’aura plus à se taper 14 installations de trucs en
ligne de commande qu’il ne retient jamais, pour rajouter un bout de css
ou de js.
(ProTip™: là, ça rentre sur un post-it !)</li>
<li>Le dev backend n’aura plus à pleurer quand on lui demande de remettre le nez
dans une projet vieux de 2 ans avec que des versions de php / ruby ou mysql
dépassées qui vont casser la superbe config qu’il a mis 1 semaine à fignoler
avec les dernières techno à la mode.</li>
<li>l’admin sys pourra packager les box de chaque projets, provisionnées
et configurées et pour éviter d’avoir à configurer les postes des autres
dev à chaque changement de projet.</li>
</ul>
<h1 id="quelques-commande-pratiques">Quelques commande pratiques</h1>
<blockquote>
<p><code>vagrant ssh</code> te permet de te connecter en mode terminal
<code>vagrant status</code> pour les têtes <del>à claques</del> en l’air</p>
</blockquote>
<h1 id="quelques-liens">Quelques liens</h1>
<ul>
<li><a href="http://docs.vagrantup.com/v2/">la documentation officielle de <del>viagra</del> vagrant</a></li>
<li><a href="https://github.com/putaindecode/propositions-de-posts/issues/4">Virtualisation sur OSx et accès à localhost</a></li>
<li><a href="http://jolicode.com/blog/cuisinez-vos-serveurs-comme-un-chef-premiere-partie">Cuisinez vos serveurs comme un Chef – Première partie</a></li>
</ul>

]]></description>
              <pubDate>Fri, 08 November 2013 01:00:00 +0100</pubDate>
              <link>/dist/posts/env/vagrant-enlarge-your-vm/index.html</link>
              <guid isPermaLink="true">/dist/posts/env/vagrant-enlarge-your-vm/index.html</guid>
          </item>

          <item>
              <title>HTML ? Hâche-Thé-Aime-Elle vous dites ?</title>
              <description><![CDATA[

<p>Ahh, le HTML. LE <a href="http://fr.wikipedia.org/wiki/HTML">H.T.M.L</a>. Sacré langage hein ?</p>
<p>On le connait tous ce fameux truc qu&#39;on retrouve dans pas mal d&#39;URLs : <code>.html</code>.
Oui d&#39;accord par le passé on avait l&#39;extension de radin <code>.htm</code>, mais elle n&#39;a
clairement pas duré.</p>
<p>Vous vous demandez déjà ce qu&#39;il-y-a à raconter sur l&#39;HTML peut être ? Et bien,
je ne suis pas là pour vous apprendre toutes les balises, leurs enfants, parents,
les cousins cousines, patati patata… Ah ça non, j&#39;ai autre chose à faire,
et vous aussi. Et si c&#39;est ce que vous cherchez, vous trouverez ce qu&#39;il vous
faut sur <a href="http://docs.webplatform.org/wiki/html/elements">tout</a>
<a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element">un</a>
<a href="http://www.w3.org/html/wg/drafts/html/CR/dom.html#elements">tas</a>
<a href="http://en.wikipedia.org/wiki/HTML_element">d&#39;autres</a>
<a href="http://www.vectorskin.com/referentiels-standards-w3c/balises-html5/">sites</a>.</p>
<p>Ce que je vais faire par contre, c&#39;est tenter de partager un document sérieux
(dans le fond hein) avec tout pleins de conseils super pertinents pour que vous
écriviez de l&#39;HTML comme personne.
Non je déconne. En fait, ça va être la grosse marrade avec les trucs
les plus nazes que je peux vous raconter. C&#39;est parti mon jQuéri.</p>
<h2 id="l-ancien-testament">L&#39;ancien testament</h2>
<p>Si vous avez ouvert ne serait-ce que quelques documents HTML dans votre vie,
vous avez du croiser ce qu&#39;on appelle un <a href="http://fr.wikipedia.org/wiki/Doctype">doctype</a>
qui ressemble à ça:</p>
<pre><code class="language-markup">&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;
   &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;</code></pre>
<p>Vous pourrez remarquer dans ce <del>petit</del> gros bout de code bien relou qu&#39;il y&#39;a
une <a href="http://fr.wikipedia.org/wiki/Uniform_Resource_Locator">URL</a>:
c&#39;est tout simplement la DTD (doctype) du langage en question.
Avec les spécifications pour la validation, toussa toussa…
Si vous avez 2 minutes, allez jeter un coup d&#39;oeil.</p>
<p>Je ne vais pas vous le cacher, et même si en théorie, par héritage de SGML/XML
ça part d&#39;une bonne intention, dans la pratique ça sert juste à se toucher la
nouille sur la validation.
Car aujourd&#39;hui HTML (5) n&#39;est clairement plus du XML.</p>
<p>Oui bon ok, moi même à une époque j&#39;ai eu ma passe où je collais ce petit badge
partout dans mes footers:</p>
<figure>
  <a href="http://validator.w3.org/check?uri=referer">
    <img src="http://www.w3.org/Icons/valid-xhtml10"
        alt="Valid XHTML 1.0 Transitional" height="31" width="88" />
  </a>
  <figcaption>Ça pète la classe hein ?</figcaption>
</figure>

<p>Mais bon les conneries, ça va un moment.
Pour info, j&#39;ai du valider le code suivant pour obtenir ce logo:</p>
<pre><code class="language-markup">&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;
   &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;
 &lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot;&gt;
&lt;head&gt;
  &lt;title&gt; &lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;

&lt;/body&gt;
&lt;/html&gt;</code></pre>
<p>Ben dites donc, c&#39;est propre tout ça. Un petit document tout vide mais déjà
bien rempli.
Mais attendez en 2013, on peut pas faire mieux ? Oh si !</p>
<h2 id="le-nouveau-testament">Le nouveau testament</h2>
<pre><code class="language-markup">&lt;!doctype html&gt;
&lt;title&gt; &lt;/title&gt;</code></pre>
<p>Il faut savoir qu&#39;un simple document <em>valide</em>, peut se résumer à ça.
Oui oui mes cocos, ce document est parfaitement valide. Voilà j&#39;voulais vous le
dire. Arrêtez d&#39;utiliser des doctypes dans tous les sens, ça ne sert à rien.
Sachant la qualité du code qu&#39;on trouve sur les internets, les navigateurs
s&#39;arrêtent au parsing lorsqu&#39;ils voient ça <code>&lt;!doctype html</code>
(C&#39;est <a href="http://paulrouget.com/">Paul Rouget</a> qui me l&#39;a dit, je le crois donc
sur parole).
Et après ma petite parenthèse ci dessous, je vais vous expliquer pourquoi.</p>
<p>Car je sais ce que certains vont me rétorquer.</p>
<blockquote>
<p>Oui mais moi monsieur, je valide en <strong>XHTML 1.1 Strict Turbo X Prime Ultra</strong><br />
Puis ton document valide là, il sera valide quand HTML5 sera finalisé…</p>
</blockquote>
<p>Dans un sens ils n&#39;auraient pas tort. Mais dans la pratique, les navigateurs
s&#39;en contre branlent de savoir quel type d&#39;HTML vous utilisez
<small>(à moins que vous aimiez jouer avec la mort et que vous utilisez le
prologue XML lorsque vous servez de l&#39;XHTML…)</small>.
Car quand bien même vous utilisez un doctype à rallonge, il est tout à fait
possible que vous vous chiiez, et que vous laissiez des erreurs.
Oui, l&#39;erreur est humaine…
Puis HTML 5 est déjà bien implémenté dans les grandes lignes. Et ça car il est
presque rétrocompatible.
Vous devriez le comprendre d&#39;ici la fin de cet écrit. Ou pas. Mais je vous le
dit, il a été pensé dans ce sens.</p>
<p>Revenons à la validation. Du coup à quoi ça sert de valider ?
On va voir ça par un exemple digne des plus grands diplômes.</p>
<h2 id="ce-p-fout-la-merde-">Ce <code>&lt;p&gt;</code> fout la merde.</h2>
<p>Prenons le code suivant:</p>
<pre><code class="language-markup">&lt;!doctype html&gt;
&lt;title&gt;Putain de page&lt;/title&gt;
&lt;style&gt;
  p {
    margin-top: 2em;
    margin-bottom: 10em;
  }
&lt;/style&gt;
&lt;h1&gt;Ma première putain de page html&lt;/h1&gt;
&lt;p&gt;
  Ouais mec t&#39;as vu ce code de ouf ?
  Il est trop bien parce que:
  &lt;ul&gt;
    &lt;li&gt;Il est &lt;del&gt;valide&lt;/del&gt;&lt;/li&gt;
    &lt;li&gt;Il est beau&lt;/li&gt;
  &lt;/ul&gt;
&lt;/p&gt;</code></pre>
<p>Certains d&#39;entre vous ont du remarquer la coquille.
Celle-là, mes élèves qui découvrent le HTML me la font à chaque fois lorsqu&#39;ils
codent leur super CV
(super exercice tavu, ils apprécient particulièrement le titre).</p>
<p>Toi là au fond, t&#39;as pas repéré le souci encore ?</p>
<p>Regarde plutôt le rendu:</p>
<iframe
  class="putainde-Post-iframe"
  height="350"
  src="/posts/html/hache-the-aime-elle-vous-dites/notvalid.html">
</iframe>

<blockquote>
<p>WAT ?
ET MON MARGIN BOTTOM KESSIFÉLÀ EN DEUBEULE ?</p>
</blockquote>
<p>Le rapport avec la validation me direz-vous ? Et bien plutôt que de perdre du
temps à comprendre le pourquoi du comment, en validant le code ci dessus,
l&#39;erreur vous est implicitement expliquée
(oui ce code n&#39;a qu&#39;une seule erreur à la validation).</p>
<blockquote>
<p>Line 17, Column 4: <strong>No p element in scope but a p end tag seen.</strong></p>
</blockquote>
<p>Typiquement, il faut savoir comprendre un message d&#39;erreur et savoir lire entre
les lignes. Pas faire &quot;mais monsieur, j&#39;comprends pas là&quot; (d&#39;ailleurs mes élèves
valident tous leur code, pour apprendre sur le tas, c&#39;est une bonne façon).</p>
<p>Celui là nous dit en gros : <em>je ne vois pas d&#39;element <strong>p</strong> à fermer dans le coin</em>.
Ca veut dire que… Ça veut dire que mon <strong>p</strong> ouvert n&#39;est pas reconnu ?
Mais attend qu&#39;est-ce que c&#39;est que cette histoire ?!</p>
<p>Si vous prenez 10 secondes pour inspecter ce code, vous allez vite vous
aperçevoir qu&#39;il est parsé ainsi:</p>
<pre><code class="language-markup">&lt;p&gt;…&lt;/p&gt;
&lt;ul&gt;…&lt;/ul&gt;
&lt;p&gt;&lt;/p&gt;</code></pre>
<p><em>Mais qu&#39;est-ce que… ? Hein ? Mais ? Quoi ? Comment ?</em></p>
<p>Oui vous avez bien vu. L&#39;HTML est parsé n&#39;importe comment. Enfin non il est parsé
comme il peut, au mieux.
Je pense que là vous commencez à comprendre ?</p>
<p>Ce que j&#39;essaye de vous montrer par là, ce qu&#39;il faut toujours faire attention
entre ce qu&#39;on écrit et ce qu&#39;on pense avoir comme résultat, même avec du
<em>simple</em> HTML.</p>
<p><strong>Bon après j&#39;espère qu&#39;en 2013, vous avez tous le réflexe d&#39;inspecter
l&#39;HTML dès que vous avez un truc bizarre en CSS ou en JavaScript… Si
c&#39;est pas encore le cas, prenez l&#39;habitude.</strong></p>
<h2 id="mais-du-coup-le-navigateur-il-fait-n-importe-quoi-">Mais du coup le navigateur il fait n&#39;importe quoi ?</h2>
<p>Le navigateur essaye clairement de faire au mieux.
Si vous inspectez l&#39;exemple précédent, vous vous apercevrez aussi que je n&#39;ai
mis aucune balise <code>&lt;html&gt;</code>, <code>&lt;head&gt;</code> ou <code>&lt;body&gt;</code>.
Pourquoi ? Ben car le parseur le fait à ma place.
Mais pourquoi il fait ça ?
Tout simplement car on oublie (très - trop ?) souvent de bien écrire.
Comme quand j&#39;écris en.</p>
<p>La balise <a href="https://developer.mozilla.org/fr/docs/Web/HTML/Element/tbody"><code>&lt;tbody&gt;</code></a>
est un bon exemple.
Si vous inspectez vos tableaux HTML, vous verrez vite fait que cette balise, que
quasiment personne ne connait/utilise, est pourtant nécessaire/utile.
Mais du coup, si je me fais une petite requête JavaScript
<code>document.querySelectorAll(&#39;table &gt; tr&#39;)</code>,
il est fort possible que je n&#39;aie pas ce que je souhaite.
<a href="http://codepen.io/MoOx/pen/esFjx">La preuve</a>.</p>
<p>Voyons une autre exemple: mettons nous à la place d&#39;un navigateur si,
alors que je suis en XHTML 1.1 Strict, je lui glisse une balise <code>&lt;center&gt;</code>.</p>
<ul>
<li><p><strong>Cas 1.</strong> Je n&#39;ai pas fait attention au doctype et je veux vraiment une balise
<code>&lt;center&gt;</code> : bah là, rien à dire à part <em>Merci</em>. Le navigateur essaye clairement
de faire au mieux, et dans un cas comme celui là, on ne peut que le remercier.</p>
</li>
<li><p><strong>Cas 2.</strong> Je sais exactement dans quel doctype je suis, j&#39;ai conscience de ce
que je fais: je joue au con, tant pis pour ma gueule !</p>
</li>
</ul>
<p>Dans tous les cas, le navigateur va laisser passer cette balise au cas où que.
Puis bon faut avouer que c&#39;est super pratique cette balise hein ?
Comme <code>&lt;blink&gt;</code> et <code>&lt;marquee&gt;</code> quoi. ❤</p>
<figure>
  <img src="/memes/canthandlemyswag.gif" alt="Can&#39;t handle my swag">
  <figcaption><marquee>Marquee for the win.</marquee></figcaption>
</figure>

<h2 id="note-de-service">Note de service</h2>
<p>S&#39;il vous plaît mesdames messieurs, lorsque vous faites du CSS inline, ou que
vous incorporez un JavaScript, arrêtez vous à des choses simples,
qui fonctionnent :</p>
<ul>
<li><p><code>&lt;style&gt;</code> suffit. Pas besoin de mettre un type, un langage etc. Et ça vous
évitera des <a href="http://codepen.io/MoOx/pen/sEzuJ">prises de têtes à la con</a>.
Puis vous avez déjà utilisé autre chose que du CSS vous ?!</p>
</li>
<li><p><code>&lt;script&gt;</code>, idem, même sur IE 6.
Pareil que précédement, pas besoin de mettre un hideux
<code>&lt;script type=&quot;text/javascript&quot; language=&quot;JavaScript 1.1&quot;&gt;</code>.
La moindre faute de frappe ne pardonne pas.
Aucun intêret de se fatiguer, sauf si votre <a href="https://code.google.com/p/ruby-in-browser/">script n&#39;est pas du JavaScript</a>.</p>
</li>
</ul>
<h2 id="le-mot-de-la-fin">Le mot de la fin</h2>
<p>Ne soyez jamais sûr de vous, que ce soit pour écrire de l&#39;HTML ou faire une mise
en prod&#39; un vendredi soir à <a href="http://www.miximum.fr/tranche_vie/62-le-bug-de-17h30">17h30</a>.
Faites pas les malins. Ne sous-estimez pas HTML.
Si ça merde quelque part, vérifiez plus loin que le bout de votre nez, que votre
règle CSS qui marche pas, ou votre morceau de JavaScript buggé.</p>
<h2 id="-aller-plus-loiiin-allez-plus-haaauuut-https-www-youtube-com-watch-v-bcylqudsn5g-t-39s-"><a href="https://www.youtube.com/watch?v=BCYLQUdsN5g&amp;t=39s">Aller plus loiiin, allez plus haaauuut… !</a></h2>
<ul>
<li><a href="https://github.com/necolas/idiomatic-html" lang="en">idiomatic-html</a>
(<a href="http://fr.wikipedia.org/wiki/Idiomatique">ceci n&#39;est pas une contraction d&#39;<em>idiot</em> et d&#39;<em>automatique</em></a>).</li>
<li><a href="https://github.com/necolas/idiomatic-css" lang="en">idiomatic-css</a> (traduction incluse)</li>
<li>Validation automatique dans un workflow Grunt:<ul>
<li><a href="https://github.com/praveenvijayan/grunt-html-validation">praveenvijayan/grunt-html-validation</a></li>
<li><a href="https://github.com/jzaefferer/grunt-html">jzaefferer/grunt-html</a> (basé sur validator.nu)</li>
</ul>
</li>
</ul>

]]></description>
              <pubDate>Thu, 07 November 2013 01:00:00 +0100</pubDate>
              <link>/dist/posts/html/hache-the-aime-elle-vous-dites/index.html</link>
              <guid isPermaLink="true">/dist/posts/html/hache-the-aime-elle-vous-dites/index.html</guid>
          </item>

          <item>
              <title>Versionner avec Git</title>
              <description><![CDATA[

<p>Chez Putain de Code, on aime se servir de <a href="http://git-scm.org/">Git</a> (et de GitHub, mais
c&#39;est une autre histoire), même si certains d&#39;entre nous (comme Lionel) ne s&#39;en
servent pas forcément bien.</p>
<p>Pour éviter ce genre de mésaventures, on s&#39;est dit qu&#39;on allait consacrer une
série d&#39;articles à ce merveilleux gestionnaire de versions, et de vous en faire
profiter par la même occasion.</p>
<p>Et si Git permet de faire à peu près ce qu&#39;on veut sur un dépôt, vous verrez
qu&#39;on peut assez facilement réparer ses erreurs (et même celles des autres
parfois !).</p>
<h2 id="c-est-quoi-git-">C&#39;est quoi Git ?</h2>
<p>Si vous êtes un développeur un tant soit peu consciencieux, vous utilisez un
gestionnaire de versions pour suivre l&#39;évolution de votre code. Non,
<a href="http://roland.entierement.nu/blog/2008/01/22/cpold-la-poudre-verte-du-suivi-de-versions.html">CPOLD</a> n&#39;est pas un gestionnaire de versions.</p>
<p>Git, c&#39;est un gestionnaire de versions décentralisé, aussi connu sous le terme
de DVCS (pour Distributed Version Control System) pour les amateurs.</p>
<p>Le terme <em>distribué</em> est très important car c&#39;est ce qui le différencie d&#39;autres
gestionnaires historiquement plus connus comme Subversion (SVN) ou le vénérable
CVS.</p>
<p>Ça veut dire que chaque développeur possède sa propre copie du dépôt, chez lui,
localement, contraîrement à un gestionnaire centralisé ou tout est… centralisé
sur un même serveur (merci Captain Obvious).</p>
<p>Git est principalement utilisable en ligne de commande, mais il existe des
interfaces graphiques sous les principaux OS du marché (OS X, Linux, Windows).
Ici on va traiter de la ligne de commande, car c&#39;est l&#39;arme de base du bon
développeur.</p>
<p>Je vous passe l&#39;installation, référez-vous à la documentation officielle pour
cette partie. (Ça se résume souvent à un <code>nom-du-package-manager install git</code>)</p>
<h2 id="comment-a-marche-">Comment ça marche ?</h2>
<p>Avant d&#39;attaquer la partie pratique, on va s&#39;attarder un peu à comment Git
fonctionne, parce qu&#39;à mon sens c&#39;est essentiel pour comprendre rapidement ce
qu&#39;il est possible de faire et pour se construire un modèle mental des
opérations.</p>
<p>Dans Git les commits sont tous reliés avec leur(s) parent(s) comme les maillons
d&#39;une chaîne qui pourrait avoir des bifurcations. Chaque commit stocke des
informations sur l&#39;état du dépôt à un instant donné (l&#39;état complet, pas
uniquement un diff).</p>
<p>On construit cette chaîne et ses bifurcations en créant des commits, en
branchant et en fusionant une branche dans une autre.</p>
<p>Enfin, une dernière chose que vous devez garder en tête c&#39;est qu&#39;un commit est
définitif dans le sens ou on ne pourra jamais modifier son contenu (on pourra
par contre le remplacer par un autre). Comme il est unique, il a un numéro qui
est un haché <code>SHA1</code> de diverses informations.</p>
<p>Ces <code>SHA1</code> sont utilisé à foison, habituez-y vous !</p>
<p>Voilà, maintenant sortons nous les doigts et regardons comment ça marche
concrètement.</p>
<h2 id="cr-er-ou-r-cup-rer-un-repo">Créer ou récupérer un repo</h2>
<p>Il y a deux manières de créer un dépôt Git : soit on en veut un tout neuf et on
utilise <code>git init</code>, soit on veut cloner un dépôt déjà existant et on utilise le
bien nommé <code>git clone</code>.</p>
<p>Appellé sans argument, <code>git init</code> initialise un dépôt dans le dossier courant,
on peut lui passer un nom de dépôt en argument pour le créer dans un
sous-dossier spécifique du dossier courant.</p>
<p>Du côté de <code>git clone</code>, on va passer l&#39;adresse d&#39;un dépôt, et optionnellement un
nom local pour le dépôt. Il va récupérer le dépôt à l&#39;adresse spécifiée (c&#39;est
bien foutu hein ?) puis le mettre soit dans un dossier du même nom soit dans un
dossier du nom spécifié en dernier argument.</p>
<p>Par exemple, si je veux cloner le dépôt du site :</p>
<pre><code class="language-bash">$ git clone https://github.com/putaindecode/website.git</code></pre>
<p>Ça va créer un dossier <code>website</code> avec le contenu du dépôt.</p>
<p><code>clone</code> accepte plusieurs types d&#39;adresse : HTTP(S), SSH, protocole Git dédié et
même des chemins locaux pour cloner un dépôt situé ailleurs sur le système de
fichiers.</p>
<p>Pour la suite, il va falloir se placer dans un dépôt avec le petit <code>cd</code> qui va
bien pour lancer les vraies commandes intéressantes de Git.</p>
<h2 id="premiers-commits">Premiers commits</h2>
<p>Pour commencer à s&#39;amuser, écrivez un bout de code dans un fichier et
sauvegardez le :</p>
<pre><code class="language-bash">$ cat &gt; putain_de_hello_world.rb
puts <span class="string">"Hello, putain de codeur !"</span>
^D</code></pre>
<p>On va tout se suite introduire l&#39;un des concepts déroutants de Git, <em>l&#39;Index</em>.
Git utilise trois zones distinctes pour les fichiers : le dossier de travail
(<em>Working Dir</em>) qui contient les fichiers dans leur version actuelle, <em>l&#39;Index</em>
qui permet de stocker les modifications et <code>HEAD</code> qui pointe vers le dernier
commit.</p>
<p>L&#39;idée, c&#39;est qu&#39;on peut modifier les fichiers comme on le souhaite, et
constuire le commit avec seulement les modifications que l&#39;on souhaite voir
apparaître.</p>
<p>Cette possibilité permet d&#39;avoir des commits atomiques, c&#39;est à dire qui
introduisent une modification simple. Ça évite de se retrouver avec un commit
mammouth qui change tout le programme d&#39;un coup et qui est un enfer pour le
futur développeur qui revient sur le code et qui cherche à comprendre la logique
de sa construction. Ce développeur, c&#39;est vous dans 1 ou 2 semaines.</p>
<p>Pour info, vous verrez parfois <em>l&#39;Index</em> appellé <em>Staging Area</em>, ou encore
<em>Cache</em>.</p>
<p>Git fournit des commandes pour passer les fichiers d&#39;un état à l&#39;autre. Elles
sont certes parfois un peu obscures, mais dans l&#39;ensemble c&#39;est pas si
difficile.</p>
<p>Dans notre cas, notre fichier n&#39;est même pas encore suivi par Git ! Vous pouvez
vérifier ça en utilisant <code>git status</code>, dont vous ne pourrez bientôt plus vous
passer :</p>
<pre><code class="language-bash">$ git status
<span class="comment"># Sur la branche master</span>
<span class="comment">#</span>
<span class="comment"># Validation initiale.</span>
<span class="comment">#</span>
<span class="comment"># Fichiers non suivis:</span>
<span class="comment">#   (utilisez "git add &lt;fichier&gt;..." pour inclure dans ce qui sera validé)</span>
<span class="comment">#</span>
<span class="comment">#    putain_de_hello_world.rb</span>
Aucune modification indexée mais des fichiers non suivis sont présents (utilisez <span class="string">"git add"</span> pour les suivre)</code></pre>
<p>Pour pallier celà, on utilise <code>git add</code> pour l&#39;ajouter direct à l&#39;index.</p>
<p>Dans notre cas, ça donne <code>git add putain_de_hello_world.rb</code></p>
<p>On peut utilise <code>git add</code> pour ajouter des dossiers entiers, des motifs, … Mais
soyez vigilants, c&#39;est une bonne source d&#39;erreurs souvent chiantes.</p>
<p>Vous pouvez vérifier que <code>git add</code> a bien marché avec la commande <code>git status</code>,</p>
<pre><code class="language-bash">$ git status
<span class="comment"># Sur la branche master</span>
<span class="comment">#</span>
<span class="comment"># Validation initiale.</span>
<span class="comment">#</span>
<span class="comment"># Modifications qui seront validées :</span>
<span class="comment">#   (utilisez "git rm --cached &lt;fichier&gt;..." pour désindexer)</span>
<span class="comment">#</span>
<span class="comment">#    nouveau : putain_de_hello_world.rb</span>
<span class="comment">#</span></code></pre>
<p>Ok c&#39;est prêt ! On lance maintenant <code>git commit</code> pour créer notre premier commit
(pas con le <em>naming</em> de la commande hein ?). Si tout se passe bien vous devriez
avoir un éditeur qui s&#39;ouvre pour écrire un message de commit. Prenez l&#39;habitude
de décrire votre changement sur la première ligne succintement et, si vous avez
besoin de détails, sautez une ligne et détaillez les modifications.</p>
<p>Un petit <code>git status</code> nous confirme qu&#39;on s&#39;est pas foiré (la preuve, tout est
propre) :</p>
<pre><code class="language-bash">$ git status
<span class="comment"># Sur la branche master</span>
rien à valider, la copie de travail est propre</code></pre>
<h2 id="inspecter">Inspecter</h2>
<p>Bon, c&#39;est bien beau de commiter, mais à un moment on arrive sur un projet en
cours et on aimerait bien savoir où on en est. Pour ça vous pouvez utiliser un
outil graphique (il y en a pour <a href="https://wiki.gnome.org/Gitg">Linux</a>, <a href="http://gitx.frim.nl/">OS X</a> et même sûrement
Windows) ou retrousser vos poils de barbe et sortir le bon vieux <code>git log</code>.</p>
<p>C&#39;est un vrai couteau-suisse qui va vous permettre d&#39;inspecter tout l&#39;historique
de votre dépôt, avec des options en veux-tu en voilà pour personnaliser
l&#39;affichage.</p>
<p>Un <code>git log</code> basique ça ressemble à ça :</p>
<pre><code class="language-bash">$ git log
commit <span class="number">8120</span>de7b7139e46b9cbc1c3ee89a02962dbc198e
Author: madx &lt;madx+github@yapok.org&gt;
Date:   Mon Nov <span class="number">4</span> <span class="number">23</span>:<span class="number">28</span>:<span class="number">11</span> <span class="number">2013</span> +<span class="number">0100</span>

    Premier commit</code></pre>
<p>Oui, c&#39;est le commit que je viens de faire dans la partie précédente. Comment
j&#39;en suis sûr ? Car je peux utiliser <code>git show</code> pour afficher les détails d&#39;un
objet Git (il n&#39;y a pas que des commits, mais on verra ça une prochaine fois).</p>
<p><code>git show</code> prend en argument le fameux <code>SHA1</code> du commit :</p>
<pre><code class="language-bash">$ git show <span class="number">8120</span>de7b7139e46b9cbc1c3ee89a02962dbc198e
commit <span class="number">8120</span>de7b7139e46b9cbc1c3ee89a02962dbc198e
Author: madx &lt;madx+github@yapok.org&gt;
Date:   Mon Nov <span class="number">4</span> <span class="number">23</span>:<span class="number">28</span>:<span class="number">11</span> <span class="number">2013</span> +<span class="number">0100</span>

    Premier commit

diff --git a/putain_de_hello_world.rb b/putain_de_hello_world.rb
new file mode <span class="number">100644</span>
index <span class="number">0000000</span>..ded37dc
--- /dev/null
+++ b/putain_de_hello_world.rb
@@ -<span class="number">0</span>,<span class="number">0</span> +<span class="number">1</span> @@
+puts <span class="string">"Hello, putain de codeur !!!"</span></code></pre>
<p>Dit comme ça, ça a pas l&#39;air de casser trois pattes à un canard, mais c&#39;est la
base de la base de la praticité. Je vous fait pas l&#39;insulte de vous expliquer le
détails, vous êtes sans doute assez malins pour comprendre ce que git raconte
sur la sortie de ces deux commandes.</p>
<p>Remarquez que <code>git show</code> affiche en bonus les différences introduites par un
fichier. Ces différences on peut aussi les voir avant de commiter avec <code>git
diff</code>, ce qui est bien pratique.</p>
<p>Entraînez vous maintenant à faire des commits, à inspecter et à farfouiller les
pages de <code>man</code>, c&#39;est la meilleure façon d&#39;apprendre. Après on va attaquer le
gros morceau, celui qui fait la force de Git.</p>
<figure>
  <img src="/memes/mind_blown.gif" alt="Mind blown">
</figure>

<h2 id="branchement-et-fusions">Branchement et fusions</h2>
<p>Créer une branche, ça permet de travailler sur une fonctionnalité ou un bug
précis, sans encombrer la ligne de conduite principale, qui peut évoluer sous
d&#39;autres contraintes.</p>
<p>Dans Git, les branches sont une partie essentielle de quasiment tout <em>workflow</em>,
et leur manipulation est très rapide et très légère.</p>
<p>Pour en revenir à mon histoire de maillon, créer une branche revient à créer un
point à partir duquel deux chaînes vont être possibles.</p>
<p>C&#39;est aussi simple qu&#39;un <code>git branch le-nom-de-ma-branche</code>. Cette commande se
contente de créer la branche, pour se positionner dessus on utilise <code>git
checkout</code> qui permet de naviguer de branche en branche tel Tarzan sur ses
lianes.</p>
<p>Comme c&#39;est super chiant à écrire, il existe un raccourci bien pratique : <code>git
checkout -b</code>, auquel on passe un nom de branche comme pour <code>git branch</code>.</p>
<p>Une fois qu&#39;on est bien sur la branche, tous les commits suivants seront liés à
cette branche.</p>
<p>On peut utiliser <code>git branch</code> sans argument pour lister les branches, celle avec
un petit asterisque devant c&#39;est la branche courante.</p>
<p>Essayons ça avec notre petit dépôt :</p>
<pre><code class="language-bash">$ git branch
* master
$ git checkout -b add-shebang
Basculement sur la nouvelle branche <span class="string">'add-shebang'</span>
$ vim putain_de_hello_world.rb
$ git status
<span class="comment"># Sur la branche add-shebang</span>
<span class="comment"># Modifications qui ne seront pas validées :</span>
<span class="comment">#   (utilisez "git add &lt;fichier&gt;..." pour mettre à jour ce qui sera validé)</span>
<span class="comment">#   (utilisez "git checkout -- &lt;fichier&gt;..." pour annuler les modifications dans la copie de travail)</span>
<span class="comment">#</span>
<span class="comment">#    modifié : putain_de_hello_world.rb</span>
<span class="comment">#</span>
aucune modification n<span class="string">'a été ajoutée au commit (utilisez "git add" ou "git commit -a")
$ git add putain_de_hello_world.rb
$ git commit
[add-shebang 5d48735] Add shebang
 1 file changed, 1 insertion(+)
$ git log --pretty=oneline --decorate
5d48735fcc805d51e2e294df5d9d22d481250789 (HEAD, add-shebang) Add shebang
8120de7b7139e46b9cbc1c3ee89a02962dbc198e (master) Premier commit</code></pre>
<p>Comme vous le voyez grâce à l&#39;option <code>--decorate--</code> de <code>git log</code>, on a bien
notre branche qui pointe sur le dernier commit fait, alors que la branche de
base fournie par Git, <code>master</code>, reste au commit précédent.</p>
<p>Dernière étape avant la fin de cette article : le redouté et redoutable
<code>merge</code> !</p>
<p>Pour fusionner nos deux branches on va utiliser cette commande en se plaçant sur
la branche dans laquelle on va fusionner et en passant en argument la branche à
fusionner.</p>
<p>Si vous avez bien suivi, on va donc faire les choses suivantes :</p>
<pre><code class="language-bash">$ git checkout master
Basculement sur la branche <span class="string">'master'</span>
$ git merge add-shebang
Updating <span class="number">8120</span>de7..<span class="number">5</span>d48735
Fast-forward
 putain_de_hello_world.rb | <span class="number">1</span> +
 <span class="number">1</span> file changed, <span class="number">1</span> insertion(+)</code></pre>
<p>Vous remarquez que Git signale <em>Fast-forward</em>. Comme le commit pointé par
<code>add-shebang</code> est un fils direct de celui de <code>master</code>, Git se contente de faire
pointer <code>master</code> sur celui-ci, ce qui est beaucoup plus rapide.</p>
<p>Dans le cas où on a eu des modifications sur <code>master</code> entre temps, on aurait eu
une vraie fusion des contenus des commits, avec éventuellement une résolution de
conflits, mais on verra ça dans un prochain article !</p>
<h2 id="la-suite">La suite</h2>
<p>On a vu les bases, et très bientôt on va approfondir le sujet, en voyant
notamment comment collaborer, comment résoudre des conflits ou des problèmes
d&#39;utilisation de Git, tout ça dans la joie et la bonne humeur.</p>
<h2 id="r-f-rences">Références</h2>
<p>Si vous voulez en savoir plus sur Git, la <a href="http://git-scm.com/documentation">documentation officielle</a> est plutôt
bien foutue.</p>
<p>Si vous aimez les petites références rapides et illustrées, le <a href="http://rogerdudler.github.io/git-guide/">Git
Guide</a> de Roger Dudler est une bonne manière d&#39;apprendre.</p>
<h2 id="hey-tu-veux-appliquer-a-pour-contribuer-putain-de-code-">Hey ! Tu veux appliquer ça pour contribuer à Putain de Code ?</h2>
<p>Pas de problème, on a écrit un post exprès :
<a href="posts/comment-contribuer/">Comment contribuer</a> !</p>

]]></description>
              <pubDate>Wed, 06 November 2013 01:00:00 +0100</pubDate>
              <link>/dist/posts/git/versionner-avec-git/index.html</link>
              <guid isPermaLink="true">/dist/posts/git/versionner-avec-git/index.html</guid>
          </item>

          <item>
              <title>Comment contribuer ?</title>
              <description><![CDATA[

<p>Ici, chez Putain de Code, dans notre building 8 étages vitres teintées avec
masseuses et coke à volonté et à n&#39;importe quelle heure de la journée, on sait
qu&#39;on va forcément t&#39;aider à comprendre pas mal de trucs, mais on sait aussi
qu&#39;on peut faire des fois des erreurs dans les articles (à cause de la coke)
ou tout simplement qu&#39;il existe des types encore plus hipster
qu&#39;<a href="http://putaindecode.fr/le-crew/#mlbli">_mlb</a> et qui voudront profiter de
notre renomée inter<del>nationale</del>galactique pour se faire un peu de visibilité
en proposant un post. Du coup, on s&#39;attend vraiment à ce que tu aides à faire
avancer le bouzin, que t&#39;apportes ta pierre à l&#39;édifice quoi (oui on t&#39;apprend
des expressions aussi), ou ta PR au repo comme on dit dans le monde des
développeurs des internets.</p>
<h2 id="github">GitHub</h2>
<ul>
<li><p>Déjà, si t&#39;en as pas, crée toi un compte GitHub (avant qu&#39;on te caillasse),
et vu que tu commences à lire des ressources sur notre site, crois moi que
tu vas commencer à le faire chauffer plus vite que prévu.</p>
</li>
<li><p>Ensuite il faut que tu installes tout le nécessaire pour bosser sur un
<em>repo</em> GitHub (oui on va commencer à utiliser des anglicismes dès maintenant
donc habitues toi y, <em>repo</em> = dépôt de code, comme tu peux le constater, la
francisation, c&#39;est moche), on va te faire un post qui va regrouper tout ce
qu&#39;il te faut pour installer et configurer Git pour bosser sur GitHub.</p>
</li>
<li><p>Après, il faut que tu crées ce qu&#39;on appelle un <em>fork</em> du repo. Un fork
c&#39;est juste ta propre copie du repo. Bah ouais, tu vas pas directement
travailler sur notre repo et nous le crader sans qu&#39;on puisse bouger
l&#39;orteil. Non monsieur, sur GitHub on est des gens civilisés et on créé sa
propre copie dans son coin avant de demander à papa si on a le droit
d&#39;apporter les modifs sur le repo principal.</p>
</li>
<li><p>Pour ça, clique sur le bouton <em>Fork</em> en haut à droite du repo. GitHub va
créer une copie du repo sur ton propre compte GitHub, où tu pourras
travailler tranquillement.</p>
<figure>
  <img src="/github/fork-button.jpg" alt="Bouton Fork">
  <figcaption>Clique au fond à droite</figcaption>
</figure>
</li>
<li><p>Maintenant que t&#39;as enfin notre magnifique repo dans ton compte, tu devrais
te sentir honoré. Une fois que t&#39;as appelé toute ta famille et les 3
pèquenauds qui te servent d&#39;amis, tu dois pouvoir y coder dessus sur ton PC.
On va partir du principe que tu t&#39;appelles Clint. Et que ton nom c&#39;est
Horris. T&#39;as donc choisi comme pseudo GitHub <code>clinthorris</code> (oui t&#39;aurais du
réfléchir toi aussi). Donc tu te débrouilles pour aller dans un dossier vide
et tu vas cloner notre repo. Cloner = faire une copie d&#39;un repo distant (sur
les serveurs de GitHub par exemple) en local (ton vieux Pentium II sous XP
dans notre cas). Ensuite il faut que tu te rendes dans ce dossier en ligne
de commande (sous Windows tu y vas avec l&#39;invite de commande mais on te
prévient qu&#39;on va pas être copains longtemps, trouve un OS décent putain,
sous Mac OS X tu utilises le terminal, et sous Linux je pense qu&#39;on a pas à
t&#39;expliquer).</p>
<pre><code>$ git clone https://github.com/clinthorris/website.git putaindecode</code></pre>
</li>
<li><p>Ensuite tu dois ajouter ce qu&#39;on appelle une remote. Une remote c&#39;est une
référence du repo principal, le beau, le grand, le nôtre. En gros, ça va te
servir que si tu fais une modification ou une contribution sur notre site
aujourd&#39;hui, et que dans un mois tu veuilles encore en faire, tu pourras
facilement rattraper tout ce qu&#39;on aura fait entre temps. La remote en
rapport avec le repo principal, on l&#39;appelle souvent <em>upstream</em></p>
<pre><code>  $ cd putaindecode
  $ git remote add upstream https://github.com/putaindecode/website.git
  $ git fetch upstream</code></pre>
</li>
<li><p>Alors là, normalement, t&#39;as le dossier propre et frais, pêché du matin. Vu
que notre site pète la classe, et qu&#39;on l&#39;a fait en utilisant quand même des
technos ultra cool genre <a href="https://github.com/happyplan/happyplan">HappyPlan</a>
(un truc fait par @_kud et @MoOx, t&#39;en profiteras pour aller jeter un oeil,
fais pas ton rat, t&#39;es pas pressé), node, bower, toussa.
Pour faire ça, c&#39;est finalement pas si compliqué, tu vas lire le
README.md à la racine du repo. On fait exprès de pas te le dire ici parce
que c&#39;est un peu une convention pour tous les projets Open Source, et que ça
te fait pas de mal de commencer à apprendre à bien bosser.</p>
</li>
<li><p>Une fois ton site tout installé, t&#39;as plus qu&#39;à aller dans ton dossier grâce
à la ligne de commande, et à taper <code>$ happyplan</code>, tu verras tout un tas de
trucs grunt s&#39;exécuter, ne t&#39;inquiètes pas. À la fin du processus, ça
devrait te lancer le site en local dans le browser. Là j&#39;espère que tu te
rends compte qu&#39;avec une seule ligne de commande on t&#39;a fait tourner un site
complet. Et là on te voit déjà en train de baver et te rappeler tes longues
soirées en train d&#39;installer PHP, MySQL, un WordPress, la bonne version des
plugins, de la conf à n&#39;en plus finir... ah qu&#39;est-ce que tu pouvais être
niais. Ça a quand même bien plus la classe notre solution, non ?</p>
</li>
<li><p>Maintenant que t&#39;as tout, t&#39;as plus qu&#39;à lancer <del>notepad++</del> ton éditeur
favori et te préparer à modifier ou proposer les fichiers que tu veux. Ce
que t&#39;as à retenir, c&#39;est que tu vas surtout bosser dans le dossier <code>/src</code></p>
</li>
</ul>
<h2 id="correction-d-un-post-existant">Correction d&#39;un post existant</h2>
<p>Bon ok, on a compris, t&#39;es timide, tu te sens pas encore prêt à nous écrire un
magnifique post sur ton tout dernier projet, tu préfères juste nous aider à
améliorer notre contenu. Bah on te remercie quand même tu vois, parce qu&#39;on
est des types sympas.</p>
<ul>
<li><p>Alors déjà, on aime pas juste donner une liste d&#39;ordres sans expliquer pour
que tu puisses comprendre ce que tu fais. Donc notre site, il a été fait
grâce à HappyPlan (un générateur de site statique bien pimpé, parce que oui,
y&#39;a pas que Wordpress pour faire un site) qui lui même est basé sur grunt
(un esclave qui te permet d&#39;éxécuter des tâches répétitives en JavaScript)
et plein d&#39;autres truc cools. Donc, faudrait que tu jettes un coup d&#39;œil à
ces projets, histoire de savoir de quoi on cause, même si on va essayer de
t&#39;expliquer au mieux.</p>
</li>
<li><p>Donc, tous nos posts sont contenus dans <code>src/posts/</code>. Si jamais c&#39;est sur
autre chose qu&#39;un post, farfouille un peu et tu trouveras, les noms des
dossiers sont assez explicites et de toute façon les URLs sur notre site
ressemblent bizarrement (en vrai c&#39;est pas bizarre hein, t&#39;avais compris)
aux noms des dossiers.</p>
</li>
<li><p>Donc, une fois le fichier trouvé, tu remarqueras que la syntaxe à
l&#39;intérieur, c&#39;est pas du HTML. C&#39;est un truc bizzare avec des dièses et des
étoiles. On appelle ça du
<a href="http://fr.wikipedia.org/wiki/Markdown"><em>Markdown</em></a>. On va te laisser aller
chercher si tu veux connaitre plus en détail. Mais normalement en voyant le
reste du post autour de toi, tu devrais comprendre assez vite. Tu peux
toujours faire du HTML, mais franchement, le Markdown a été créé pour ce
genre de tâches, c&#39;est un bon moment pour l&#39;apprendre.</p>
</li>
<li><p>Avant de faire les modifications direct dans le fichier, on va te demander
de faire une branche, c&#39;est une bonne pratique et ça nous permettra de voir
exactement ce que t&#39;auras modifié, c&#39;est beaucoup plus simple. Du coup tu
fais simplement un :</p>
<pre><code>$ git checkout -b fix.nom-du-post</code></pre>
</li>
<li><p>Fais les modifications que tu veux dans le fichier, là on peut pas t&#39;aider,
c&#39;est à toi de jouer.</p>
</li>
<li><p>Normalement si t&#39;avais bien lancé le <code>happyplan</code> tout à l&#39;heure, y&#39;a un
processus <em>watch</em> (en gros un truc qui surveilles ton projet) qui est lancé
et qui détecte que t&#39;as changé un fichier, du coup, grâce au watch couplé à
un processus appelé <em>livereload</em> ton navigateur va rafraichir les fichiers
nécessaires en direct. T&#39;as rien à faire c&#39;est magique. Enfin si, tu dois juste
retourner dans ton browser ça devrait déjà être à jour.</p>
</li>
<li><p>Une fois que tout est bon, tu peux passer à l&#39;étape de validation de tes
modifications (étape commune pour la modification d&#39;un post existant ou la
proposition d&#39;un nouveau)</p>
</li>
</ul>
<h2 id="proposition-d-un-nouveau-post">Proposition d&#39;un nouveau post</h2>
<ul>
<li><p>Alors pour proposer un nouveau post déjà, il te faut une idée. Et on te
prévient que si tu nous sort un post sur la liste des plugins jQuery les
plus en vogue cette semaine, on va te trouver. On va chercher ton IP, on va
tracer ton adresse, et on va te trouver. Et tu vas comprendre que parmi
nous, y&#39;a des types qui sont pas du tout copains avec jQuery et qui sont pas
tendres du tout.</p>
</li>
<li><p>Il faut aussi que tu fasses attention à ne pas bosser sur le même post que
quelqu&#39;un d&#39;autre et pour ça tu dois aller jeter un coup d&#39;oeil du côté des
issues en cours avec le label <code>post</code>. Allez, on est sympa, t&#39;as <a href="https://github.com/putaindecode/website/issues?labels=post&amp;page=1&amp;state=open">le
lien</a>.</p>
</li>
<li><p>Bref, une fois ton idée trouvée, il faut que tu crées le post pour pouvoir
commencer à écrire dans le fichier. Tout d&#39;abord tu vas devoir créer une
nouvelle branche. C&#39;est une pratique qu&#39;on demande à tout le monde, même
nous en interne on bosse sur des branches. Donc tout d&#39;abord :</p>
<pre><code>$ git checkout -b post.titre-court-du-post</code></pre>
<p>Ensuite il va falloir que tu crées le fichier nécessaire pour le brouillon
du post.</p>
<pre><code>$ happyplan newpost --name=&quot;Nom du post&quot; --tags=&quot;tags, separes, virgules&quot;
$ mkdir src/posts/nom-du-post
$ mv src/posts/nom-du-post.html.hbs src/posts/nom-du-post/index.html.hbs</code></pre>
<p>Ça va te créer un fichier dans <code>/src/posts/</code> avec le nom qui va bien.
Tu remarqueras qu&#39;on la déplacé dans un dossier, histoire d&#39;avoir des URLs
simples et sympa. Puis si t&#39;as de la merde à fourrer pour ton article, tu sais
où la mettre du coup.</p>
</li>
<li><p>Tu peux maintenant éditer ton fichier en MarkDown dans la partie dédié,
tout en faisant attention si tu te mets à toucher l&#39;entête créé
automatiquement (celui où il y a layout, title et tags).
Laisse bien la clé <code>draft: true</code> bien entendu.
Amuse toi, créé ton contenu, rédige bien tout comme tu veux.
Techniquement, dans ce dossier <code>posts</code> tu peux faire autant de brouillons
que tu veux pour peut que tu spécifies bien une clé <code>draft</code> pour chaque post.</p>
</li>
<li><p>Tu devrais pouvoir te balader sur le site est trouver ton article sur la page
des brouillons: <a href="http://localhost:4242/posts/drafts.html">http://localhost:4242/posts/drafts.html</a> .
Avec la tâche <code>$ happyplan</code> lancée normalement tout se rafraichira
automatiquement.
Si ce n&#39;est pas le cas, lance la tâche <code>$ happyplan</code>.
Si là tu as une erreur qui t&#39;échappes, on t&#39;invite à
<a href="https://github.com/putaindecode/website/issues/new">ouvrir une issue</a>.</p>
</li>
<li><p>En l&#39;état tu devrais pouvoir consulter sur le site lancé localement ton post,
voir s&#39;il sort correctement et s&#39;il est présentable à ton goût.
Tu pourras le consulter sur une URL du type
<code>http://localhost:4242/post/nom-du-post/</code>. Mais tu le sais déjà puisque t&#39;as
bien suivi et que t&#39;es passé par la page des brouillons.</p>
</li>
<li><p>Une fois que tout est bon, tu peux passer à l&#39;étape de validation de tes
modifications (étape commune pour la modification d&#39;un post existant ou la
proposition d&#39;un nouveau)</p>
</li>
</ul>
<h2 id="validation-de-tes-modifications">Validation de tes modifications</h2>
<ul>
<li><p>Il faut tout d&#39;abord pousser tes modifications sur ton <code>fork</code>. Pour ça on va
d&#39;abord ajouter les fichier que tu as modifié à l&#39;index de fichiers à
commit. Tu peux faire ça tout simplement avec un :</p>
<pre><code>$ git add -A src/posts/nom-du-post</code></pre>
<p>Cette commande ajoute tous les fichiers dans le dossier que tu as créé.
Si tu as ajouter des fichiers à l&#39;exterieur de ce dossier, tu devras les
ajouter. Exemple:</p>
<pre><code>$ git add src/media/memes/trollface.jpg</code></pre>
<p>Ensuite on va dire à git de valider ces modifications de code :</p>
<pre><code>$ git commit -m &quot;Un petit message sympa expliquant le correctif/post&quot;</code></pre>
<p>Et on va finir en disant qu&#39;on veut envoyer tout ça sur ton fork qui est
situé sur GitHub :</p>
<pre><code>$ git push -u</code></pre>
</li>
<li><p>Voila ! Si tu vas voir ton <code>fork</code> sur GitHub tu verras ton commit et les
modifications que tu as apportées normalement. Il ne te reste plus qu&#39;à nous
soumettre ces modifications. Pour ça tu vas faire ce qu&#39;on appelle une Pull
Request (PR)</p>
</li>
<li><p>Il te suffit de cliquer sur le bouton vert qui représente 2 flèches en sens
inverse à côté du nom de ta branche en dessous du nombre de commits /
branches / etc.</p>
<figure>
  <img src="/github/pull-request-button.jpg" alt="Bouton Pull Request">
  <figcaption>C&#39;est bon tu le vois là le bouton ?</figcaption>
</figure>
</li>
<li><p>Sélectionnes les bonnes branches et ajoute nous un beau titre et une belle
description de Pull Request en essayant au moins de commencer par <code>Post:
Nom du post</code> ou `Fix: Nom du post</p>
</li>
<li><p>Et voila ! Tu n&#39;as qu&#39;à attendre de nos nouvelles maintenant. D&#39;ailleurs au
passage, si tu veux, tu peux en profiter pour nous suivre <a href="http://twitter.com/putaindecode">sur
twitter</a>, et tu pourras nous lâcher un
message avec ta PR ou ton issue en lien, histoire de nous mettre la pression.</p>
</li>
</ul>
<h2 id="hey-tu-veux-mieux-comprendre-git-">Hey ! Tu veux mieux comprendre Git ?</h2>
<p>Pour découvrir Git plus en détails, on t&#39;invite à lire notre article
<a href="posts/git/versionner-avec-git/">Versionner avec Git</a></p>

]]></description>
              <pubDate>Tue, 05 November 2013 01:00:00 +0100</pubDate>
              <link>/dist/posts/comment-contribuer/index.html</link>
              <guid isPermaLink="true">/dist/posts/comment-contribuer/index.html</guid>
          </item>

    </channel>
</rss>
