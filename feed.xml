<?xml version="1.0" encoding="utf-8" ?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Putain de code !</title><description></description><link>http://putaindecode.fr</link><!-- generator putaindecode--><lastBuildDate>Fri, 02 May 2014 06:49:52 GMT</lastBuildDate><atom:link href="http://putaindecode.fr/feed.xml" rel="self" type="application/rss+xml"></atom:link><item><title>Introduction au testing js front</title><description><![CDATA[[
<p>Les tests automatisés en front-end ont longtemps été ignorés,
et le sont encore trop.</p>
<p>Écrire des tests peut paraître chiant, mais le temps qu’ils rapportent
compense largement celui que l’on passe à les écrire.</p>
<h2 id="-crire-du-js-testable">Écrire du js testable</h2>
<p>Prenons un exemple simple et moche :</p>
<pre><code class="lang-javascript"><span class="hljs-comment">//app.js</span>
;(<span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">()</span>{</span>

  <span class="hljs-keyword">var</span> cart = $(<span class="hljs-string">"#cart"</span>)
  <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">addToCart</span><span class="hljs-params">(id)</span>{</span>
    <span class="hljs-keyword">var</span> element = $(<span class="hljs-string">"&lt;li&gt;&lt;/li&gt;"</span>)
    element.html(catalog[id])
    cart.append(element)
  }

  $(<span class="hljs-string">".js-updateCart"</span>)
    .on(<span class="hljs-string">"click"</span>, <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">(eventObject)</span>{</span>
      addToCart($(<span class="hljs-keyword">this</span>).data(<span class="hljs-string">"id"</span>))
    })

})()
</code></pre>
<p>Tester ce code est particulièrement lourd, pour plusieurs raisons :</p>
<ul>
<li>les functions à tester ne sont pas accessibles</li>
<li>on doit simuler un <code>click</code> pour tester un comportement logique.</li>
<li>on doit créer un element et modifier sont <code>data-id</code> à chaque cas souhaité.</li>
<li>pour tester <code>addToCart</code> on doit aller regarder dans le DOM.</li>
</ul>
<h3 id="1-rendez-accessibles-vos-m-thodes-au-test-runner">1. Rendez accessibles vos méthodes au test runner</h3>
<p>Vous pouvez utiliser un namespace adéquat.</p>
<pre><code class="lang-javascript"><span class="hljs-keyword">var</span> app = window.app = {}
app.cart = {}
app.cart.addToCart = <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">()</span>{</span> <span class="hljs-comment">/* … */</span> }
</code></pre>
<p>Mais ne souhaitez probablement pas rendre vos méthodes accessibles à la console.</p>
<p>Utilisez un module-system : <a href="http://browserify.org">browserify</a> ou
<a href="http://requirejs.org">requirejs</a> (si vous n’avez pas besoin de chargement
conditionnel et souhaitez créer un bundle par build, utilisez browserify qui
possède une syntaxe beaucoup plus sympathique et une codebase réduite, vous
pourrez même <code>require</code> depuis un module npm
<a href="/posts/js/browserify-all-the-things/">comme on vous l’explique dans un article dédié</a>).</p>
<pre><code class="lang-javascript"><span class="hljs-keyword">var</span> $ = <span class="hljs-built_in">require</span>(<span class="hljs-string">"jquery"</span>) <span class="hljs-comment">// oh, un module npm</span>

module.exports = {
  element : $(<span class="hljs-string">"#cart"</span>),
  addToCart : <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">()</span>{</span>
    <span class="hljs-comment">/* … */</span>
  }
}
</code></pre>
<p>Vous pourrez ainsi séparer proprement votre application en modules et les tester individuellement.</p>
<h3 id="2-oui-mais-les-modules-interd-pendants-alors-">2. Oui, mais les modules interdépendants alors ?</h3>
<p>Là, ça devient un peu plus tricky.
Ce que je conseille à titre personnel c’est d’utiliser des events
pour faire communiquer les différentes parties de l’application.</p>
<p>Cela permet d’éviter d’utiliser des mocks d’autres parties de l’application partout.</p>
<p>Par exemple, si je souhaite tester le fait qu’un click sur <code>.js-updateCart</code>
déclanchera bien <code>updateCart</code> :</p>
<pre><code class="lang-javascript"><span class="hljs-comment">//view.js</span>

<span class="hljs-comment">// view est une petite class qui route les events</span>
<span class="hljs-comment">// en rendant les listeners accessibles aux tests</span>
<span class="hljs-comment">// vous pouvez très facilement en concevoir une</span>
<span class="hljs-comment">// à votre goût en quelques lignes de code</span>
<span class="hljs-keyword">var</span> view = <span class="hljs-built_in">require</span>(<span class="hljs-string">"../lib/view"</span>)

<span class="hljs-comment">// eventbus est l'event bus de l'application, il orchestre</span>
<span class="hljs-comment">// la communication entre les différents modules</span>
<span class="hljs-keyword">var</span> eventbus = <span class="hljs-built_in">require</span>(<span class="hljs-string">"../eventbus"</span>)

<span class="hljs-keyword">var</span> $ = <span class="hljs-built_in">require</span>(<span class="hljs-string">"jquery"</span>)

module.exports = view.extend({
  element : document.body,
  events : [
    {
      type : <span class="hljs-string">"click"</span>,
      selector : <span class="hljs-string">".js-addToCart"</span>,
      listener : <span class="hljs-string">"addToCart"</span>
    }
  ],
  addToCart : <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">(eventObject)</span>{</span>
    <span class="hljs-keyword">var</span> target = eventObject.currentTarget
    <span class="hljs-keyword">var</span> id = $(target).data(<span class="hljs-string">"id"</span>)
    eventbus.fire(<span class="hljs-string">"addToCart"</span>, {
      id : id
    })
  }
})
</code></pre>
<p>et je n’aurais qu’à écouter cet event depuis <code>cart</code> :</p>
<pre><code class="lang-javascript"><span class="hljs-comment">// cart.js</span>
<span class="hljs-keyword">var</span> eventbus = <span class="hljs-built_in">require</span>(<span class="hljs-string">"../eventbus"</span>)
<span class="hljs-keyword">var</span> catalog = <span class="hljs-built_in">require</span>(<span class="hljs-string">"../catalog"</span>)

module.exports = {
  initialize : <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">()</span>{</span>
    <span class="hljs-keyword">this</span>._addToCart = <span class="hljs-keyword">this</span>.addToCart.bind(<span class="hljs-keyword">this</span>)
    eventbus.listen(<span class="hljs-string">"addToCart"</span>, <span class="hljs-keyword">this</span>._addToCart)
  },
  release : <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">()</span>{</span>
    eventbus.stopListening(<span class="hljs-string">"addToCart"</span>, <span class="hljs-keyword">this</span>._addToCart)
  },
  addToCart : <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">(eventObject)</span>{</span>
    <span class="hljs-comment">// et on a eventObject.id</span>
    <span class="hljs-keyword">this</span>.products.push(catalog[eventObject.currentTarget.data(<span class="hljs-string">"id"</span>)])
  }
}
</code></pre>
<p>Grâce à cette architecture, je vais pouvoir tester individuellement
les deux modules.</p>
<pre><code class="lang-javascript"><span class="hljs-comment">// view.test.js</span>

<span class="hljs-keyword">var</span> tape = <span class="hljs-built_in">require</span>(<span class="hljs-string">"tape"</span>)
<span class="hljs-keyword">var</span> view = <span class="hljs-built_in">require</span>(<span class="hljs-string">"../app/view"</span>)
<span class="hljs-keyword">var</span> eventbus = <span class="hljs-built_in">require</span>(<span class="hljs-string">"../eventbus"</span>)
<span class="hljs-keyword">var</span> $ = <span class="hljs-built_in">require</span>(<span class="hljs-string">"jquery"</span>)

tape(<span class="hljs-string">"view"</span>, <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">(test)</span>{</span>
  test.plan(<span class="hljs-number">1</span>)
  <span class="hljs-keyword">var</span> element = $(<span class="hljs-string">"&lt;div&gt;&lt;/div&gt;"</span>)
  element.data(<span class="hljs-string">"id"</span>, <span class="hljs-number">1</span>)
  <span class="hljs-comment">// on teste facilement l'envoi</span>
  eventbus.listen(<span class="hljs-string">"addToCart"</span>, <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">(eventObject)</span>{</span>
    test.equal(eventObject.id, <span class="hljs-number">1</span>)
  })
  view.addToCart({
    currentTarget : element
  })
})
</code></pre>
<pre><code class="lang-javascript"><span class="hljs-comment">// cart.test.js</span>

<span class="hljs-keyword">var</span> tape = <span class="hljs-built_in">require</span>(<span class="hljs-string">"tape"</span>)
<span class="hljs-keyword">var</span> cart = <span class="hljs-built_in">require</span>(<span class="hljs-string">"../app/cart"</span>)
<span class="hljs-keyword">var</span> eventbus = <span class="hljs-built_in">require</span>(<span class="hljs-string">"../eventbus"</span>)
<span class="hljs-keyword">var</span> catalog = <span class="hljs-built_in">require</span>(<span class="hljs-string">"../catalog"</span>)

tape(<span class="hljs-string">"cart"</span>, <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">(test)</span>{</span>
  cart.initialize()
  eventbus.fireSync(<span class="hljs-string">"addToCart"</span>, {id:<span class="hljs-number">1</span>})
  test.deepEqual(
    cart[<span class="hljs-number">0</span>],
    catalog[<span class="hljs-number">1</span>],
    <span class="hljs-string">"receives addToCart event"</span>
  )
  test.end()
})
</code></pre>
<h2 id="tester-tous-les-cas-possibles">Tester tous les cas possibles</h2>
<p>Ce sont souvent les edge-cases qui nous font nous arracher les cheveux.
Pour pallier ces soucis, tester en profondeur est essentiel.</p>
<p>Prenons un exemple, une méthode qui teste si la valeur qu’on lui passe est
une <code>string</code>.</p>
<p>On serait tenté de simplement tester les résultats positifs de cette façon :</p>
<pre><code class="lang-javascript">tape(<span class="hljs-string">"type.isString on strings"</span>, <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">(test)</span></span>{
  test.equal(<span class="hljs-built_in">type</span>.isString(<span class="hljs-string">""</span>), <span class="hljs-keyword">true</span>)
  test.<span class="hljs-keyword">end</span>()
})
</code></pre>
<p>Or, si par mégarde ma méthode <code>isString</code> se révèle être :</p>
<pre><code class="lang-javascript">type.isString = <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">(value)</span> {</span>
  <span class="hljs-keyword">return</span> <span class="hljs-keyword">typeof</span> value == <span class="hljs-string">"string"</span>
}
</code></pre>
<p>on ne vérifie pas le cas <code>type.isString(new String(&quot;&quot;))</code>.</p>
<p>Du coup, des tests complets :</p>
<pre><code class="lang-javascript">tape(<span class="hljs-string">"type.isString on strings"</span>, <span class="hljs-keyword">function</span>(test){
  test.equal(<span class="hljs-class"><span class="hljs-keyword">type</span>.<span class="hljs-title">isString</span>(</span><span class="hljs-string">""</span>), <span class="hljs-keyword">true</span>)
  test.equal(<span class="hljs-class"><span class="hljs-keyword">type</span>.<span class="hljs-title">isString</span>(</span><span class="hljs-keyword">new</span> String(<span class="hljs-string">""</span>)), <span class="hljs-keyword">false</span>)
  test.<span class="hljs-keyword">end</span>()
})
</code></pre>
<p>permettent ici d’identifier qu’en réalité on a besoin de :</p>
<pre><code class="lang-javascript">type.isString = <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">(value)</span> {</span>
  <span class="hljs-keyword">return</span> <span class="hljs-built_in">Object</span>.prototype.toString.call(value) == <span class="hljs-string">"[object String]"</span>
}
</code></pre>
<p>Et c’est à la force des résultats de tests que vous identifierez rapidement
vous familiariserez à tous ces edge-cases.</p>
<p>À chaque correctif de bug, ajoutez des tests (mais ça, vous le saviez déjà).</p>
<h2 id="cross-browser-testing">Cross-browser testing</h2>
<p>À l’heure actuelle, où l’on se trouve notamment très souvent avec du
feature testing.
Pour le tester complètement, on doit se servir de vrais navigateurs :
un headless (certes, très pratique) comme <a href="http://phantomjs.org">phantomjs</a>
ne permettra pas d’obtenir 100% de coverage.</p>
<pre><code class="lang-javascript">var supportsAnimationFrame =
  !!(
    win.requestAnimationFrame <span class="hljs-string">||</span>
    win.webkitRequestAnimationFrame <span class="hljs-string">||</span>
    win.mozRequestAnimationFrame <span class="hljs-string">||</span>
    win.ORequestAnimationFrame <span class="hljs-string">||</span>
    <span class="hljs-comment">// vous avez fait une faute de frappe,</span>
    <span class="hljs-comment">// et mis un `O` majuscule, seul un</span>
    <span class="hljs-comment">// test sur les version concernées d'Opera</span>
    <span class="hljs-comment">// vous permettront de l'identifier</span>
    win.msRequestAnimationFrame
  )
</code></pre>
<p>De plus, vous pouvez par habitude être tenté d’utiliser un
<code>Array.prototype.forEach</code> alors que votre scope navigateur inclut
IE8; seuls des tests sur un vrai browser vous permettront d’identifier le souci.</p>
<p>Je vous conseille fortement testling, très simple à intégrer dans vos
modules, et gratuit pour tout projet open-source.</p>
<p>Dans le <code>package.json</code> :</p>
<pre><code class="lang-json">{
  "<span class="hljs-attribute">testling</span>": <span class="hljs-value">{
    "<span class="hljs-attribute">files</span>": <span class="hljs-value"><span class="hljs-string">"test/**/*.js"</span></span>,
    "<span class="hljs-attribute">browsers</span>": <span class="hljs-value">[
      <span class="hljs-string">"ie/9..latest"</span>,
      <span class="hljs-string">"chrome/22..latest"</span>,
      <span class="hljs-string">"firefox/16..latest"</span>,
      <span class="hljs-string">"safari/6..latest"</span>,
      <span class="hljs-string">"opera/11.0..latest"</span>,
      <span class="hljs-string">"iphone/6..latest"</span>,
      <span class="hljs-string">"ipad/6..latest"</span>,
      <span class="hljs-string">"android-browser/latest"</span>
    ]
  </span>}
</span>}
</code></pre>
<p>Et ajouter un webhook dans l’admin de votre repository GitHub pointant vers</p>
<blockquote>
<p><a href="http://git.testling.com">http://git.testling.com</a></p>
</blockquote>
<p>Vous pouvez l’utiliser avec tape (son test harness par défaut)
Mocha, QUnit et n’importe quelle bibliothèque
de test supportant <code>TAP</code> comme indiqué sur
<a href="https://ci.testling.com/guide/custom_libraries">le site de testling</a>.</p>
<p>Vous trouverez aussi des alternatives populaires
<a href="http://www.browserstack.com">similaires</a>,
ou ayant <a href="http://karma-runner.github.io">une approche différente</a>.</p>
<p>Par ailleurs, si dans votre code il existe des variations entre les navigateurs,
vous pouvez utiliser du test conditionnel :</p>
<pre><code class="lang-javascript"><span class="hljs-keyword">if</span>(typeof {}.__proto__ == <span class="hljs-string">"object"</span>){
  test.equal(<span class="hljs-keyword">list</span>.__proto__ === <span class="hljs-keyword">Array</span>.prototype, <span class="hljs-keyword">false</span>, <span class="hljs-string">"__proto__ isn't Array.prototype"</span>)
} <span class="hljs-keyword">else</span> {
  test.equal(<span class="hljs-keyword">list</span> <span class="hljs-keyword">instanceof</span> <span class="hljs-keyword">Array</span>, <span class="hljs-keyword">false</span>, <span class="hljs-string">"Isn't a window Array"</span>)
}
</code></pre>
<p>Happy testing!</p>
<pre><code class="lang-shell">$ testling

TAP version <span class="hljs-number">13</span>
<span class="hljs-preprocessor"># tests</span>
ok <span class="hljs-number">1</span> bisous

<span class="hljs-number">1.</span><span class="hljs-number">.1</span>
<span class="hljs-preprocessor"># tests 1</span>
<span class="hljs-preprocessor"># pass  1</span>

<span class="hljs-preprocessor"># ok</span>
</code></pre>

]]></description><pubDate>Thu, 01 May 2014 00:00:00 GMT</pubDate><link>http://putaindecode.fr/posts/js/introduction-au-testing-js-front/</link><guid isPermaLink="true">http://putaindecode.fr/posts/js/introduction-au-testing-js-front/</guid></item><item><title>Introduction à Gulp</title><description><![CDATA[[
<p>Vous commencez tous à connaitre les <em>tasks runners</em>, ces outils qui permettent
d’automatiser les tâches de développement récurrentes.
Personnellement
 <a href="http://moox.io/slides/2013/grunt-before-after/">je n’ai</a>
 <a href="http://www.24joursdeweb.fr/2013/automatisez-votre-workflow-front-end/">pas arrêté</a>
 <a href="http://moox.io/slides/2014/introduction-gulp/">d’en parler</a>
 depuis que
 <a href="/posts/js/premiers-pas-avec-grunt/">Grunt</a>
 à déterré cette vielle problématique, assez récente pour le développement Web côté front end.</p>
<p>Il faut avouer que de par l’évolution du développement Web, côté front end,
on voit beaucoup de personnes qui n’ont pas de vraies bases de développeur.
Je veux dire par là non pas que ces personnes sont incompétentes, mais plutôt
qu’il manque parfois la bonne flemme du développeur, celle qui le pousse à <strong>développer</strong>
des solutions techniques pour mieux développer des produits.
Il manque un peu <a href="http://fr.wiktionary.org/wiki/algorithmie">d’algorithmie</a>
dans les veines, de curiosité et d’amour du risque.
Ce n’est pas en restant dans sa zone de confort qu’on va de l’avant. Enfin si vous
avez des exemples contraires, je suis preneur.
Mais tout cela doit provenir du fait que pas mal de métiers dans le web sont nouveaux,
dont celui de « développeur Web front end » et que du coup, peu de personnes ont
initialement suivi des formations appropriés (pour ma part je proviens d’une
formation <em>d’analyste-programmeur</em>, conception et développement software quoi).
Je remarque que niveau back end il y a beaucoup moins de lacunes, du fait que
les problématiques gérées de ce côté sont (il me semble) moins nouvelles.</p>
<p>Bref. Je ne vais pas m’éterniser sur une intro du pourquoi on met en place un task
runner, ni faire une comparaison entre Make, Rake, Cake, Jake, Grunt, Brunch
et Broccoli.
Rentrons dans le vif. Parlons Gulp.</p>
<h1 id="pourquoi-gulp">Pourquoi Gulp</h1>
<p>Je vais faire court. Pour faire simple, son point fort réside dans le fait qu’il utilise des
<a href="http://dailyjs.com/2012/09/10/streams/">streams</a> (tl;dr: un flux de données - en mémoire)
et qu’il limite au maximum l’utilisation de fichiers.
Au point qu’il existe une <a href="https://github.com/godaddy/gulp-header/issues/4#issuecomment-32111457">police Gulp</a>
pour vous dire.
Si vous voulez en savoir plus sur les streams, n’hésitez pas à lire l’article de
Nicolas Froidure <a href="http://www.insertafter.com/articles-gulp_vs_grunt.html">Gulp remplacera-t-il Grunt ?</a>
qui contient une partie explicative sur les streams.</p>
<p>Dans la pratique cela évite d’avoir un gruntfile qui, si on imagine une task
sass -&gt; autoprefixer -&gt; csso, passe <a href="/posts/css/mise-en-place-autoprefixer/#autoprefixer-avec-grunt">3 fois par des lectures/écritures sur le système
de fichiers</a>.</p>
<figure>
  <img src="http://jaysoo.ca/images/grunt-flow-2.png" alt="">
  <figcaption>Sans stream</figcaption>
</figure>

<p>Et du coup au lieu d’avoir un fichier de conf d’une soixantaine de lignes, on arrive
à avoir <a href="http://putaindecode.fr/posts/css/mise-en-place-autoprefixer/#autoprefixer-avec-gulp">quelque chose de concis</a>
(une vingtaine de ligne seulement).</p>
<figure>
  <img src="http://jaysoo.ca/images/gulp-flow.png" alt="">
  <figcaption>Avec stream</figcaption>
</figure>

<h2 id="installation">Installation</h2>
<p>Pour avoir la commande globale sur le système (comme grunt-cli) :</p>
<pre><code class="lang-shell"><span class="hljs-variable">$ </span>npm i -g gulp
</code></pre>
<p>Ensuite dans votre projet :</p>
<pre><code class="lang-shell">$ npm i <span class="hljs-attribute">-D</span> gulp gulp<span class="hljs-attribute">-util</span> gulp<span class="hljs-attribute">-plumber</span> gulp<span class="hljs-attribute">-WHATEVER</span>
</code></pre>
<p><em>Note : <code>npm i -D</code> == <code>npm install --save-dev</code>, c’est cadeau.</em></p>
<p>Bon dans mon exemple j’ai mis un peu n’importe quoi, donc on va faire un mini workflow de hipster hacker.</p>
<h2 id="utilisation">Utilisation</h2>
<p>On part avec une tâche très simple : pré-processeur CSS <a href="http://myth.io">Myth</a> et
optimisation avec <a href="https://github.com/css/csso">CSSO</a>.</p>
<pre><code class="lang-shell">$ mkdir putaindegulp <span class="hljs-subst">&amp;&amp;</span> cd putaindegulp
$ npm init
$ npm i <span class="hljs-attribute">-D</span> gulp gulp<span class="hljs-attribute">-util</span> gulp<span class="hljs-attribute">-plumber</span> gulp<span class="hljs-attribute">-myth</span> gulp<span class="hljs-attribute">-csso</span> minimist
</code></pre>
<pre><code class="lang-js">var gulp = require(<span class="hljs-string">"gulp"</span>)
  , gutil = require(<span class="hljs-string">"gulp-util"</span>)
  , plumber = require(<span class="hljs-string">"gulp-plumber"</span>)
  , myth = require(<span class="hljs-string">"gulp-myth"</span>)
  , csso = require(<span class="hljs-string">"gulp-csso"</span>)
  , options = require(<span class="hljs-string">"minimist"</span>)(process<span class="hljs-preprocessor">.argv</span><span class="hljs-preprocessor">.slice</span>(<span class="hljs-number">2</span>))

gulp<span class="hljs-preprocessor">.task</span>(<span class="hljs-string">"styles"</span>, function() {
  gulp<span class="hljs-preprocessor">.src</span>(<span class="hljs-string">"./src/css/*.css"</span>)
    <span class="hljs-preprocessor">.pipe</span>(options<span class="hljs-preprocessor">.production</span> ? plumber() : gutil<span class="hljs-preprocessor">.noop</span>())
    <span class="hljs-preprocessor">.pipe</span>(myth({sourcemap: !options<span class="hljs-preprocessor">.production</span>}))
    <span class="hljs-preprocessor">.pipe</span>(options<span class="hljs-preprocessor">.production</span> ? csso() : gutil<span class="hljs-preprocessor">.noop</span>())
    <span class="hljs-preprocessor">.pipe</span>(gulp<span class="hljs-preprocessor">.dest</span>(<span class="hljs-string">"./dist/css/"</span>))
})

gulp<span class="hljs-preprocessor">.task</span>(<span class="hljs-string">"default"</span>, [<span class="hljs-string">"styles"</span>], function() {
  gulp<span class="hljs-preprocessor">.watch</span>(<span class="hljs-string">"./src/css/**/*"</span>, [<span class="hljs-string">"styles"</span>])
})
</code></pre>
<p>Voilà c’est tout. Et heureusement.</p>
<p>Bon, on se refait l’exemple commenté :</p>
<pre><code class="lang-js"><span class="hljs-comment">// bah là ok, on est obligé d'y passer pour avoir l'API Gulp</span>
<span class="hljs-keyword">var</span> gulp = <span class="hljs-built_in">require</span>(<span class="hljs-string">"gulp"</span>)

  <span class="hljs-comment">// Ça c'est optionnel, c'est pour avoir (entre autres la méthode noop())</span>
  <span class="hljs-comment">// je reviens dessus après</span>
  <span class="hljs-comment">// https://github.com/gulpjs/gulp-util</span>
  , gutil = <span class="hljs-built_in">require</span>(<span class="hljs-string">"gulp-util"</span>)

  <span class="hljs-comment">// Là on a Mario le plombier qui fixe la tuyauterie foireuse.</span>
  <span class="hljs-comment">// Ce plugin patch le problème de stream avec node.js qui fait que tout le process</span>
  <span class="hljs-comment">// explose à la moindre erreur (pas pratique en cas de watch par exemple)</span>
  <span class="hljs-comment">// en gros, il remplace la méthode pipe et attrape les erreurs pour les ressortir gentiment</span>
  <span class="hljs-comment">// https://gist.github.com/floatdrop/8269868</span>
  , plumber = <span class="hljs-built_in">require</span>(<span class="hljs-string">"gulp-plumber"</span>)

  <span class="hljs-comment">// Ici, rien de magique, du plugin en veux-tu en voilà</span>
  , myth = <span class="hljs-built_in">require</span>(<span class="hljs-string">"gulp-myth"</span>)
  , csso = <span class="hljs-built_in">require</span>(<span class="hljs-string">"gulp-csso"</span>)

  <span class="hljs-comment">// ici on chope les options de la ligne de commande</span>
  <span class="hljs-comment">// exemple: pour avoir options.production à true,</span>
  <span class="hljs-comment">// il suffit de faire `gulp --production`</span>
  , options = <span class="hljs-built_in">require</span>(<span class="hljs-string">"minimist"</span>)(process.argv.slice(<span class="hljs-number">2</span>))

<span class="hljs-comment">// Définition d'une tâche, un nom et une fonction.</span>
<span class="hljs-comment">// Ce qui est pratique c'est le fait de pouvoir mettre ce qu'on veut</span>
<span class="hljs-comment">// y compris un console.log() ^^</span>
<span class="hljs-comment">// un autre paramètre peut être ajouté avant la fonction, qui permet de préciser</span>
<span class="hljs-comment">// les dépendances (cf task dev plus bas par exemple)</span>
gulp.task(<span class="hljs-string">"styles"</span>, <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">()</span> {</span>

  <span class="hljs-comment">// Ici on attrape les fichiers (glob classique)</span>
  <span class="hljs-comment">// à la racine (on va considérer que nos fichiers finaux ne seront pas dans</span>
  <span class="hljs-comment">// des sous dossiers, réservés aux partials &amp; co)</span>
  gulp.src(<span class="hljs-string">"./src/css/*.css"</span>)

    <span class="hljs-comment">// On utilise plumber que si on build en dev, sinon faut que ça pête, qu'on</span>
    <span class="hljs-comment">// soit prévenu lors d'un build pour la prod</span>
    .pipe(options.production ? plumber() : gutil.noop())

    <span class="hljs-comment">// Et là on pipe nos plugins</span>
    <span class="hljs-comment">// toujours en jouant avec les options si besoin</span>
    .pipe(myth({sourcemap: !options.production}))
    .pipe(options.production ? csso() : gutil.noop())

    <span class="hljs-comment">// Super important, on convertit nos streams en fichiers</span>
    .pipe(gulp.dest(<span class="hljs-string">"./dist/css/"</span>))
})

<span class="hljs-comment">// Ici on a une tâche de dev qui lance un watch APRES avoir exécuté `styles` une fois</span>
gulp.task(<span class="hljs-string">"default"</span>, [<span class="hljs-string">"styles"</span>], <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">()</span> {</span>

  <span class="hljs-comment">// gulp.watch est natif (pas comme avec grunt)</span>
  <span class="hljs-comment">// vous noterez qu'ici par exemple on va surveiller tous les fichiers</span>
  <span class="hljs-comment">// et non pas ceux juste à la racine par exemple</span>
  gulp.watch(<span class="hljs-string">"./src/css/**/*"</span>, [<span class="hljs-string">"styles"</span>])
})

<span class="hljs-comment">// Comme grunt, `gulp` sans argument lancera la tâche `default`.</span>
</code></pre>
<p>Bien entendu, vous avez déjà compris que si vous voulez remplacer Myth par Sass,
c’est l’histoire de 4 secondes.</p>
<h2 id="putain-de-code-approuve-gulp-">Putain de Code approuve Gulp.</h2>
<p>Ici on est carrément fan de Gulp. Il faut bien avouer que
<a href="https://twitter.com/putaindecode/status/460868992396460032">ça va vite</a>
(encore plus appréciable lorsque l’on n’a pas de SSD) et que c’est plaisant à écrire.
Pas de configurations pas spécialement verbeuse et trop espacée.
Avec Gulp on se sent plus libre, moins contraint.
Du coup, <strong>on a carrément fait notre site avec Gulp</strong>
(puis au passage un petit refresh graphique tant qu’à faire).</p>
<p>Pour aller plus loin, vous n’avez qu’à ouvrir notre <a href="https://github.com/putaindecode/website/blob/master/Gulpfile.js">Gulpfile</a>
et regarder nos <a href="https://github.com/putaindecode/website/tree/master/tasks">tasks</a>
qui vont de <a href="https://github.com/putaindecode/website/blob/master/tasks/clean.js">la plus simple</a>
à <a href="https://github.com/putaindecode/website/blob/master/tasks/contributors.js">la plus compliqué</a>.</p>
<p>Pour voir des tâches plus « real world example » je vous invite à regarder les tasks suivantes :</p>
<ul>
<li><a href="https://github.com/putaindecode/website/blob/master/tasks/server.js">server</a>,
le server de dev local avec livereload dedans ;</li>
<li><a href="https://github.com/putaindecode/website/blob/master/tasks/watch.js">watch</a>,
le classique et si simple watcher ;</li>
<li><a href="https://github.com/putaindecode/website/blob/master/tasks/publish.js">publish</a>,
la tâche pour publier le dossier <code>dist/</code> sur les <a href="https://pages.github.com/">gh-pages</a> ;</li>
<li><a href="https://github.com/putaindecode/website/blob/master/tasks/icons.js">icons</a>,
qui transforme des SVG en fontes d’icones avec le bout de CSS qui va bien ;</li>
<li><a href="https://github.com/putaindecode/website/blob/master/tasks/scripts-linting.js">scripts-linting</a>,
qui vérifie la qualité du code ;</li>
<li><a href="https://github.com/putaindecode/website/blob/master/tasks/scripts.js">scripts</a>,
du <a href="/posts/js/browserify-all-the-things/">browserify</a> pour nos JS côté client ;</li>
<li><a href="https://github.com/putaindecode/website/blob/master/tasks/stylesheets.js">stylesheets</a>,
notre tâche qui mélange (pour l’instant) Stylus et Rework (suite à une rixe à la récré, on n’a pas réussi à se mettre d’accord, donc chacun à rajouté son morceau) ;</li>
</ul>
<p>Bien entendu, si vous ne comprenez pas certaines parties, n’hésitez pas à
<a href="https://github.com/putaindecode/website/issues/new">ouvrir une issue</a>
pour demander des explications.</p>
<h2 id="vous-reprendrez-bien-un-peu-de-gulp-pardon-">Vous reprendrez bien un peu de… Gulp* ! Pardon.</h2>
<p>Si vous avez encore envie de détails je vous renvoie sur l’article anglais
<a href="http://markgoodyear.com/2014/01/getting-started-with-gulp/">Getting started with gulp</a>
qui détaille tellement bien chaque point que même un anglophobe comprendrait.</p>
<p>Vous avez aussi
<a href="https://github.com/gulpjs/gulp/blob/master/docs/README.md">une documentation</a>
très bien faite, qui comporte carrément
<a href="https://github.com/gulpjs/gulp/tree/master/docs/recipes">des exemples <em>officiels</em> tout prêts</a>.</p>
<p>Comme je vous disais plus tôt, les auteurs de Gulp sont assez carrés et valident
(ou plutôt <em>invalident</em>) <a href="https://npmjs.org/search?q=gulpplugin">les plugins</a> qui
ne respectent pas les
<a href="https://github.com/gulpjs/gulp/blob/master/docs/writing-a-plugin/guidelines.md">règles</a>.
Je trouve que c’est gage de qualité.</p>
<p>Pour finir quelques liens pour ceux qui en veulent toujours plus :</p>
<ul>
<li><a href="http://www.insertafter.com/articles-retour_experience_gulp.html">Gulp : Retour d’expérience</a></li>
<li><a href="http://jaysoo.ca/2014/01/27/gruntjs-vs-gulpjs/">Grunt vs. Gulp, au-delà des chiffres</a> (anglais)</li>
</ul>
<pre><code class="lang-shell"><span class="hljs-variable">$ </span>gulp bisous
❯ ♡ 😘
</code></pre>

]]></description><pubDate>Tue, 29 Apr 2014 00:00:00 GMT</pubDate><link>http://putaindecode.fr/posts/js/introduction-gulp/</link><guid isPermaLink="true">http://putaindecode.fr/posts/js/introduction-gulp/</guid></item><item><title>Les post-processeurs CSS</title><description><![CDATA[[
<p>Vous avez surement entendu parler des <a href="http://iamvdo.me/blog/les-postprocesseurs-css"><em>post-processeurs CSS</em></a>.
J’ai personnellement pas mal fait référence à <del>ce concept</del> cette expression ces derniers temps.
Que ce soit lorsque je vous racontais
<a href="/posts/css/comment-en-finir-avec-les-prefixes/">comment se passer des préfixes CSS</a>
ou lors
<a href="/posts/css/le-point-sur-les-preprocesseurs/">d’un point sur les pré-processeurs CSS</a>.
N’y a-t-il rien qui vous a fait tiquer ?</p>
<h2 id="du-post-processing-">Du post-processing ?</h2>
<p>Bon on va pas jouer sur les mots mais quand même un peu. <em>Post</em> ça veut dire après.
Mais après quoi ? Après du <em>processing</em>. Donc en théorie après que la feuille de
style ait été traitée.</p>
<p>Si on revient sur <em>pré-processeurs</em>, on a quelques choses de sensé.
On travaille sur la feuille de style avant qu’elle n’ait été traitée.
Traitée par qui ? Je dirais le navigateur pas vous ?
Dans ce cas le pré-processing est tout à fait logique.</p>
<p>Mais le post-processing ? Du vrai post-processing ça existe ? Oui et ça ressemblerait à ça par exemple :
<a href="http://jsfiddle.net/yyx990803/B5JTg/">Interpolation de CSS avec Vue.js</a> (enfin je crois).
Ici on a un process sur du CSS existant, déjà traité par le navigateur.</p>
<p>Bon ok j’avoue que je pinaille un peu. On pourrait considérer que le “process”,
c’est le fait d’améliorer sa feuille de style et dans ce cas, on pourrait accepter pré- et post-process.
Mais ça reste pas super exact de mon point de vue.</p>
<p>Du coup on appelle ça comment les post-processeurs ?
Devrait-on appeler ça du <em>post-pré-processing</em> ? Je vous le demande.</p>
<p>Assez plaisanté, passons donc à l’explication de ce qu’on appelera le <em>post-processing.</em></p>
<h2 id="le-post-processing">Le post-processing</h2>
<p>Quel est la différence avec du pré-processing ? Pour répondre à cette question,
il faut bien définir ce qu’est le pré-processing dans notre contexte.</p>
<h3 id="le-pr-processing-css">Le pré-processing CSS</h3>
<p>Le pré-processing est un pré-traitement avant le traitment final. Dans le cas de feuille de style,
on travaille donc sur des pré-feuilles de style. Ce ne sont donc pas des feuilles de style.
Comment les différencie-t-on ? La syntaxe.</p>
<p>Hola hola, calmez-vous. J’en entends déjà chouiner qu’avec Sass, Less et Stylus,
on peut coller du CSS valide et Ça Marche™. Oui ça marche. Mais seulement dans ce sens.
Si on essaye de faire parser un <code>@foreach</code>, <code>@include</code> ou ce genre de nouveautés
apportés par un pré-processeur, votre navigateur il va faire la gueule.</p>
<p>En effet un pré-processeur n’est rien d’autre qu’un langage. Un nouveau.
Il ajoute des éléments à ce langage, et change même éventuellement la syntaxe.
Certes il peut s’appuyer sur un langage existant (par exemple la syntaxe Scss de Sass, ou la syntaxe Less )
mais ça n’est pas obligé (exemple avec l’ancienne syntaxe Sass, ou encore pour changer de registre, CoffeeScript pour du JavaScript).</p>
<h3 id="diff-rence-entre-post-processing-et-pr-processing">Différence entre post-processing et pré-processing</h3>
<p>Avant de parler des différences il nous faut un cas concret pour y voir plus clair.
Autoprefixer est un très bon exemple, mais je vais vous en montrer un encore plus pertinent: les fallbacks REM.
J’espère que vous connaissez le REM (root EM), cette unité CSS très utile qui permet d’avoir la souplesse de l’unité EM,
en se basant non sur l’élement parent, mais l’élement root (donc le document).
Cette unité CSS n’est par exemple pas compatible avec IE8, et certain d’entre vous doivent encore le supporter.</p>
<p>On a donc vu pas mal de mixins genre <code>rem2px()</code> pour ajouter un fallback, via des pré-processeurs CSS.
Sauf que là, il semble beaucoup plus pertinent de ne pas alourdir son code (car on y ajoute rien d’intéressant),
surtout lorsque c’est pour supporter de vieux navigateurs.
Et si on pouvait ajouter un petit coup de peinture magique, je dirais même automatique,
afin d’avoir ce fallback ?</p>
<p>Et bien, on peut. Ça prend 20 secondes, et ça fera les choses bien, sans oubli.
Exemple avec <a href="https://github.com/ctalkington/rework-rem-fallback">rework-rem-fallback</a></p>
<pre><code class="lang-js"><span class="hljs-comment">// il faudrait installer les dépendances de la façon suivante</span>
<span class="hljs-comment">// $ npm i rework rework-rem-fallback</span>

<span class="hljs-keyword">var</span> rework = <span class="hljs-keyword">require</span>(<span class="hljs-string">'rework'</span>) <span class="hljs-comment">// le moteur rework, je reviens dessus après</span>
  , remFallback = <span class="hljs-keyword">require</span>(<span class="hljs-string">'rework-rem-fallback'</span>) <span class="hljs-comment">// le plugin rework</span>

  <span class="hljs-comment">// lecture du fichier css</span>
  , css = <span class="hljs-keyword">require</span>(<span class="hljs-string">'fs'</span>).readFileSync(<span class="hljs-string">'dist/index.css'</span>, <span class="hljs-string">'utf8'</span>).toString()

  <span class="hljs-comment">// on traite le CSS en indiquant à rework la source, et le plugin à utiliser</span>
  , out = rework(css).<span class="hljs-keyword">use</span>(remFallback()).toString()

  <span class="hljs-comment">// ici on fait la même chose, mais comme si la font de base était en 14px</span>
  , out14 = rework(css).<span class="hljs-keyword">use</span>(remFallback(<span class="hljs-number">14</span>)).toString()
</code></pre>
<p>Avec l’exemple d’avant, et ce bout de CSS:</p>
<pre><code class="lang-css"><span class="hljs-class">.main-header</span> <span class="hljs-rules">{ <span class="hljs-rule"><span class="hljs-attribute">width</span>:<span class="hljs-value"> <span class="hljs-number">5</span>rem </span></span></span>}
</code></pre>
<p>… On obtiendra le résultat suivant:</p>
<pre><code class="lang-css"><span class="hljs-class">.main-header</span> <span class="hljs-rules">{
  <span class="hljs-rule"><span class="hljs-attribute">width</span>:<span class="hljs-value"> <span class="hljs-number">80</span>px</span></span>;
  <span class="hljs-rule"><span class="hljs-attribute">width</span>:<span class="hljs-value"> <span class="hljs-number">5</span>rem</span></span>;
<span class="hljs-rule">}</span></span>
</code></pre>
<p>Notre exemple n’est pas intégré dans un
<a href="http://www.24joursdeweb.fr/2013/automatisez-votre-workflow-front-end/">workflow automatisé</a>,
mais c’est juste pour vous montrer que c’est l’histoire de 5 lignes de code
et pas autant de lignes que de fois où l’on a <code>rem</code> dans sa feuille de style.</p>
<p>Sexy n’est-ce pas ?</p>
<p>L’autre grosse différence entre le pré- et le post-processing, c’est le langage.
Ce post-processing s’effectue après du pré-processing. Donc après que le pré-processeur,
cet autre langage, ait fait son boulot.</p>
<p><strong>Le post-processing s’effectue sur du CSS de manière transparente.</strong></p>
<p><em>Ce processing s’effectue sur du vrai CSS (disons la syntaxe CSS).</em></p>
<p>Cette syntaxe étant très simple (se résumant principalement à <code>selecteur { prop: value }</code> - oui y’a les règles <code>@*</code> en plus je sais),
<a href="https://github.com/reworkcss/css-parse#performance">c’est très rapide à parser</a>.</p>
<h2 id="pourquoi-du-post-processing-">Pourquoi du post-processing ?</h2>
<p>Comme on vient de le voir avec les 2 points précédents, on a déjà 3 bonnes raisons :</p>
<ul>
<li>la simplicité (pour certains cas de figures, c’est plus pertinent, ça évite trop de code et des
oublis)</li>
<li>la vitesse</li>
<li>le fait de pouvoir brancher ses propres plugins</li>
</ul>
<p>Je sais pas vous mais moi ça me suffit. Et en cherchant mieux, on pourrait sûrement trouver d’autres arguments.
(<em>Rappel : d’ailleurs n’hésitez pas à modifier cet article si vous en avez</em>).</p>
<h2 id="avec-quoi-doit-on-post-processer-ces-css-">Avec quoi doit-on post-processer ces CSS ?</h2>
<p>Comme vous avez pu le voir tout à l’heure j’ai pris dans un exemple Rework,
mais il existe aussi PostCSS, plus récent.</p>
<h3 id="-rework-https-github-com-reworkcss-rework-"><a href="https://github.com/reworkcss/rework">Rework</a></h3>
<p>Rework a été initié par le grand <a href="https://github.com/visionmedia">TJ Holowaychuck</a>,
cette machine de guerre (<a href="http://www.quora.com/TJ-Holowaychuk-1/How-is-TJ-Holowaychuk-so-insanely-productive">que certains ne pensent même pas humain</a> pour vous dire).
TJ était il fut un temps utilisateur de Sass, il avait donc même commencé le
portage de <a href="https://github.com/stunti/sass.js">Sass en Node</a>.
Il a dû se rendre compte bien avant nous que ce n’était finalement pas forcément la meilleure option.
Il a donc développé <a href="https://github.com/LearnBoost/stylus/">Stylus</a> (si, si, c’est bien lui),
le temps de comprendre qu’une autre approche était possible (pour info, il ne maintient maintenant plus Stylus).</p>
<p>C’est donc <a href="https://github.com/reworkcss/rework/commit/0a7be255bfe753d03f93c7072351266fa636e80a">le 1er Septembre 2012 qu’il pousse la première version de Rework</a>.</p>
<p>L’objectif de Rework n’est pas spécialement de gérer du post-process.
Rework se place comme un manipulateur de CSS, permettant (entre autres) :</p>
<ul>
<li>l’automatisation d’ajout des préfixes</li>
<li>la création de nouvelles propriétés</li>
<li>l’intégration d’images inline</li>
</ul>
<p>Vous me direz que ça ressemble vachement à un pré-processeur n’est-ce pas ?
Vu l’historique que je viens de vous conter et <a href="https://github.com/reworkcss/rework#plugins">les plugins par défaut</a>,
vous aurez bien compris que c’est l’idée : faire un moteur de pré-processeur où l’on y branche des plugins pour ajouter nos propres fonctionnalités.
C’est grâce à ce projet qu’Autoprefixer a initialement vu le jour d’ailleurs.</p>
<h3 id="-postcss-https-github-com-ai-postcss-"><a href="https://github.com/ai/postcss">PostCSS</a></h3>
<p>Beaucoup plus récent, PostCSS a été écrit par l’auteur d’Autoprefixer.</p>
<blockquote>
<p>Heu mais quoi ? Tu viens de nous dire que Autoprefixer utilisait Rework ?!</p>
</blockquote>
<p>Oui <em>c’était</em> le cas. <em>Utilisait</em>. L’auteur de PostCSS s’explique dans <a href="https://github.com/ai/postcss#rework">son README</a>.
Il y indique que, bien que très similaire, Rework et PostCSS n’ont pas été développé pour les mêmes raisons.
C’est ce qui explique les différences au niveau des moteurs.
PostCSS se veut plus préservateur par rapport à votre source d’origine,
et gère donc mieux sourcemap, peut conserver votre espacement et indentation,
parse de manière plus sécurisé (vu que ça se veut mieux gérer le code legacy).</p>
<p>Dans la pratique je n’ai jamais eu de problème avec Rework, me souciant peu de la mise en forme de la sortie CSS.
Mais PostCSS semble avoir une API plus haut niveau et plus souple pour mieux travailler les feuilles de styles.</p>
<h3 id="rework-ou-postcss-">Rework ou PostCSS ?</h3>
<p>Tout dépend ce que vous voulez faire. Si vous avez en tête l’idée de développer un outil,
je pencherais plus vers PostCSS. Mais en temps qu’utilisateur, pour l’instant, définitivement Rework.</p>
<p>Ce dernier a clairement beaucoup plus de plugins existants. Voyez par vous-mêmes :</p>
<ul>
<li><a href="https://www.npmjs.org/search?q=rework">npmjs.org/search?q=rework</a></li>
<li><a href="https://www.npmjs.org/search?q=postcss">npmjs.org/search?q=postcss</a></li>
</ul>
<h2 id="rework-ce-n-est-pas-_que_-du-post-processing-">Rework ce n’est pas <em>que</em> du post-processing ?</h2>
<p>Oui en effet, comme je le disais avant, c’est pas le but. C’est du “processing”.
Pré-, post-… Qu’est-ce que ça change dans le fond hein ?</p>
<p>L’idée, en temps que développeur, est d’améliorer le confort d’écriture sans contrainte.
Comme je l’ai indiqué <a href="/posts/css/le-point-sur-les-preprocesseurs/#mon-avis-sur-les-pr-processeurs">précédemment</a>,
j’ai laché les pré-processeurs “classiques” ayant l’impression d’utiliser un tank pour tuer une mouche.
Car au fond pour 90% (si ce n’est plus) d’entres nous,
que nous faut-il pour bien développer des feuilles de styles ?
Un peu d’organisation, des variables et un poil de math ?
Personnellement je me contente de ça. Pour l’organisation, je suis devenu fan de BEM
(on vous en parle bientôt).</p>
<p><strong>Et en attendant de vraiment pouvoir utiliser les variables CSS associé à <code>calc()</code>,
je reste sur du <em>custom pré-processing</em> via Rework avec lequel je peux coder avec la syntaxe des specs (même si c’est en draft), plus future-proof.</strong></p>
<p>J’aime conserver la syntaxe CSS et avoir un process ultra-rapide et transparent.</p>
<h3 id="prochaine-tape-faire-son-propre-pr-post-processeur-css-c-est-simple">Prochaine étape: faire son propre pré/post-processeur CSS, c’est simple</h3>
<p>Rework ayant un bon petit paquet de plugins déjà existants, c’est assez simple de réaliser son propre pré-processeur via quelques lignes de code seulement.
La mise en place et l’automatisation feront l’objet d’un prochain article !</p>

]]></description><pubDate>Tue, 08 Apr 2014 00:00:00 GMT</pubDate><link>http://putaindecode.fr/posts/css/les-post-processeurs/</link><guid isPermaLink="true">http://putaindecode.fr/posts/css/les-post-processeurs/</guid></item><item><title>Le point sur les pré-processeurs CSS</title><description><![CDATA[[
<h2 id="pourquoi-les-pr-processeurs">Pourquoi les pré-processeurs</h2>
<p>Voilà ce que j’ai écrit en 2011 dans
<a href="http://moox.io/blog/utiliser-des-variables-fonctions-css/">mon premier post sur les pré-processeur</a>.
Je venais de découvrir cette notion et j’avais donc fait le tour de la question.</p>
<blockquote>
<p>Le langage des CSS n’a pas de côté dynamique. C’est lui avec lequel, à chaque
fois qu’on intègre une maquette graphique, on doit se taper tout de zéro.
Il a beau exister des CSS « Reset », des frameworks CSS, tout un tas de
grilles prête à l’emploi, des composants de CSS réutilisables avec l’approche
objet, je n’ai jamais réellement était satisfait par ces méthodes, que ce soit
à cause des contraintes qu’impose la syntaxe (devoir mettre des classes à tout
va dans l’HTML ça peut vite devenir chiant dans un CMS), ou par d’éventuelles
limitations qui obligent à « trop » modifier la source du document (pas assez
de, ou trop de, ou seulement ça ne me plait pas comment c’est fait).</p>
</blockquote>
<p>J’avais tout dit, même des trucs qu’aujourd’hui je pense être des conneries (il
n’y a que les cons qui ne changent pas d’avis + c’est en faisant des erreurs
qu’on apprend le mieux), mais je reviendrais dessus plus tard.</p>
<p>Du coup on en retire quoi ? Qu’utiliser un pré-processeur se justifie par
l’ajout de fonctionnalités lorsque vous écrivez des feuilles de style (en tant
que développeur). En tant qu’utilisateur du code produit, cela va permettre
d’ajouter une couche abstraction (ce qui peut poser des problèmes, je reviendrais
sur ce point plus tard).</p>
<h2 id="principales-fonctionnalit-s">Principales fonctionnalités</h2>
<ul>
<li>variables</li>
<li>fonctions</li>
<li>mixins (permettant de réaliser des sorties CSS paramétrables)</li>
<li><code>@import</code> intelligent (pas côté client)</li>
<li>nesting (imbrications des sélecteurs pour éviter la répétition)</li>
<li>optimisation et abstraction poussée (via les mixins, placeholders et <code>@extend</code>)</li>
</ul>
<p>Anciennement on aurait rajouté à cette liste la gestion du CSS 3, mais comme
je l’expliquais il y a peu, ce n’est plus nécessaire, on a une méthode bien
mieux, rapide et surtout <b>maintenu à jour</b> avec
<a href="/posts/css/comment-en-finir-avec-les-prefixes/">AutoPrefixer</a></p>
<h2 id="les-principaux-pr-processeurs">Les principaux pré-processeurs</h2>
<h3 id="-sass-http-sass-lang-com-"><a href="http://sass-lang.com/">Sass</a></h3>
<p>Sass est à mon avis le plus mature des pré-processeurs CSS.
Il possède 2 syntaxes (une indentée et une plus proche de CSS).
Ce projet avance à bon rythme. Niveau fonctionnalités, rien à dire si ce n’est que
celui-ci a un petit plus pour avec la feature <code>@content</code> qui permet pour le coup de
passer tout un bloc de propriétés en paramètre à des mixins. Ce qui est super
pratique lorsque l’on écrit pas mal de media queries.
(Après, venez pas me dire qu’on a plein de fois les media-queries qui se
répètent et que ce n’est pas bien pour la taille du fichier, gzip se chargera de ça -
<small><a href="https://twitter.com/kaelig/status/412909849207644160">exemple similaire</a>)</small>.</p>
<p>Le langage Sass possède une implémentation d’origine en Ruby mais aussi depuis
quelques temps une implémentation C qui se veut beaucoup plus rapide et portable:
<a href="http://libsass.org/">libsass</a> mais qui est encore un peu en retard niveau
fonctionnalité (affaire à suivre). Surtout depuis la version 3.3 qui possède de
nouvelles fonctionnalités (comme les maps, entre autres).</p>
<p>Avec ce pré-processeur, on peut s’éloigner pas mal du CSS natif, que ce soit avec
la syntaxe ou l’aspect programmation (il n’y a qu’à voir des trucs comme
<a href="https://github.com/Team-Sass/modular-scale">modular-scale</a> ou
<a href="https://github.com/HugoGiraudel/SassyMatrix">SassyMatrix</a>).</p>
<p>Bibliotèques construites sur Sass :</p>
<ul>
<li><a href="http://compass-style.org/">Compass</a>, solide, basé sur Ruby (incompatible libsass),</li>
<li><a href="http://bourbon.io/">Bourbon</a>, plus light mais plus rapide.</li>
</ul>
<h3 id="-less-http-lesscss-org-"><a href="http://lesscss.org/">LESS</a></h3>
<p>Je n’ai pas trop envie de parler de ce pré-processeur assez classique, qui a fait un
choix assez étrange pour les variables par exemple (oui, <code>@</code> est un caractère
spécial en CSS, c’est assez étrange de rajouter une couche avec pour les variables
avec ce dernier).
J’espère seulement que ceux qui l’utilisent aujourd’hui n’utilise pas le script côté client
(ce qui provoquerait un affichage sans CSS si le client n’a pas JavaScript activé).
Bien qu’il soit populaire, le repository sur GitHub n’est pas signe de bonne santé
à mes yeux. Voir des pull-requests qui traînent vielles de plusieurs
<del>mois</del> <ins>années</ins> me laissent dubitatif…
Puis il n’y a qu’à voir l’exemple sur la homepage du site avec les box-shadow,
pour voir que ce pré-processeur est assez déprécié.</p>
<p>Ajoutons à cela le fait que Twitter Boostrap a (enfin) une version Sass…</p>
<p>Côté fonctionnalités, l’aspect programmation est assez laborieux avec la façon dont
sont gérés les mixins conditionnels. Je passe sur ce point gerbant.</p>
<p>Bibliotèques construites sur Less :</p>
<ul>
<li><a href="http://lesshat.madebysource.com/">LESS Hat</a>,</li>
<li><a href="http://lesselements.com/">LESS Elements</a>.</li>
</ul>
<h3 id="-stylus-http-learnboost-github-io-stylus-"><a href="http://learnboost.github.io/stylus/">Stylus</a></h3>
<p>Stylus se veut plus transparent que les autres pré-processeurs. C’est un point
réussi puisqu’il permet d’avoir des mixins transparents au niveau écriture.
Cela peut par contre bien entendu rendre la maintenance et la compréhension plus
difficile si on en abuse.
Il permet aussi de coder sans <code>{}</code> ni <code>:</code> ni <code>;</code> (bien que tout cela soit optionnel)</p>
<p>Niveau fonctionnalités cela ne vaut pas Sass. Ici pas de <code>@content</code> ou de maps.</p>
<p>Bibliotèque construite sur Stylus :</p>
<ul>
<li><a href="http://visionmedia.github.io/nib/">Nib</a></li>
</ul>
<h3 id="alternatives">Alternatives</h3>
<p>On peut s’amuser à faire un pré-processeur CSS avec n’importe quel langage c’est
évident.
Mais <a href="http://www.alsacreations.com/astuce/lire/1433-utiliser-php-pour-gerer-vos-styles-css.html">les enfants, ne faites pas ça.</a>
À moins que vous souhaitiez alourdir vos CSS plus que vous y gagnerez.
Puis si c’est juste pour ajouter des variables, il existe d’autres solutions…</p>
<p><em>Note: si vous avez d’autres pré-processeurs intéressants, je me ferais un plaisir
de les ajouter ici. Mais bon <a href="https://github.com/putaindecode/website/blob/master/pages/posts/css/le-point-sur-les-preprocesseurs/index.md">vous pouvez aussi le faire tout seul comme un
grand</a>.</em></p>
<h2 id="les-pr-processeurs-sont-ils-vraiment-n-cessaire-">Les pré-processeurs sont-ils vraiment nécessaire ?</h2>
<blockquote>
<p>Oula. Le mec vient de nous poser un post pour nous parler des pré-processeurs,
et il nous sort une question comme ça ? Il est où le piège ?</p>
</blockquote>
<p>Si je pose la question c’est que j’ai une petite réponse par là. Et elle ne va
peut-être pas vous plaire.</p>
<p>Je vais revenir sur certains points qui peuvent poser problème avec les pré-processeurs.</p>
<h3 id="le-nesting-cay-mal">Le nesting cay mal</h3>
<p>Ahh… Le nesting, c’est bien pratique lorsque l’on travaille sur un CMS
(ou n’importe quoi ayant un code HTML qu’on ne maitrise pas facilement)
de pouvoir utiliser le nesting pour pouvoir rapidement produire les sélecteurs adéquats.
Mais en terme de maintenance et surtout de réutilisation, c’est vraiment à chier.
Faut dire ce qui est.</p>
<pre><code class="lang-scss">.widget {
 <span class="hljs-comment"> // titre</span>
  h3 { }

 <span class="hljs-comment"> // widget body</span>
  &gt; <span class="hljs-operator">div</span> {

   <span class="hljs-comment"> // liste</span>
    ul {

    }
  }
}
</code></pre>
<p>Cet exemple est parfait pour démontrer les limites du nesting.
Comment faire si, sur un widget donnée, nous avons comme titre un h2 ou h4 ?
Il faut alourdir la CSS. Pareillement, si notre fameuse liste dans le corps n’est
pas dans la même arborescence que celle décrite, il faut à nouveau alourdir notre CSS.
Sans rentrer dans ces solutions solides (nous parlerons de BEM très bientôt),
cette solution serait bien plus élégante pour la réutilisation :</p>
<pre><code class="lang-css"><span class="hljs-class">.widget</span> <span class="hljs-rules">{<span class="hljs-rule">}</span></span>

  <span class="hljs-class">.widget-title</span> <span class="hljs-rules">{ <span class="hljs-rule">}</span></span>

  <span class="hljs-class">.widget-body</span> <span class="hljs-rules">{ <span class="hljs-rule">}</span></span>

    <span class="hljs-class">.widget-body-list</span> <span class="hljs-rules">{ <span class="hljs-rule">}</span></span>
</code></pre>
<p>Vous remarquerez que j’ai un code ici beaucoup plus compréhensible par un nouveau,
mais aussi bien mieux réutilisable et surtout, point très important, non couplé
(non dépendant) à notre arborescence HTML (coucou le DOM).
De plus, utiliser le nesting provoque des sélecteurs à rallonges, après c’est la
course à la longueur (et au poids) des sélecteurs quand il faut surcharger une
règle héritée.
Avec de simple sélecteurs, pas de souci de ce genre là.</p>
<p><em>ProTip™ : vous remarquerez que j’indente mon CSS à l’image des composants, ça mange
pas de pain, est cela facilite la lecture, moins linéaire.</em></p>
<p>Donc je reviens sur ce que je disais, il faut utiliser pleins de classes dans l’HTML.
Ça sert à ça. Votre CSS produit de cette façon sera bien plus réutilisable.</p>
<h3 id="l-abstraction-cay-dangereux">L’abstraction cay dangereux</h3>
<p>On en revient à la magie. Lorsqu’on a trop de couche qui cache ce qu’il y a
réellement sous le capot, <a href="http://linuxfr.org/news/encore-un-exemple-de-code-spaghetti-toyota">on peut vite perdre le contrôle</a>.</p>
<p>Et voici <a href="https://github.com/MoOx/compass-recipes/issues/104">un parfait exemple</a>
où un utilisateur de ma bibliothèque <a href="https://github.com/MoOx/compass-recipes">Compass Recipes</a>
avait un problème lorsqu’il utilisait 2 mixins qui cachaient trop de code.
Dans  notre cas corners-tucked (version coin scotché) et background-noise (bruit visuel).
Il en a perdu des choses simples et avait passé beaucoup de temps à se prendre la tête
alors que la solution était très (trop) simple (une histoire entre <code>background-image</code>
et le shorthand <code>background</code>).</p>
<p>Je me laisse souvent attirer par la magie d’un code, mais mon expérience m’indique
aujourd’hui qu’il ne faut pas abuser de cette partie mystérieuse où l’on ne sait
plus ce qui se passe.</p>
<p>Je vous laisse imaginer du nesting caché dans des mixins qui utilisent d’autres mixins
qui font des @extends de placeholders…</p>
<blockquote>
<p>Un grand pouvoir implique de grandes responsabilités.</p>
</blockquote>
<p>Tout est dit. Il faut faire attention. Très attention.</p>
<h2 id="mon-avis-sur-les-pr-processeurs">Mon avis sur les pré-processeurs</h2>
<p>Je pense que les pré-processeurs restent utiles mais seulement pour des projets
de très grosse envergure, qui possède énormément de code CSS et/ou extrêmement dynamique.
Ou que vous utilisez de solutions comme <a href="http://getbootstrap.com/">Bootstrap</a> ou
<a href="http://foundation.zurb.com/">Foundation</a>, chose que je déconseille pour autre chose que des prototypes.</p>
<p>De part mon expérience et mon recul (si si j’en prends je vous jure), je pense que
j’aurais pu m’en passer bien plus souvent que j’ai voulu l’admettre par le passé.
Mais bon comme je dis souvent, quel plaisir de se planter quand ce n’est pas dans un platane !</p>
<p>Ce qu’il faut retenir clairement c’est que ce ne sont pas les pré-processeurs qui
vont vous faire écrire des meilleurs feuilles de styles. C’est plus un travail sur
une méthodologie et  une organisation adapté à vos besoins qui amélioreront
votre quotidien de webdesigner (oui quoi, dès qu’on code du CSS, on peut
utiliser l’appellation webdesigner sur son CV, ça en jete).</p>
<p>J’ai donc longtemps apprécié les pré-processeurs CSS, mais aujourd’hui je commence
à leur tourner le dos du fait que je n’utilise que trop peu de leurs fonctionnalités.
J’évite l’overkill quoi.</p>
<p>Quand on voit que des <em>grands</em> de l’HTML / CSS comme <a href="http://nicolasgallagher.com/">@necolas</a>
n’utilise pas de pré-processeur, on a de quoi se poser des questions.
Avec une bonne bibliothèque comme <a href="https://github.com/suitcss/suit/">SUIT CSS</a>,
on s’en retrouve à ne manquer que des petites choses.</p>
<p>Que l’on peut combler.</p>
<p>Avec les post-processeurs par exemple.</p>
<p>J’ai donc à ce jour moi aussi conservé une couche pour ajouter le minimum vital en tant que développeur.</p>
<p>Mais ne voulant pas alourdir ce post consacré aux pré-processeurs CSS,
vous pourrez continuer la lecture au prochain épisode qui sera consacré aux post-processeurs…</p>
<p><small>(Mamam, t’as vu ce cliffhanger digne des séries US !)</small></p>
<p>Bon promis la prochain fois je vous en parle des post-processeurs. Pour de vrai.</p>

]]></description><pubDate>Tue, 11 Mar 2014 00:00:00 GMT</pubDate><link>http://putaindecode.fr/posts/css/le-point-sur-les-preprocesseurs/</link><guid isPermaLink="true">http://putaindecode.fr/posts/css/le-point-sur-les-preprocesseurs/</guid></item><item><title>Mise en place d’autoprefixer</title><description><![CDATA[[
<p>Suite à mon précédent article <a href="/posts/css/comment-en-finir-avec-les-prefixes/">Comment en finir avec les préfixes CSS</a>,
certains sont restés sur leur faim.
Voici donc de rapides exemples de mise en place de cette solution.</p>
<h2 id="installation-d-autoprefixer">Installation d’autoprefixer</h2>
<p>Il vous faudra <a href="http://nodejs.org/">Node.js</a> (qui embarque maintenant <a href="https://www.npmjs.org/">Npm</a>) afin de pouvoir
installer ce nouveau joujou.</p>
<pre><code class="lang-shell"><span class="hljs-comment"># on install autoprefixer via npm en global</span>
$ <span class="hljs-built_in">npm</span> install --<span class="hljs-built_in">global</span> autoprefixer
<span class="hljs-comment"># ou pour les fainéants</span>
$ <span class="hljs-built_in">npm</span> i -g autoprefixer
</code></pre>
<p>Une fois ceci fait, vous devriez avoir la commande <code>autoprefixer</code> disponible.
On vérifie de suite avec <code>autoprefixer -v</code>.</p>
<pre><code class="lang-shell"><span class="hljs-variable">$ </span>autoprefixer -v
autoprefixer <span class="hljs-number">1.0</span>.<span class="hljs-number">20140203</span>
</code></pre>
<p>Vous remarquerez que le numéro de version est un peu spécial : il contient une
date en place d’un numéro de patch. Cette date correspond à la dernière mise à
jour de la base de données de <em>Can I Use</em>.</p>
<h2 id="utilisation-d-autoprefixer">Utilisation d’autoprefixer</h2>
<pre><code class="lang-shell"><span class="hljs-variable">$ </span>autoprefixer *.css
</code></pre>
<p>C’est aussi simple que ça.</p>
<p>En fait non je plaisante, c’est un tout petit peu plus long car par défaut,
comme beaucoup de commandes, vous allez avoir la sortie crachée en plein visage.</p>
<p>Pour voir les options, comme d’habitude <code>--help</code> ou <code>-h</code> :</p>
<pre><code class="lang-shell"><span class="hljs-variable">$ </span>autoprefixer -h
</code></pre>
<p>On y apprend l’existance des options suivantes :</p>
<pre><code>Options:
  -<span class="ruby">b, --browsers <span class="hljs-constant">BROWSERS</span>  add prefixes <span class="hljs-keyword">for</span> selected browsers
</span>  -<span class="ruby">o, --output <span class="hljs-constant">FILE</span>        set output file
</span>  -<span class="ruby">d, --dir <span class="hljs-constant">DIR</span>            set output dir
</span>  -<span class="ruby">m, --map                generate source map
</span>  -<span class="ruby">i, --info               show selected browsers <span class="hljs-keyword">and</span> properties
</span>  -<span class="ruby">h, --help               show help text
</span>  -<span class="ruby">v, --version            print program version</span>
</code></pre><p>Du coup si on veut faire un coup de commande bien personnalisée on pourra faire :</p>
<pre><code class="lang-shell">$ autoprefixer -b <span class="hljs-string">"last 2 versions, &gt; 1%, Explorer 7, Android 2"</span> -o prefixed<span class="hljs-preprocessor">.css</span> index<span class="hljs-preprocessor">.css</span>
</code></pre>
<p>Il va par contre nous falloir un fichier css pour tester :</p>
<pre><code class="lang-shell"><span class="hljs-comment"># on met un peu de CSS dans index.css manière de tester le bouzin</span>
$ <span class="hljs-built_in">echo</span> <span class="hljs-string">"* { box-sizing:border-box}"</span> &gt; index.css
</code></pre>
<p>On peut donc essayer notre commande plus haut qui va remplir le fichier <code>prefixed.css</code></p>
<p>Pour vérifier :</p>
<pre><code class="lang-shell">$ cat prefixed<span class="hljs-built_in">.</span>css
<span class="hljs-subst">*</span> { <span class="hljs-attribute">-webkit</span><span class="hljs-attribute">-box</span><span class="hljs-attribute">-sizing</span>:border<span class="hljs-attribute">-box</span>; <span class="hljs-attribute">-moz</span><span class="hljs-attribute">-box</span><span class="hljs-attribute">-sizing</span>:border<span class="hljs-attribute">-box</span>; box<span class="hljs-attribute">-sizing</span>:border<span class="hljs-attribute">-box</span>}
</code></pre>
<p>On a bien eu des préfixes ajoutés en fonction de notre demande (bon rien pour IE
qui n’est pas passé par une version préfixé)</p>
<p>Par défaut, <em>autoprefixer</em> utilise <code>&gt; 1%, last 2 versions, Firefox ESR, Opera 12.1</code> pour les navigateurs.
Je pense que pour la plupart d’entre vous voudront ajouter “Explorer 8” à la liste, mais ça
n’est en théorie pas nécessaire vu le permier argument qui demande de préfixer tous les navigateurs
dont l’usage global est supérieur à 1%. Peut-être Explorer 7 pour certains ?
Faites un tour sur la <a href="http://caniuse.com/usage_table.php">page dédié aux statistiques globales sur CanIUse.com</a> pour avoir une idée.</p>
<p>Sinon, pour du petit one shot, un plugin dans votre éditeur suffira:</p>
<ul>
<li><a href="https://github.com/sindresorhus/atom-autoprefixer">plugin autoprefixer pour Atom</a></li>
<li><a href="https://github.com/sindresorhus/sublime-autoprefixer">plugin autoprefixer pour Sublime Text</a></li>
<li><a href="https://github.com/mikaeljorhult/brackets-autoprefixer">plugin autoprefixer pour Brackets</a></li>
</ul>
<figure>
  <img src="../../../images/posts/sublime-text/autoprefixer.gif" alt="sublime text autoprefixer preview">
  <figcaption>Intégration dans Sublime Text</figcaption>
</figure>

<h2 id="automatisation-d-autoprefixer-autoception-">Automatisation d’autoprefixer (autoception)</h2>
<p>Bien entendu on va pas se taper la commande à la main tout le temps hein…
Il nous faut automatiser nos processus. Sans quoi on perd du temps, et
<a href="http://deboutlesgens.com/blog/jai-pas-le-temps-la-pire-excuse-qui-soit/">le temps… C’est du temps !</a></p>
<p>Donc, comme je l’ai dit précédemment, on peut utiliser <em>autoprefixer</em> avec les solutions
suivantes:</p>
<ul>
<li>via <a href="https://github.com/ai/autoprefixer#nodejs">Node.js</a> directement,</li>
<li>en plugin <a href="https://www.npmjs.org/package/gulp-autoprefixer">Gulp</a>,</li>
<li>en plugin <a href="https://github.com/ai/autoprefixer#grunt">Grunt</a>,</li>
<li>via <a href="https://github.com/ai/autoprefixer#compass">Compass</a>,</li>
<li>en plugin <a href="https://github.com/ai/autoprefixer#stylus">Stylus</a>,</li>
<li>avec <a href="https://github.com/ai/autoprefixer#ruby-on-rails">RoR</a> ou <a href="https://github.com/ai/autoprefixer#ruby">Ruby</a>,</li>
<li>avec l’application <a href="https://github.com/ai/autoprefixer#prepros">Prepros</a></li>
<li>via <a href="https://github.com/ai/autoprefixer#mincer">Mincer</a></li>
<li>via <a href="https://github.com/ai/autoprefixer#middleman">Middleman</a></li>
<li>avec <a href="https://github.com/ai/autoprefixer#php">PHP</a> (vous avez bien lu)</li>
</ul>
<p>Si vous avez besoin, je pense que vous trouverez sans trop de problème d’autres
implémentations.</p>
<p>Cela dit, je vais vous montrer quelques cas d’utilisations:</p>
<h3 id="make">Make</h3>
<p>Là c’est facile, tout bon développeur doit avoir <code>make</code> sur sa machine (sinon
c’est que t’es pas développeur, je sais pas trop ce que tu fais ici du coup).</p>
<p>On peut tout simplement créer un fichier <code>Makefile</code> avec la commande précédente:</p>
<pre><code class="lang-shell"><span class="hljs-comment"># création d’un dossier pour notre popote (puis on va dedans...)</span>
<span class="hljs-variable">$ </span>mkdir autoprefixer-test &amp;&amp; cd autoprefixer-test

<span class="hljs-comment"># On créer un makefile avec une tâche `css` (création/écrasement via &gt;)</span>
<span class="hljs-variable">$ </span>echo <span class="hljs-string">"css:"</span> &gt; <span class="hljs-constant">Makefile</span>

<span class="hljs-comment"># On vérifie qu’on a bien rempli le fichier</span>
<span class="hljs-variable">$ </span>cat <span class="hljs-constant">Makefile</span>

<span class="hljs-comment">## On ajoute notre commande au fichier (ajout au fichier existant via &gt;&gt;)</span>
<span class="hljs-variable">$ </span>echo <span class="hljs-string">"\tautoprefixer index.css -b \"last 2 versions, &gt; 1%, Explorer 7, Android 2\" -o prefixed.css"</span> &gt;&gt; <span class="hljs-constant">Makefile</span>

<span class="hljs-comment"># On vérifie qu’on a bien rempli le fichier</span>
<span class="hljs-variable">$ </span>cat <span class="hljs-constant">Makefile</span>
</code></pre>
<p>Voilà votre Makefile doit être bien rempli. Pour tester la commande <code>css</code>:</p>
<pre><code class="lang-shell"><span class="hljs-variable">$ </span>make css
</code></pre>
<p>Vous remarquerez que la commande <em>autoprefixer</em> s’affiche, si ça vous embête, rajoutez
<code>@</code> devant. Vous pouvez modifier votre Makefile dans ce sens:</p>
<pre><code><span class="hljs-label">css:</span>
    echo <span class="hljs-string">"❯ Autoprefixage magique."</span>
    @autoprefixer index<span class="hljs-preprocessor">.css</span> -b <span class="hljs-string">"last 2 versions, &gt; 1%, Explorer 7, Android 2"</span> -o prefixed<span class="hljs-preprocessor">.css</span>
</code></pre><p><em>Attention : Les Makefiles utilisent des tabulations uniquement ! Sans quoi cela
ne va pas marcher comme prévu.</em></p>
<p>Vous avez donc maintenant un exemple assez simpliste qui peut être utilisé si
vous n’avez pas encore <a href="http://www.24joursdeweb.fr/2013/automatisez-votre-workflow-front-end/">automatisé votre workflow</a>
via des outils comme <a href="http://gulpjs.com/">Gulp</a> ou <a href="http://gruntjs.com/">Grunt</a>.</p>
<p>Passons justement à ces solutions plus sérieuses.</p>
<h3 id="autoprefixer-avec-gulp">Autoprefixer avec Gulp</h3>
<p>Je ne vais pas trop rentrer dans les détails de Gulp (ce n’est pas le sujet ici).
Voici cependant une exemple assez bref et compréhensible pour commencer, avec
une seule écriture sur le système de fichier (contrairement à la solution Grunt).</p>
<pre><code class="lang-js"><span class="hljs-comment">// gulp stuff</span>
<span class="hljs-keyword">var</span> gulp = <span class="hljs-built_in">require</span>(<span class="hljs-string">"gulp"</span>)
  , gutil = <span class="hljs-built_in">require</span>(<span class="hljs-string">"gulp-util"</span>)
  <span class="hljs-comment">// le plombier ajuste les fuites des tuyaux (erreur de pipe)</span>
  <span class="hljs-comment">// ceci est conseillé pour éviter que chaque erreur "casse" tout le process</span>
  <span class="hljs-comment">// dès qu’une erreur est remonté par un plugin</span>
  , plumber = <span class="hljs-built_in">require</span>(<span class="hljs-string">"gulp-plumber"</span>)

<span class="hljs-comment">// css stuff</span>
<span class="hljs-keyword">var</span> sass = <span class="hljs-built_in">require</span>(<span class="hljs-string">"gulp-ruby-sass"</span>)
  , autoprefixer = <span class="hljs-built_in">require</span>(<span class="hljs-string">"gulp-autoprefixer"</span>)
  , csso = <span class="hljs-built_in">require</span>(<span class="hljs-string">"gulp-csso"</span>)

<span class="hljs-comment">// css task: sass, autoprefixer et csso si --production</span>
gulp.task(<span class="hljs-string">"styles"</span>, <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">()</span> {</span>
  gulp.src(<span class="hljs-string">"./src/css/*.scss"</span>)
    <span class="hljs-comment">// it’s me, Mario</span>
    .pipe(plumber())

    .pipe(sass({style: <span class="hljs-string">"expanded"</span>}))

    <span class="hljs-comment">// Autoprefixer \\</span>
    <span class="hljs-comment">// vous remarquerez que ici chaque option est un paramètre</span>
    <span class="hljs-comment">// pas comme pour l’appel en ligne de commande.</span>
    .pipe(autoprefixer(<span class="hljs-string">"last 2 versions"</span>, <span class="hljs-string">"&gt; 1%"</span>, <span class="hljs-string">"Explorer 7"</span>, <span class="hljs-string">"Android 2"</span>))

    <span class="hljs-comment">// optimisation CSS pour la prod uniquement</span>
    .pipe(gulp.env.production ? csso() : gutil.noop())

    <span class="hljs-comment">// unique écriture sur disque</span>
    .pipe(gulp.dest(<span class="hljs-string">"./dist/css/"</span>))
    <span class="hljs-comment">// je passe sur cette partie à configurer, mais ici on peut imaginer un</span>
    <span class="hljs-comment">// livereload en plus, il faudra définir livereload et livereloadServer</span>
    <span class="hljs-comment">// cette partie dépend un peu de votre serveur durant le dév.</span>
    <span class="hljs-comment">// ca fera l’objet d’un post tiens...</span>
    <span class="hljs-comment">//.pipe(livereload(livereloadServer))</span>
})

gulp.task(<span class="hljs-string">"dev"</span>, [<span class="hljs-string">"styles"</span>], <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">()</span> {</span>
  gulp.watch(<span class="hljs-string">"./src/css/**/*"</span>, <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">(event)</span> {</span>
    gulp.run(<span class="hljs-string">"styles"</span>)
  })
})

<span class="hljs-comment">// Tâches disponibles :</span>

<span class="hljs-comment">// - pour générer les feuilles de styles</span>
<span class="hljs-comment">//   (pour optimiser pour la prod, utiliser l’option)</span>
<span class="hljs-comment">// $ gulp styles [--production]</span>

<span class="hljs-comment">// - pour le dev, surveille et lance la tâche `styles` dès que nécessaire</span>
<span class="hljs-comment">// $ gulp dev</span>
</code></pre>
<h3 id="autoprefixer-avec-grunt">Autoprefixer avec Grunt</h3>
<p>Voici un petit Gruntfile avec la même configuration que ci dessus</p>
<pre><code class="lang-js">module.exports = <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">(grunt)</span> {</span>
<span class="hljs-pi">  "use strict"</span>;

  grunt.loadNpmTasks(<span class="hljs-string">"grunt-contrib-sass"</span>)
  grunt.loadNpmTasks(<span class="hljs-string">"grunt-autoprefixer"</span>)
  grunt.loadNpmTasks(<span class="hljs-string">"grunt-csso"</span>)
  grunt.loadNpmTasks(<span class="hljs-string">"grunt-contrib-watch"</span>)

  grunt.initConfig({
    sass: {
      dist: {
        options: {
          style: <span class="hljs-string">"expanded"</span>
        }
      , files: [{
          expand: <span class="hljs-literal">true</span>
        , flatten: <span class="hljs-literal">true</span>
        , cwd: <span class="hljs-string">"./src/css"</span>
        , src: [<span class="hljs-string">"*.scss"</span>]
        , dest: <span class="hljs-string">"./dist/css"</span>
        , ext: <span class="hljs-string">".css"</span>
        }]
      }
    }
  , autoprefixer: {
      options: {
        browsers: [<span class="hljs-string">"last 2 versions"</span>, <span class="hljs-string">"&gt; 1%"</span>, <span class="hljs-string">"Explorer 7"</span>, <span class="hljs-string">"Android 2"</span>]
      }
    , dist: {
        expand: <span class="hljs-literal">true</span>
      , flatten: <span class="hljs-literal">true</span>
      , cwd: <span class="hljs-string">"./dist/css"</span>
      , src: [<span class="hljs-string">"*.css"</span>]
      , dest: <span class="hljs-string">"./dist/css/"</span>
      }
    }
  , csso: {
      dist: {
        expand: <span class="hljs-literal">true</span>
      , flatten: <span class="hljs-literal">true</span>
      , cwd: <span class="hljs-string">"./dist/css/"</span>
      , src: [<span class="hljs-string">"*.css"</span>]
      , dest: <span class="hljs-string">"./dist/css/"</span>
      }
    }

  , watch: {
      styles: {
        files: [<span class="hljs-string">"./src/css/**/*.scss"</span>]
      , tasks: [<span class="hljs-string">"styles"</span>]
      }
    }
  })

  grunt.registerTask(<span class="hljs-string">"styles"</span>, [<span class="hljs-string">"sass"</span>, <span class="hljs-string">"autoprefixer"</span>])
  grunt.registerTask(<span class="hljs-string">"styles:production"</span>, [<span class="hljs-string">"sass"</span>, <span class="hljs-string">"autoprefixer"</span>, <span class="hljs-string">"csso"</span>])
  grunt.registerTask(<span class="hljs-string">"dev"</span>, [<span class="hljs-string">"sass"</span>, <span class="hljs-string">"watch"</span>])
}

<span class="hljs-comment">// Tâches disponibles :</span>

<span class="hljs-comment">// - pour générer les feuilles de styles</span>
<span class="hljs-comment">// $ grunt styles</span>

<span class="hljs-comment">// - pareil, mais optimiser pour la prod</span>
<span class="hljs-comment">// $ grunt styles:production</span>

<span class="hljs-comment">// - pour le dev, surveille et lance la tâche `styles` dès que nécessaire</span>
<span class="hljs-comment">// $ grunt watch</span>
</code></pre>
<p>Comme vous pouvez le voir, la version Grunt est un peu plus volumineuse (bien qu’espacée).
Personnellement j’aime la concision de gulp.
De plus la version Grunt sera plus longue car nous aurons 3 lectures / écritures sur le disque.</p>
<p><em>Notez que bien entendu dans notre exemple précédent, nous pouvons remplacer Sass
par un autre pré / post-processeur.</em></p>
<h3 id="autoprefixer-avec-stylus">Autoprefixer avec Stylus</h3>
<p>Dans les exemples précédents, j’ai montré une solution classique avec Sass.
Mais voici complètement autre chose: <em>autoprefixer</em> peut s’utiliser en “plugin” Stylus.</p>
<p>C’est assez simple il suffit d’utiliser l’option <code>use</code> (<code>-u</code> en cli).
Voilà ce qu’on aurait en cli :</p>
<pre><code class="lang-shell">$ npm install <span class="hljs-attribute">-g</span> stylus autoprefixer<span class="hljs-attribute">-stylus</span>
$ stylus <span class="hljs-attribute">-u</span> autoprefixer<span class="hljs-attribute">-stylus</span> <span class="hljs-attribute">-o</span> index<span class="hljs-built_in">.</span>css index<span class="hljs-built_in">.</span>styl
</code></pre>
<h4 id="avec-grunt">Avec Grunt</h4>
<p>Il suffira d’utiliser donc l’option <code>use</code> dans votre configuration.</p>
<h4 id="-avec-gulp-"><del>Avec Gulp</del></h4>
<p>La façon de faire de gulp, via des streams pour éviter la lecture / écriture multiple fait que le plugin
<em>autoprefixer-stylus</em> est vide de sens.
Vous pouvez donc utiliser <em>autoprefixer</em> normalement, après l’appel du pré-processeur.</p>
<hr>
<p>Voilà j’espère que cette fois-ci vous êtes rassasié(e) afin de ne plus avoir envie de manger des préfixes CSS !</p>

]]></description><pubDate>Tue, 04 Mar 2014 00:00:00 GMT</pubDate><link>http://putaindecode.fr/posts/css/mise-en-place-autoprefixer/</link><guid isPermaLink="true">http://putaindecode.fr/posts/css/mise-en-place-autoprefixer/</guid></item><item><title>Git, boutez les bugs, domptez votre historique!</title><description><![CDATA[[
<p>Vous viendez de lire l’<a href="/posts/git/versionner-avec-git/">article de madx</a> sur le gestionnaire
de version Git et vous vous dites que vous aimeriez en découvrir plus! Vous l’utilisez déjà mais êtes
en quête de quelques nouvelles (ou pas) astuces à vous mettre sous la dent! Bienvenue!</p>
<p>Si vous désirez vous servir de cet article comme d’un tutoriel il est recommandé d’avoir quelques
bases concernant l’utilisation et le fonctionnement de Git (commits/branches/etc…).</p>
<p>Allez, je ne vous fais pas plus attendre, voici ma liste des fonctionnalités Git dont je ne
saurais plus me passer:</p>
<h2 id="git-lg-l-alias-qui-vous-parle-d-histoire">git lg, l’alias qui vous parle d’Histoire</h2>
<p>À l’aide, à l’aide je ne comprends plus rien à l’historique de mon dépôt Git!
J’ai créé un monstre… Pas de panique! J’ai pour vous l’alias qu’il vous faut,
honteusement pompé de <a href="https://coderwall.com/p/euwpig">ce site</a>, mais
comme j’ai pas d’honneur… Pour le mettre en place il suffit d’entrer la commande
suivante dans votre terminal préféré:</p>
<pre><code class="lang-bash">$ git config --global alias.lg <span class="hljs-string">"log --color --graph --pretty=format:'<span class="hljs-variable">%Cred</span><span class="hljs-variable">%h</span><span class="hljs-variable">%Creset</span> -<span class="hljs-variable">%C</span>(yellow)<span class="hljs-variable">%d</span><span class="hljs-variable">%Creset</span> <span class="hljs-variable">%s</span> <span class="hljs-variable">%Cgreen</span>(<span class="hljs-variable">%cr</span>) <span class="hljs-variable">%C</span>(bold blue)&lt;<span class="hljs-variable">%an</span>&gt;<span class="hljs-variable">%Creset</span>' --abbrev-commit"</span>
</code></pre>
<p>Au cas où vous ne seriez pas à l’aise avec ce genre de choses, sachez simplement que la commande
<code>git config --global alias.lg</code> permet d’inscrire à votre configuration générale un nouvel alias (
ici lg). Le reste est ce que doit faire cet alias, à savoir afficher un historique reformaté de votre
dépôt Git.</p>
<p>Allez, je vous met au défi d’oser taper un coup de <code>git lg</code> dans votre terminal
maintenant (dans un dépôt Git bien entendu banane). Pour l’exemple, je l’ai réalisé dans le dépôt
de Putain De Code:</p>
<figure>
  <img src="../../../images/posts/git/boutez-les-bugs-domptez-votre-historique/omagad-history.png" alt="capture historique">
  <figcaption>Le pouvoir de l’arc en ciel</figcaption>
</figure>

<p>Eh oui, sous vos yeux ébahis se dessine maintenant l’historique de votre dépôt!
Tout y est: créations de branches, commits, merges, les miaouOnes… Voilà, vous ne pourrez plus
dire que vous n’y comprenez rien, vous seriez un fieffé menteur.</p>
<h2 id="git-bisect-trouver-et-punir">git bisect, trouver et punir</h2>
<p>S’il y a bien quelque chose d’agaçant dans l’activité de développement, c’est que bien
souvent on est amené à travailler en équipe, et évidemment, il y en a toujours
un pour introduire des Putain De Bugs. Alors c’est parti on sort le débugger pour
l’autre ingrat, on place les <code>console.log</code> et autres <code>var_dump()</code> pour trouver d’où
peut bien venir ce fichu problème, et on se coule un café parce qu’entre nous, ça peut
prendre du temps.</p>
<p>Heureusement pour nous, là aussi Git est au rendez-vous avec sa fonctionnalité de <em>bisecting</em>. Je vous vois déjà en
train de baver devant votre écran, mais non, Git ne va pas corriger vos bugs bien évidemment, il va vous aider
à trouver le changement dans le code qui l’a fait apparaître et ceci grâce à la commande <code>git bisect</code>.</p>
<p>Pour lancer une <em>bisection</em> par Git il suffit d’entrer <code>git bisect start</code> dans votre terminal préféré
et le tour est joué!</p>
<pre><code class="lang-bash"><span class="hljs-variable">$ </span>git bisect start
$
</code></pre>
<figure>
    <figcaption> Capitaine, regardez il n’y a rien </figcaption>
</figure>

<p>Oui bon d’accord, il va falloir s’investir un peu plus pour parvenir à nos fins. Pour l’instant Git est
passé en mode <em>bisection</em>, maintenant il a besoin d’informations pour s’exécuter:</p>
<ul>
<li>Un commit où le bug est présent</li>
<li>Un commit où le bug est absent</li>
</ul>
<p>Imaginons que le commit sur lequel nous sommes comporte le bug, nous allons donc le signaler à Git avec
<code>git bisect bad</code>. Nous allons ensuite nous déplacer sur un commit plus ancien qui ne comporte pas le bug et
le signaler à son tour: <code>git bisect good</code>.</p>
<p>Git va alors se mettre en route et vous déplacer automatiquement de commit en commit. Pour chacun d’eux vous n’aurez
qu’à le déclarer bon ou mauvais comme expliqué au dessus, jusqu’à ce que Git vous fournisse le premier commit
comportant le bug, celui dont le changement a révélé le disfonctionnement.</p>
<pre><code class="lang-bash">$ git bisect bad
1082351d9157e98aed1bbee8b9ad6deedca1288f is the first bad <span class="hljs-operator"><span class="hljs-keyword">commit</span>
<span class="hljs-keyword">commit</span> <span class="hljs-number">1082351</span>d9157e98aed1bbee8b9ad6deedca1288f
Author: Maxime Thirouin &lt;m@***.io&gt;
<span class="hljs-keyword">Date</span>:   Fri Jan <span class="hljs-number">17</span> <span class="hljs-number">08</span>:<span class="hljs-number">19</span>:<span class="hljs-number">46</span> <span class="hljs-number">2014</span> +<span class="hljs-number">0100</span>

    ¯\_(ツ)_/¯ Fix shit bring <span class="hljs-keyword">in</span> <span class="hljs-number">34</span>a44c98048f2b74fc2dd20f0be807c1e23e8b58

:<span class="hljs-number">040000</span> <span class="hljs-number">040000</span> <span class="hljs-number">7</span>a5d5010f0aaa052ffdc0747b182dc6178a346db d3562872efd1b9d662a89825a3070d64f860cc34 M  src</span>
</code></pre>
<figure>
    <figcaption>1, 2, 3, Soleil!</figcaption>
</figure>

<p>Et voilà, le tour est joué, en plus Git vous a positionné sur ce commit, il ne manque plus qu’un petit coup de
<code>git show</code> et vous savez tout. Pour revenir à votre travail, un simple <code>git bisect reset</code> fera l’affaire!
Il ne vous reste plus qu’à punir la personne fautive, mais pour ça je vous laisse avec votre imagination,
je suis sûr que vous trouverez.</p>
<p>Pour les fanatiques de l’efficacité et de l’automatisation, sachez que Git en a encore dans le ventre. Si vous
connaissez déjà un bon et un mauvais commit, vous pouvez tout simplement lancer la <em>bissection</em> à grand coup de
<code>git bisect start MAUVAIS_COMMIT BON_COMMIT</code> et si, cerise sur le gâteau, vous êtes en possession d’une suite de tests
unitaires (oui non je sais faut pas déconner), <code>git bisect run &lt;votre_script&gt;</code> vous permettra de la lancer et la
recherche du premier commit défectueux se fera alors toute seule!</p>
<h2 id="git-rebase-du-pur-story-telling">git rebase, du pur story-telling</h2>
<p>Je ne sais pas s’il vous est déjà arrivé de naviguer dans les dépôts Git de projets libres, mais souvent on y trouve que très
peu de commits poubelles, ces commits avec comme message “step” ou autre “stuff”. Chaque commit correspond à une fonctionnalité,
un bug fix, une unité logique cohérente. Je ne sais pas pour vous, mais personnellement un <em>git log</em> ne ressemble pas à
ça chez moi!</p>
<pre><code>commit e739e7c0248b841b0250eb85d99a1b4ba149149d
<span class="hljs-label">Author:</span> Martin GOYOT (Erwyn/Martinus) &lt;martin@***<span class="hljs-preprocessor">.com</span>&gt;
<span class="hljs-label">Date:</span>   Tue Feb <span class="hljs-number">18</span> <span class="hljs-number">21</span>:<span class="hljs-number">39</span>:<span class="hljs-number">50</span> <span class="hljs-number">2014</span> +<span class="hljs-number">0100</span>

    Now my new functionality finally works

commit <span class="hljs-number">551</span>b243525d826afcfece3e2c4c471ebd1e91779
<span class="hljs-label">Author:</span> Martin GOYOT (Erwyn/Martinus) &lt;martin@***<span class="hljs-preprocessor">.com</span>&gt;
<span class="hljs-label">Date:</span>   Tue Feb <span class="hljs-number">18</span> <span class="hljs-number">21</span>:<span class="hljs-number">39</span>:<span class="hljs-number">23</span> <span class="hljs-number">2014</span> +<span class="hljs-number">0100</span>

    misc

commit <span class="hljs-number">9</span>db49a39fdb05a54adcfc2b46832818ef05b9c72
<span class="hljs-label">Author:</span> Martin GOYOT (Erwyn/Martinus) &lt;martin@***<span class="hljs-preprocessor">.com</span>&gt;
<span class="hljs-label">Date:</span>   Tue Feb <span class="hljs-number">18</span> <span class="hljs-number">21</span>:<span class="hljs-number">38</span>:<span class="hljs-number">43</span> <span class="hljs-number">2014</span> +<span class="hljs-number">0100</span>

    stuff

commit ca4ff952310d6246216e83f49309b32b2d2fa010
<span class="hljs-label">Author:</span> Martin GOYOT (Erwyn/Martinus) &lt;martin@***<span class="hljs-preprocessor">.com</span>&gt;
<span class="hljs-label">Date:</span>   Tue Feb <span class="hljs-number">18</span> <span class="hljs-number">21</span>:<span class="hljs-number">38</span>:<span class="hljs-number">35</span> <span class="hljs-number">2014</span> +<span class="hljs-number">0100</span>

    first commit
</code></pre><figure>
    <figcaption>best git log, ever</figcaption>
</figure>

<p>Bien que l’on essaye de nous faire croire que les logiciels libres sont codés par des rockstars, ce qui permet de justifier le
mythe du <em>1 commit = 1 fonctionnalité</em>, vous n’êtes pas dupes; l’historique Git de ces dépôts est bel et bien retravaillé, et ceci dans
le but de maintenir sa cohérence et de permettre à tous les contributeurs de le comprendre. Si cela s’applique particulièrement
dans le cadre des logiciels libres, il n’en est pas moins satisfaisant d’avoir également un historique clair sur ses propres dépôts.</p>
<p>Pour cela, l’arme de choix s’appelle <code>git rebase</code>. Cette fonctionnalité permet de réécrire l’historique de vos dépôts, de
réorganiser les commits, d’en supprimer, de changer leur message associé etc… La fonctionnalité est assez simple à utiliser, nous allons
prendre exemple sur l’historique présenté ci-dessus: je voudrais supprimer le commit dont le message est ‘stuff’ parce que finalement il
s’avère inutile. Je veux également fusionner le commit ‘misc’ avec le commit ‘Now my new functionality finally works’ et renommer ce dernier
pour qu’il soit plus explicite et fasse référence à ma User Story correspondante dans mon outil de tracking préféré.</p>
<p>Pour commencer, il faut dire jusqu’à quel commit on souhaite effectuer cette réécriture; pour cela, dans mon cas, deux solutions:</p>
<ul>
<li>Faire référence à partir de HEAD (l’étiquette courante), ici: HEAD~3 (je veux réécrire jusqu’au commit avant ‘stuff’)</li>
<li>Fournir le SHA1 du commit avant ‘stuff’ (ici 2645b1cdbdd72bea6c392c011320556997327761)</li>
</ul>
<p>Je vais utiliser la première méthode (le choix n’influe en rien sur la suite), et donc lancer la réécriture en invoquant la commande: <code>git rebase -i HEAD~3</code>
( -i voulant dire de lancer un <em>rebase</em> en mode intéractif). Voici ce qui m’est alors présenté:</p>
<pre><code>pick <span class="hljs-number">9</span>db49a3 stuff
pick <span class="hljs-number">551</span>b243 misc
pick e739e7c Now my <span class="hljs-keyword">new</span> functionality finally works

<span class="hljs-preprocessor"># Rebase ca4ff95..e739e7c onto ca4ff95</span>
<span class="hljs-preprocessor">#</span>
<span class="hljs-preprocessor"># Commands:</span>
<span class="hljs-preprocessor">#  p, pick = use commit</span>
<span class="hljs-preprocessor">#  r, reword = use commit, but edit the commit message</span>
<span class="hljs-preprocessor">#  e, edit = use commit, but stop for amending</span>
<span class="hljs-preprocessor">#  s, squash = use commit, but meld into previous commit</span>
<span class="hljs-preprocessor">#  f, fixup = like "squash", but discard this commit's log message</span>
<span class="hljs-preprocessor">#  x, exec = run command (the rest of the line) using shell</span>
<span class="hljs-preprocessor">#</span>
<span class="hljs-preprocessor"># These lines can be re-ordered; they are executed from top to bottom.</span>
<span class="hljs-preprocessor">#</span>
<span class="hljs-preprocessor"># If you remove a line here THAT COMMIT WILL BE LOST.</span>
<span class="hljs-preprocessor">#</span>
<span class="hljs-preprocessor"># However, if you remove everything, the rebase will be aborted.</span>
<span class="hljs-preprocessor">#</span>
<span class="hljs-preprocessor"># Note that empty commits are commented out</span>
</code></pre><p>Git m’affiche tous les commits concernés par l’opération (en ordre inverse), devant chacun d’eux, la mention <em>pick</em>, et une légende en bas.
<em>pick</em>, comme l’indique la légende, signifie que ce commit sera conservé, mais je peux remplacer cette mention par les suivantes:</p>
<ul>
<li>reword : modifier le message de commit.</li>
<li>edit : utiliser le commit mais me laisser le modifier avec un <code>git commit --amend</code> qui permet de commiter l’état courant de la copie de travail en
l’incorporant au commit précédent.</li>
<li>squash : utiliser le commit en le fusionnant avec le commit précédent.</li>
<li>fixup : utiliser le commit en le fusionnant avec le commit précédent et ne pas utiliser son message associé.</li>
<li>exec : exécuter une commande sur ce commit.</li>
</ul>
<p>En plus de ces différentes mentions, je peux également effectuer deux autres actions:</p>
<ul>
<li>déplacer un commit, ce qui aura pour effet final de le déplacer dans l’historique.</li>
<li>supprimer un commit, ce qui aura comme résultat de le faire disparaître de l’historique.</li>
</ul>
<p>Pour ma part, je vais:</p>
<ul>
<li>supprimer la première ligne parce que j’ai décidé que le commit ‘stuff’ ne me servait à rien.</li>
<li>mettre la mention reword devant le commit ‘misc’, car je vais fusionner le dernier commit avec celui-ci et mettre un nouveau message.</li>
<li>mettre la mention fixup devant le commit ‘Now my new functionality finally works’ car je vais le fusionner au précédent et abandonner son message.</li>
</ul>
<p>Ce qui nous donne le résultat suivant:</p>
<pre><code>reword <span class="hljs-number">551</span>b243 misc
fixup e739e7c Now my <span class="hljs-keyword">new</span> functionality finally works

<span class="hljs-preprocessor"># Rebase ca4ff95..e739e7c onto ca4ff95</span>
<span class="hljs-preprocessor">#</span>
<span class="hljs-preprocessor"># Commands:</span>
<span class="hljs-preprocessor">#  p, pick = use commit</span>
<span class="hljs-preprocessor">#  r, reword = use commit, but edit the commit message</span>
<span class="hljs-preprocessor">#  e, edit = use commit, but stop for amending</span>
<span class="hljs-preprocessor">#  s, squash = use commit, but meld into previous commit</span>
<span class="hljs-preprocessor">#  f, fixup = like "squash", but discard this commit's log message</span>
<span class="hljs-preprocessor">#  x, exec = run command (the rest of the line) using shell</span>
<span class="hljs-preprocessor">#</span>
<span class="hljs-preprocessor"># These lines can be re-ordered; they are executed from top to bottom.</span>
<span class="hljs-preprocessor">#</span>
<span class="hljs-preprocessor"># If you remove a line here THAT COMMIT WILL BE LOST.</span>
<span class="hljs-preprocessor">#</span>
<span class="hljs-preprocessor"># However, if you remove everything, the rebase will be aborted.</span>
<span class="hljs-preprocessor">#</span>
<span class="hljs-preprocessor"># Note that empty commits are commented out</span>
</code></pre><figure>
    <figcaption>Attention chérie, ça va trancher</figcaption>
</figure>

<p>Il n’y a plus qu’à sauvegarder et quitter (:x dans vim) pour que la machine se mette en route. Si certaines actions que vous avez effectuées, notamment
le déplacement de commits, provoquent des conflits, Git va vous demander de les résoudre au fur et à mesure; il suffit pour cela d’éditer vos fichiers, puis
de les marquer comme résolus au moyen de la commande <code>git add &lt;lefichier&gt;</code> avant de reprendre avec la commande <code>git rebase --continue</code>. Comme convenu,
Git vous demande d’éditer le message du commit marqué en <em>reword</em>:</p>
<pre><code>Story #<span class="hljs-number">34</span> - Poker cards now have a real back picture

<span class="hljs-preprocessor"># Please enter the commit message for your changes. Lines starting</span>
<span class="hljs-preprocessor"># with '#' will be ignored, and an empty message aborts the commit.</span>
<span class="hljs-preprocessor"># HEAD detached at ca4ff95</span>
<span class="hljs-preprocessor"># You are currently rebasing branch 'master' on 'ca4ff95'.</span>
<span class="hljs-preprocessor">#   (all conflicts fixed: run "git rebase --continue")</span>
<span class="hljs-preprocessor">#</span>
<span class="hljs-preprocessor"># Changes to be committed:</span>
<span class="hljs-preprocessor">#   (use "git reset HEAD &lt;file&gt;..." to unstage)</span>
<span class="hljs-preprocessor">#</span>
<span class="hljs-preprocessor"># modified:   README.txt</span>
<span class="hljs-preprocessor">#</span>
</code></pre><figure>
    <figcaption>Un commit qu’il est mieux pour le relire</figcaption>
</figure>

<p>L’opération va continuer puis Git va vous rendre la main. Il vous suffit alors de faire un <code>git log</code> pour apprécier le résultat:</p>
<pre><code>commit <span class="hljs-number">481</span>b4dccf4fedf4ed9d7f4e83ae5c19a07f7e12e
<span class="hljs-label">Author:</span> Martin GOYOT (Erwyn/Martinus) &lt;martin@***<span class="hljs-preprocessor">.com</span>&gt;
<span class="hljs-label">Date:</span>   Tue Feb <span class="hljs-number">18</span> <span class="hljs-number">21</span>:<span class="hljs-number">39</span>:<span class="hljs-number">23</span> <span class="hljs-number">2014</span> +<span class="hljs-number">0100</span>

    Story <span class="hljs-preprocessor">#34 - Poker cards now have a real back picture</span>
</code></pre><figure>
    <figcaption>Et c’est le succèèèèèèès</figcaption>
</figure>

<p>Vous n’avez plus qu’un seul commit tout beau tout propre! Vous pouvez maintenant le pousser sur votre dépôt et vous vanter d’avoir un bel historique, parce
que vous aussi, vous êtes une rockstar :).</p>
<p>Pour ceux qui désirent aller encore plus loin dans l’automatisation de ce processus de rebase, je vous conseille d’aller jeter un œil à l’utilisation
de l’option <a href="http://madx.me/articles/git_rebase_autosquash.html">—autosquash</a>.</p>
<h2 id="git-reflog-la-commande-de-celui-qui-a-fait-n-importe-quoi">git reflog, la commande de celui qui a fait n’importe quoi</h2>
<p>Voici venu le temps <del>des rires et des chants</del> de la denière commande que je souhaitais vous présenter, j’ai nommé <code>git reflog</code>. Cette commande
c’est votre <em>joker</em>, elle assure votre survie, notamment si vous avez été assez zinzins pour suivre les exemples donnés dans cet article, parce
que honnêtement…</p>
<figure>
    <img src="http://i1.kym-cdn.com/photos/images/newsfeed/000/305/224/3e1.jpg" alt="I have no idea what I&#39;m doing">
</figure>

<p>Vous ne le savez peut être pas, mais Git, dans sa grande bonté, garde une référence de toutes vos actions, de tous les endroits où vous vous êtes déplacez.
Ce registre, c’est le <em>references log</em>, et en plus on peut y accéder simplement grâce à la commande <code>git reflog</code> (sans déconner). Faisons un petit tour
dans le miens:</p>
<pre><code><span class="hljs-number">481</span>b4dc HEAD@{<span class="hljs-number">0</span>}: rebase -i (finish): <span class="hljs-keyword">returning</span> <span class="hljs-keyword">to</span> refs/heads/master
<span class="hljs-number">481</span>b4dc HEAD@{<span class="hljs-number">1</span>}: rebase -i (fixup): Story <span class="hljs-comment">#34 - Poker cards now have a real back picture</span>
<span class="hljs-number">8</span>fd5835 HEAD@{<span class="hljs-number">2</span>}: rebase -i (<span class="hljs-keyword">continue</span>): Story <span class="hljs-comment">#34 - Poker cards now have a real back picture</span>
ca4ff95 HEAD@{<span class="hljs-number">3</span>}: checkout: moving <span class="hljs-keyword">from</span> master <span class="hljs-keyword">to</span> ca4ff952310d6246216e83f49309b32b2d2fa010
e739e7c HEAD@{<span class="hljs-number">4</span>}: rebase -i (finish): <span class="hljs-keyword">returning</span> <span class="hljs-keyword">to</span> refs/heads/master
e739e7c HEAD@{<span class="hljs-number">5</span>}: checkout: moving <span class="hljs-keyword">from</span> master <span class="hljs-keyword">to</span> e739e7c
e739e7c HEAD@{<span class="hljs-number">6</span>}: rebase -i (finish): <span class="hljs-keyword">returning</span> <span class="hljs-keyword">to</span> refs/heads/master
e739e7c HEAD@{<span class="hljs-number">7</span>}: checkout: moving <span class="hljs-keyword">from</span> master <span class="hljs-keyword">to</span> e739e7c
e739e7c HEAD@{<span class="hljs-number">8</span>}: rebase -i (finish): <span class="hljs-keyword">returning</span> <span class="hljs-keyword">to</span> refs/heads/master
e739e7c HEAD@{<span class="hljs-number">9</span>}: checkout: moving <span class="hljs-keyword">from</span> master <span class="hljs-keyword">to</span> e739e7c
e739e7c HEAD@{<span class="hljs-number">10</span>}: rebase -i (finish): <span class="hljs-keyword">returning</span> <span class="hljs-keyword">to</span> refs/heads/master
e739e7c HEAD@{<span class="hljs-number">11</span>}: checkout: moving <span class="hljs-keyword">from</span> master <span class="hljs-keyword">to</span> e739e7c
e739e7c HEAD@{<span class="hljs-number">12</span>}: commit: Now <span class="hljs-keyword">my</span> new functionality finally works
<span class="hljs-number">551</span>b243 HEAD@{<span class="hljs-number">13</span>}: commit: misc
<span class="hljs-number">9</span>db49a3 HEAD@{<span class="hljs-number">14</span>}: commit (amend): stuff
af7fc36 HEAD@{<span class="hljs-number">15</span>}: commit: misc
ca4ff95 HEAD@{<span class="hljs-number">16</span>}: commit (initial): <span class="hljs-keyword">first</span> commit
</code></pre><figure>
    <figcaption>Il est beau mon reflog, il est frais</figcaption>
</figure>

<p>On voit ici l’ensemble de mes opérations apparaître comme le <em>rebase</em> effectué précédemment (bon d’accord il apparaît plusieurs fois parce que j’ai
fait quelques tests avant d’écrire cette partie de l’article). Chaque opération possède un SHA1 qui est en fait une référence vers le commit concerné, dans l’état
dans lequel il était au moment de l’opération. Bien, imaginons que j’ai fait n’importe quoi avec le rebase et que je veuille retrouver mon état précédent, et bien
il me suffira ici de faire un <code>git checkout e739e7c</code> (dans votre cas la ligne sera probablement plus simple à trouver). Et là si je refais un <code>git log</code>, miracle:</p>
<pre><code>commit e739e7c0248b841b0250eb85d99a1b4ba149149d
<span class="hljs-label">Author:</span> Martin GOYOT (Erwyn/Martinus) &lt;martin@***<span class="hljs-preprocessor">.com</span>&gt;
<span class="hljs-label">Date:</span>   Tue Feb <span class="hljs-number">18</span> <span class="hljs-number">21</span>:<span class="hljs-number">39</span>:<span class="hljs-number">50</span> <span class="hljs-number">2014</span> +<span class="hljs-number">0100</span>

    Now my new functionality finally works

commit <span class="hljs-number">551</span>b243525d826afcfece3e2c4c471ebd1e91779
<span class="hljs-label">Author:</span> Martin GOYOT (Erwyn/Martinus) &lt;martin@***<span class="hljs-preprocessor">.com</span>&gt;
<span class="hljs-label">Date:</span>   Tue Feb <span class="hljs-number">18</span> <span class="hljs-number">21</span>:<span class="hljs-number">39</span>:<span class="hljs-number">23</span> <span class="hljs-number">2014</span> +<span class="hljs-number">0100</span>

    misc

commit <span class="hljs-number">9</span>db49a39fdb05a54adcfc2b46832818ef05b9c72
<span class="hljs-label">Author:</span> Martin GOYOT (Erwyn/Martinus) &lt;martin@***<span class="hljs-preprocessor">.com</span>&gt;
<span class="hljs-label">Date:</span>   Tue Feb <span class="hljs-number">18</span> <span class="hljs-number">21</span>:<span class="hljs-number">38</span>:<span class="hljs-number">43</span> <span class="hljs-number">2014</span> +<span class="hljs-number">0100</span>

    stuff

commit ca4ff952310d6246216e83f49309b32b2d2fa010
<span class="hljs-label">Author:</span> Martin GOYOT (Erwyn/Martinus) &lt;martin@***<span class="hljs-preprocessor">.com</span>&gt;
<span class="hljs-label">Date:</span>   Tue Feb <span class="hljs-number">18</span> <span class="hljs-number">21</span>:<span class="hljs-number">38</span>:<span class="hljs-number">35</span> <span class="hljs-number">2014</span> +<span class="hljs-number">0100</span>

    first commit
</code></pre><p>Vous voilà retombés sur vos pieds! Vous n’avez plus qu’à reconnecter votre branche à ce commit si jamais vous en aviez une et vous êtes reparti pour de nouvelles
aventures.</p>
<p>Sachez tout de même que ce <em>references log</em> peut être effacé, et il est même conseillé de le faire régulièrement pour des problématiques de performance de Git sur
votre dépôt; conserver tous ces commits peut devenir coûteux à la longue. La commande <code>git gc</code> pour <em>garbage collector</em> s’occupera de faire le ménage
pour vous.</p>
<p>Voilà, on arrive au bout de notre aventure, j’espère que vous avez appris quelque chose et que Git vous fait maintenant moins peur.</p>
<p>Amike,</p>

]]></description><pubDate>Thu, 27 Feb 2014 00:00:00 GMT</pubDate><link>http://putaindecode.fr/posts/git/boutez-les-bugs-domptez-votre-historique/</link><guid isPermaLink="true">http://putaindecode.fr/posts/git/boutez-les-bugs-domptez-votre-historique/</guid></item><item><title>Twitter comme lecteur de flux</title><description><![CDATA[[
<p><em>(Note : dans cet article, j’ai volontairement pris comme exemple la version Web afin que tout le monde puisse profiter de l’expérience mais il est évident que vous puissiez le faire avec votre application twitter favorite).</em></p>
<p>Bien avant la fin de Google Reader, je me posais déjà la question de l’intérêt d’un lecteur de flux {rss|atom}. En effet, il m’était pénible d’organiser les flux que je souhaitais lire : les ranger par catégorie, supprimer les sites morts ou ceux qui ne m’intéressaient plus; de plus, je n’ai jamais réellement utilisé les fonctionnalités d’un lecteur de flux comme le système de marquage, savoir si le flux a été lu ou non, lire l’article dans le lecteur (je le lis toujours sur le site, jamais dans l’application). Et puis c’est parfois pénible de trouver un lecteur de flux simple, multi-OS et gratuit.</p>
<p>J’ai été un grand fan à l’époque de Netvibes puis je l’ai délaissé pour Google Reader et nous voilà quelques temps après, sans réelle solution à mon sens pour lire agréablement des flux tel que je le concois.</p>
<p>J’expérimente pourtant une solution depuis quelques mois qui me sied bien. J’utilise en effet Twitter en tant que lecteur de flux. Oui, car cela a plusieurs avantages :</p>
<ul>
<li><p>Il existe une application pour <a href="https://play.google.com/store/apps/details?id=com.twitter.android&amp;hl=fr">Android</a>, <a href="https://about.twitter.com/products/iphone">iOS</a> ainsi que <a href="https://itunes.apple.com/fr/app/twitter/id409789998?mt=12">Mac</a>; mais aussi la <a href="https://twitter.com/">version Web</a> et <a href="https://tweetdeck.twitter.com/">Tweetdeck</a> est disponible sur tous les environnements.</p>
</li>
<li><p>Je fais ma veille majoritairement via Twitter; j’écrème au fil de la journée ce qui m’intéresse ou non. Si c’est rapide à lire alors je le lis, sinon je <em>bookmark</em> l’article en “Read later” sur mon navigateur. Cela permet de trier rapidement l’information et de lire plus paisiblement cela au moment opportun.
De plus, étant donné que l’information est donnée par mes <em>following</em> et que je suis les personnes qui m’intéressent vraiment, l’information est alors souvent pertinente. Encore faut-il avoir la bonne TL.
Et  si j’ai besoin d’aller chercher une information précise, j’irai la trouver à travers un moteur de recherche… donc aucune problématique de “neutralité” de l’information.</p>
</li>
<li><p>De plus, étant donné que je fais justement cette veille via Twitter, cela me permet d’avoir qu’un seul outil. Cela m’ennuie au plus haut point de collectionner les outils. Je suis certes partisant d’utiliser le bon outil pour chaque tâche plutôt qu’un couteau-suisse, mais finalement Twitter et un lecteur de flux ne sont pas si éloignés.</p>
</li>
<li><p>Enfin, la majorité des blogs / sites que j’apprécie ont leur propre compte twitter qui postent l’url de leurs articles, il suffit alors de les suivre. Et si ce n’est pas le cas, je vous montrerai une petite astuce pour que ça le soit.</p>
</li>
</ul>
<p>Vous vous sentez chaud(e) pour commencer ? Très bien, c’est parti !</p>
<h2 id="cr-er-une-liste-twitter">Créer une liste Twitter</h2>
<p>Pour créer une liste, aucun problème, vous allez dans “Me” dans le <em>header</em> puis “List” dans la colonne de gauche pour vous retrouver ici :</p>
<p><img src="../../../images/posts/twitter/twitter-list.jpg" alt=""></p>
<p>Puis vous cliquez sur <code>Create list</code> et vous rentrez les informations que vous souhaitez :</p>
<p><img src="../../../images/posts/twitter/create-list.png" alt=""></p>
<p>Nous voilà avec notre belle liste. Il n’y a plus qu’à la remplir de jolis <em>following</em>.</p>
<p>Prenons par exemple <code>@nodenpm</code>, un beau <em>bot</em> tweetant les nouveaux packages node.js ou/et les updates de ces packages.</p>
<p><img src="../../../images/posts/twitter/nodenpm.jpg" alt=""></p>
<p>Ajoutons-le à notre liste.</p>
<p><img src="../../../images/posts/twitter/add-in-list.png" alt=""></p>
<p>Nous voilà maintenant avec notre liste comprenant un <em>following</em>. Ce qui en ayant ajouté quelques comptes donnera quelque chose comme ceci :</p>
<p><img src="../../../images/posts/twitter/twitter-list-read.jpg" alt=""></p>
<p>Vous pouvez maintenant apprécier votre lecteur de flux.</p>
<p>Oh mais ! C’est là que vous constatez qu’un de vos sites préférés n’a pas de compte Twitter ! Que faire ? Haha, et si on utilisait la puissance de IFTTT pour se créer un bot twitter qui tweet chaque nouvel article d’un des sites que vous appréciez ?! Mais ouais !</p>
<h2 id="ifttt-la-solution-pour-parfaire-notre-lecteur">IFTTT, la solution pour parfaire notre lecteur</h2>
<p>Mais avant tout, créons notre compte twitter “bot” qui va tweeter ce qu’on souhaite.</p>
<h3 id="compte-twitter-bot-">Compte twitter “bot”</h3>
<ul>
<li>Déconnectez-vous</li>
<li>Inscrivez-vous à nouveau sur Twitter (le mien s’appelle <a href="https://twitter.com/kud_feeds">@kud_feeds</a> par exemple)</li>
<li>Mettez-lui une belle bio, un bel avatar</li>
<li>Déconnectez-vous à nouveau</li>
<li>Connectez-vous avec votre vrai compte</li>
<li>Ajoutez votre “bot” à la liste que vous venez de créer précédemment</li>
</ul>
<p>… et voilà !</p>
<h3 id="ifttt">IFTTT</h3>
<p><img src="../../../images/posts/ifttt.png" alt=""></p>
<p>Maintenant, IFTTT.</p>
<blockquote>
<p>IFTTT (“If This Then That”) est un service qui permet aux utilisateurs de connecter différentes applications ensemble à travers de simples conditions nommées “recettes”.</p>
</blockquote>
<p>IFTTT va vous permettre d’aller pomper les flux {rss|atom} de vos sites préférés puis ayant accès à votre <em>bot</em> va permettre de tweeter le contenu des flux ! C’est pas beau ça hein ?! =)</p>
<ul>
<li>Allez sur <a href="https://ifttt.com">ifttt.com</a></li>
<li>Créez-vous un compte (je vous conseille de créer un compte spécialement pour le <em>bot</em> car IFTTT ne propose de relier qu’un seul compte twitter. Du coup, si comme moi vous appréciez IFTTT et que vous souhaitez autant utiliser IFTTT pour votre compte twitter principal que votre compte <em>bot</em>, je vous conseille de vous créer deux comptes IFTTT)</li>
<li>Créez une nouvelle recette en cliquant sur <code>Create</code></li>
<li>Cliquez sur <code>this</code></li>
<li>Puis <code>feed</code></li>
<li>Choissisez le <em>trigger</em> (“déclencheur”) que vous souhaitez, moi je prends plutôt le premier <code>New feed item</code> (le plus simple)</li>
<li>Indiquez l’url du flux de votre site, par exemple <code>http://dribbble.com/_kud/shots/following.rss</code></li>
<li>Puis <code>then</code></li>
<li>Twitter</li>
<li><code>Post a tweet</code></li>
<li>Laissez tel quel le <em>template</em> de base pour le moment (vous pourrez le changer quand vous serez à l’aise avec IFTTT)</li>
<li>Mettez la description qui va bien</li>
</ul>
<p>Et on est bon.</p>
<p>Vous avez maintenant une nouvelle recette qui dès qu’un article sortira, un tweet de votre <em>bot</em> apparaitra. Vous pouvez d’ailleurs vérifier que tout marche bien en cliquant sur la flèche <em>Check Recipe Now</em>.</p>
<p>Vous n’aurez plus qu’à créer une nouvelle recette en dupliquant cette recette à chaque fois que vous voudrez suivre un nouveau flux. Certes éventuellement plus contraignant qu’un vrai lecteur de flux mais vous y gagnerez largement par la suite ;)</p>
<p>Et voilà, nous avons maintenant une belle liste Twitter qui représentre votre lecteur de flux. Voici la mienne : <a href="https://twitter.com/_kud/lists/feeds">https://twitter.com/_kud/lists/feeds</a></p>
<p>Vous pouvez même pousser le vice en créant plusieurs listes par catégorie mais ça sous-entend aussi de créer des <em>bots</em> et donc des comptes IFTTT par catégorie. Heureusement que j’en ai qu’une. ;)</p>
<p>Enjoy!</p>

]]></description><pubDate>Wed, 26 Feb 2014 00:00:00 GMT</pubDate><link>http://putaindecode.fr/posts/hack/twitter-comme-lecteur-de-flux/</link><guid isPermaLink="true">http://putaindecode.fr/posts/hack/twitter-comme-lecteur-de-flux/</guid></item><item><title>Comment en finir avec les préfixes CSS</title><description><![CDATA[[
<p>En mettant de côté le débat trollesque <em>faut-il ou pas des préfixes CSS ?</em>
(car avouons-le, ils sont là, il faut faire avec), on ne va pas se le cacher,
les préfixes CSS ça nous brise tous les… touches du clavier.
Eh bien oui, sans automatisation on est obligé de se taper des caractères en plus.
Même avec un IDE correct, on peut faire ça rapidement, mais ça nécessite
presque à chaque fois une action de notre part.</p>
<h2 id="pr-fixer-via-des-outils-en-ligne">Préfixer via des outils en ligne</h2>
<p>Les élèves au fond de la classe me montreront de suite des solutions comme
<a href="http://prefixmycss.com/">prefixmycss.com</a> ou l’ancien prefixr.
Inopinément, un moche “Mourrez moi sile vou pler” sort de mon corps.
Non, sérieusement, ce n’est pas une façon de faire ça. Aller sur une web app à
chaque fois que je veux préfixer mes CSS ? Sérieusement ?
Vous avez qu’à aussi faire un service postal où j’envoie mes fichiers CSS dans
une clé USB et qu’on me renvoie sous 48h avec les préfixes ajoutés.
Super pratique.</p>
<h2 id="pr-fixer-via-javascript">Préfixer via JavaScript</h2>
<p>Une autre solution serait <a href="http://leaverou.github.io/prefixfree/">prefix-free</a>,
mais je ne vais même pas en parler tellement l’idée de dépendre de JavaScript pour
avoir un <code>border-radius</code> ou une <code>transition</code> CSS me donne une migraine.
Je vous passe les détails niveau performance. Selon les cas, on pourrait même avoir
un petit flash visuel sans les propriétés préfixées.
Non mais flûte. On ne fait pas ça. On n’alourdit pas une page web avec du JavaScript
pour parser la feuille de style et réintégrer des préfixes quoi. Au secours.</p>
<h2 id="pr-fixer-via-les-pr-processeurs-css">Préfixer via les pré-processeurs CSS</h2>
<p>Alors là, j’en entends déjà qui parle à voix haute au milieu de la classe :</p>
<blockquote>
<p>Bah lui c’est clair il’connait pas les pré-processeurs CSS le noube</p>
</blockquote>
<p>Sans rentrer dans un débat trollesque (encore un), à part peut-être avec <em>Stylus</em> et ces
mixins transparent (coucou <em><a href="http://visionmedia.github.io/nib/">Nib</a></em>),
on est obligé de rajouter du code.
Avec <em>Sass</em> il faudra (en scss) rajouter <code>@include</code> et un couple de parenthèse (et
au passage avoir <em>Compass</em> si on ne veut pas coder les mixins à la main).
Avec <em>Less</em> il faudra aussi une librairie <em>Less Hat</em> si on n’a pas envie de se taper
du mixin qui donne de la nausée comme on peut voir sur la
<a href="http://lesscss.org/">page d’accueil</a>.</p>
<h2 id="les-pr-fixes-c-est-comme-le-lait-a-tourne">Les préfixes, c’est comme le lait, ça tourne</h2>
<p>D’ailleurs, parlons en vite fait de cette page d’accueil qui au jour où j’écris
se post, comporte <b>en premier exemple</b> un mixin pour <code>box-shadow</code>
(hashtag ohlol).</p>
<p>Certaines propriétés comme <code>box-shadow</code>, ou encore <code>border-radius</code>, sont
aujourd’hui préfixées à tort, car comme on peut le voir sur le site de
<a href="http://caniuse.com/">CanIUse.com</a>, elles n’ont plus vraiment besoin d’être préfixées, à
moins que vous supportiez encore Firefox 3.6, Safari iOS 3 ou Android 2…
Je vous renvoie rapidement sur ce (vieil) article de Chris Coyier
<a href="http://css-tricks.com/do-we-need-box-shadow-prefixes/">Do we need box-shadow or border-radius prefixes anymore?</a>
en guise de mémo :)</p>
<p>Sans être de mauvaise foi, on va vite avouer qu’on ne peut pas forcément tout savoir.
Donc on ne peut pas être au top pour connaître quand il faut ou quand il n’y a plus
besoin de préfixer x ou y (oui bon x et y ne sont pas des propriétés CSS, c’est
pour l’exemple).
Qui sait qu’on peut enfin arrêter de préfixer box-sizing dans Firefox depuis la 29 ?
Ou la 30 je ne sais plus…</p>
<p>Bon mais alors comment faire ? J’entends les fayots du premier rang parler d’auto…
auto… AUTOPREFIXER ?!</p>
<p>MAIS C’EST POSSIBLE ÇA ?</p>
<p>Bon allons à l’essentiel, assez trollé.</p>
<h1 id="autoprefixer">Autoprefixer</h1>
<p>Ce magnifique outil, basé sur une solide base de données (au hasard, CanIUse.com),
permet de préfixer automatiquement vos CSS, et ce, de manière intelligente.
Vous pouvez en effet configurer autoprefixer, afin de lui préciser quel
navigateur vous voulez utiliser.
Vous pouvez au choix lui demander de supporter X versions en arrière, les versions
qui ont un usage global &gt; à Y% de trafic, ou encore une version minimale donnée.</p>
<p>Voici quelques exemples de configuration.</p>
<pre><code class="lang-js"><span class="hljs-comment">// Je supporte une version en arrière et les navigateurs qui ont plus de 1% de trafic ainsi qu'Internet Explorer 7</span>
<span class="hljs-function">autoprefixer(<span class="hljs-string">"last 1 version"</span>, <span class="hljs-string">"&gt; 1%"</span>, <span class="hljs-string">"Explorer 7"</span>)</span><span class="hljs-class">.process</span>(css)<span class="hljs-class">.css</span>;

<span class="hljs-comment">// Je supporte 2 versions en arrière, et minimum BlackBerry 10 et Android 4</span>
<span class="hljs-function">autoprefixer(<span class="hljs-string">"last 2 version"</span>, <span class="hljs-string">"BlackBerry 10"</span>, <span class="hljs-string">"Android 4"</span>)</span><span class="hljs-class">.process</span>(css)<span class="hljs-class">.css</span>;
</code></pre>
<p>Dans ces lignes de code JavaScript… Quoi attendez c’est en JavaScript ? Oh le
fourbe, il nous recale sa techno de front-end de mes deux.
Bon faites pas les relous, que vous soyez front-end ou back-end, vous avez Node.js hein ?</p>
<p>Donc aucune inquiétude, il existe une commande pour que vous puissiez faire ça rapidement :</p>
<pre><code class="lang-shell"><span class="hljs-preprocessor"># on install autoprefixer via npm en global</span>
npm install --global autoprefixer
<span class="hljs-preprocessor"># ou pour les fainéants</span>
npm i -g autoprefixer

<span class="hljs-preprocessor"># on prefixe !</span>
autoprefixer *.css
</code></pre>
<p>Là bon de suite, réflexe, vous me sautez dessus à la gorge en me criant:</p>
<blockquote>
<p>NON MAIS T’AS CRU QUE J’ALLAIS TAPER LA COMMANDE À CHAQUE FOIS TOCARD ?</p>
</blockquote>
<p>No problem, comme tout outil bien foutu, il y’a une multitudes de façon de
l’utiliser :</p>
<ul>
<li>via <a href="https://github.com/ai/autoprefixer#nodejs">Node.js</a> directement,</li>
<li>en plugin <a href="https://www.npmjs.org/package/gulp-autoprefixer">Gulp</a>,</li>
<li>en plugin <a href="https://github.com/ai/autoprefixer#grunt">Grunt</a>,</li>
<li>via <a href="https://github.com/ai/autoprefixer#compass">Compass</a>,</li>
<li>en plugin <a href="https://github.com/ai/autoprefixer#stylus">Stylus</a>,</li>
<li>avec <a href="https://github.com/ai/autoprefixer#ruby-on-rails">RoR</a> ou <a href="https://github.com/ai/autoprefixer#ruby">Ruby</a>,</li>
<li>avec l’application <a href="https://github.com/ai/autoprefixer#prepros">Prepros</a></li>
<li>via <a href="https://github.com/ai/autoprefixer#mincer">Mincer</a></li>
<li>via <a href="https://github.com/ai/autoprefixer#middleman">Middleman</a></li>
<li>avec <a href="https://github.com/ai/autoprefixer#php">PHP</a> (vous avez bien lu),</li>
</ul>
<p>Bien entendu, parfois, lorsqu’on fait un petit bout de CSS standalone,
vous avez aussi à dispo des plugins pour
<a href="https://github.com/sindresorhus/sublime-autoprefixer">Sublime Text</a>
 ou <a href="https://github.com/mikaeljorhult/brackets-autoprefixer">Brackets</a>
 afin de ne pas forcément avoir à utiliser les app ou process cités juste avant.</p>
<figure>
  <img src="../../../images/posts/sublime-text/autoprefixer.gif" alt="sublime text autoprefixer preview">
  <figcaption>Intégration dans Sublime Text</figcaption>
</figure>

<p>Cet outil est maintenant basé sur <a href="https://github.com/ai/postcss">PostCSS</a>,
un post-processeur CSS. Vous pouvez donc l’utiliser en plugin pour ce post-procésseur.</p>
<p>Attends attends, un WAT ? Un <strong>POST</strong>-processeur ? Oui tu as bien lu car les
pré-processeurs c’est so 2000.
Mais ça, je vous en parle la prochaine fois ;)</p>
<p>Tout plein de -moz-bisous.</p>
<hr />

<p>PS: Convaincu par cette solution ? Tant mieux, elle est simple à mettre en place.
Tout ça est décrit dans la <a href="/posts/css/mise-en-place-autoprefixer/">mise en place d’autoprefixer</a>
avec des exemples concrets pour ajouter ça dans un workflow existant.</p>

]]></description><pubDate>Tue, 25 Feb 2014 00:00:00 GMT</pubDate><link>http://putaindecode.fr/posts/css/comment-en-finir-avec-les-prefixes/</link><guid isPermaLink="true">http://putaindecode.fr/posts/css/comment-en-finir-avec-les-prefixes/</guid></item><item><title>Sublime Text en tant qu'éditeur Markdown</title><description><![CDATA[[
<p>La vie de développeur n’est jamais facile. Tu souhaites faire quelque chose de précis et tu te retrouves à faire totalement autre chose, <em>patchant</em> ci ou tu as découvert ça.</p>
<p>Typiquement, j’étais tranquillement en train d’écrire un article pour <strong>p!</strong> qui n’avait rien à voir avec celui actuel, et je me retrouve à personnaliser mon Sublime Text pour Markdown car ne souhaitant plus utiliser autre chose que celui-ci pour l’écriture.</p>
<p>Il y a certes le très bon <a href="http://mouapp.com/">Mou.app</a> (<code>$ brew cask install mou</code>) sur Mac OS X mais comme indiqué, il n’est que pour Mac, or il m’arrive parfois d’être sur Windows.
De plus, les éditeurs en ligne comme <a href="https://stackedit.io/">stackedit.io</a> ou <a href="http://dillinger.io/">dillinger.io</a> sont pratiques mais comme j’ai tendance à stocker mes brouillons sur <a href="https://db.tt/nTkiSUb">dropbox</a>, ces outils vous demandent l’accès de toute votre dropbox, chose que je n’aime pas spécialement.</p>
<p>Bref, tout ça pour dire que tout centraliser sur Sublime Text et utiliser dropbox pour écrire des articles me semble une pratique plutôt agréable.</p>
<p>Pour cela, quittez totalement vos éditeurs Markdown et installez les plugins Sublime Text qui vont bien.</p>
<h2 id="markdownediting">MarkdownEditing</h2>
<p>Premièrement, <a href="http://ttscoff.github.io/MarkdownEditing/">MarkdownEditing</a>, ce petit plugin est votre parfait compagnon qui vous permettra d’avoir la bonne coloration syntaxique de votre Markdown. Il vous permettra de mettre en évidence les liens, le code, et tout le reste. Du bonheur donc.</p>
<p><img src="../../../images/posts/preview-markdownediting.png" alt=""></p>
<p>Oui alors, j’ai fait quelques configurations car à la base, ca ressemble plutôt à ça :</p>
<p><img src="../../../images/posts/preview-markdownediting-light.png" alt=""></p>
<p>Si vous souhaitez modifier Sublime Text mais uniquement pour le format Markdown, faites : <code>Preferences &gt; Browse Packages...</code> puis aller dans <code>User</code> et créez un fichier <code>Markdown.sublime-settings</code>. Celui-ci sera lu et appliqué à chaque fois que vous éditerez un fichier Markdown.</p>
<p>Voici ce que j’ai pour le moment :</p>
<pre><code>{
  "<span class="hljs-attribute">color_scheme</span>": <span class="hljs-value"><span class="hljs-string">"Packages/MarkdownEditing/MarkdownEditor-Dark.tmTheme"</span></span>,
  "<span class="hljs-attribute">enable_table_editor</span>": <span class="hljs-value"><span class="hljs-literal">true</span></span>,
  "<span class="hljs-attribute">table_editor_syntax</span>": <span class="hljs-value"><span class="hljs-string">"Auto"</span></span>,
  "<span class="hljs-attribute">tab_size</span>": <span class="hljs-value"><span class="hljs-number">2</span></span>,
  "<span class="hljs-attribute">extensions</span>":
  <span class="hljs-value">[
    <span class="hljs-string">"mdown"</span>,
    <span class="hljs-string">"txt"</span>,
    <span class="hljs-string">"md"</span>
  ]
</span>}
</code></pre><p>Le thème <code>dark</code> pour pas se niquer les yeux (coucou <a href="https://twitter.com/bloodyowl">@bloodyowl</a>), j’active aussi d’autres plugins dont je vais vous parler d’ici peu, j’affecte le spacing à <code>2</code>, et je déclare que j’utiliserai l’éditeur Markdown pour ce genre de fichiers : <code>.mdown</code>, <code>.txt</code>, <code>.md</code>.</p>
<p>Bien, passons à la suite.</p>
<h2 id="markdown-preview">Markdown Preview</h2>
<p>Notre cher <a href="https://twitter.com/revolunet">@revolunet</a> a fait un excellent plugin Markdown pour Sublime Text: <a href="https://github.com/revolunet/sublimetext-markdown-preview">Sublime Text Markdown Preview</a>. Celui-ci permet d’avoir un rendu de votre Markdown en <code>.html</code>. Vous pouvez soit compiler votre Markdown pour créer un fichier HTML, soit l’ouvrir directement dans votre navigateur.</p>
<p>Différents formats disponibles :</p>
<ul>
<li>Python Markdown</li>
<li>Github Flavored Markdown</li>
</ul>
<p>Un autre parfait compagnon en somme, qui quant à lui s’occupera de digérer l’excellent article que vous êtes en train d’écrire.</p>
<p>Je vous parlerai éventuellement un jour de <a href="http://johnmacfarlane.net/pandoc/">pandoc</a> qui permet de faire ce genre de choses mais en un peu plus complet et générique (Sublime Text n’est pas nécessaire) mais c’est un poil plus complexe. Jettez-y un œil tout de même.</p>
<h2 id="smartmarkdown">SmartMarkdown</h2>
<p><a href="https://github.com/demon386/SmartMarkdown">Petit plugin</a> intéressant qui vous permettra de cacher des parties de votre texte en le repliant. Par exemple, vous vous mettez devant un titre du style <code>##</code> et vous appuyez sur <code>tab</code>, cela repliera votre texte. Plutôt pratique pour se focaliser.</p>
<p><img src="../../../images/posts/preview-smartmarkdown.png" alt=""></p>
<h2 id="sublimetableeditor">SublimeTableEditor</h2>
<p>Précédemment dans ma configuration Markdown, vous avez pu voir ceci :</p>
<pre><code>  <span class="hljs-string">"enable_table_editor"</span>: <span class="hljs-literal">true</span>,
  <span class="hljs-string">"table_editor_syntax"</span>: <span class="hljs-string">"Auto"</span>,
</code></pre><p>Cela permet de configurer <a href="https://github.com/vkocubinsky/SublimeTableEditor">SublimeTableEditor</a> qui vous permettra de correctement aligner vos tableaux dans Markdown.</p>
<p>Et voilà. Avec tout ceci, vous êtes paré(e) à écrire votre Markdown dans de bonnes conditions. Plus qu’à mettre du Jazz et vous préparer une tasse de thé et c’est parti.</p>
<h2 id="bonus-markdown-extended">Bonus : Markdown Extended</h2>
<p>Il est possible que vous n’aimiez pas forcément MarkdownEditing, et dans ce cas je vous propose un autre plugin pas inintéressant non plus s’appelant <a href="https://github.com/jonschlinkert/sublime-markdown-extended">Markdown Extended</a>. Il vous permettra d’avoir la bonne coloration syntaxique lorsque vous écrivez du code dans votre éditeur.</p>
<h4 id="avant">Avant</h4>
<p><img src="../../../images/posts/preview-markdownextended-before.png" alt=""></p>
<h4 id="apr-s">Après</h4>
<p><img src="../../../images/posts/preview-markdownextended-after.png" alt=""></p>
<p>Oh et j’oubliais, voici quelques documentations sur Markdown histoire de bien l’utiliser :</p>
<ul>
<li><a href="http://daringfireball.net/projects/markdown/syntax">Documentation officielle</a></li>
<li><a href="https://github.com/adam-p/markdown-here/wiki/Markdown-Cheatsheet">Markdown Cheatsheet</a></li>
<li><a href="http://warpedvisions.org/projects/markdown-cheat-sheet.md">Another Markdown Cheatsheet</a></li>
</ul>

]]></description><pubDate>Thu, 20 Feb 2014 00:00:00 GMT</pubDate><link>http://putaindecode.fr/posts/sublime-text/sublime-text-et-markdown/</link><guid isPermaLink="true">http://putaindecode.fr/posts/sublime-text/sublime-text-et-markdown/</guid></item><item><title>La puissance de dnsmasq</title><description><![CDATA[[
<p>Dernièrement, j’ai voulu accéder avec mon Smartphone à ma machine virtuelle (<em>VM</em>) de développement qui se trouve sur mon poste de travail (<em>machine ou poste hôte</em>). Ma machine virtuelle me permet de reproduire à l’identique la production afin d’avoir le moins de marge d’erreur possible entre la phase de développement et la phase de mise en production.</p>
<p>A ce moment là, j’accédais à ma machine virtuelle à partir de mon poste via le fichier <em>hosts</em> comprenant ceci :</p>
<pre><code><span class="hljs-number">192.168</span><span class="hljs-number">.1</span><span class="hljs-number">.145</span> monsite<span class="hljs-preprocessor">.dev</span>
</code></pre><p>Le problème est que seul mon poste est au courant de la résolution du nom de domaine de par cette méthode.</p>
<p>Étant donné qu’il est laborieux de changer des <em>hosts</em> sur un appareil comme un téléphone et que je n’ai pas non plus envie de dupliquer cette modification sur chaque appareil, il me fallait trouver une solution généralisée.</p>
<p>C’est là que <strong><a href="http://fr.wikipedia.org/wiki/Dnsmasq">dnsmasq</a></strong> entre en jeu.</p>
<blockquote>
<p>Dnsmasq est un serveur léger pour fournir les services DNS, DHCP, Bootstrap Protocol et TFTP pour un petit réseau, voire pour un poste de travail. Il permet d’offrir un service de nommage des machines du réseau interne non intégrées au service de nommage global (i.e. le service DNS d’Internet). Le service de nommage est associé au service d’adressage de telle manière que les machines dont le bail DHCP est fourni par Dnsmasq peuvent avoir automatiquement un nom DNS sur le réseau interne. Le logiciel offre un service DHCP statique ou dynamique.</p>
</blockquote>
<h2 id="dnsmasq-le-serveur-dns-tout-petit">dnsmasq, le serveur dns tout petit</h2>
<p><strong>dnsmasq</strong> va me permettre de faire plusieurs choses :</p>
<ul>
<li>accélérer la résolution dns</li>
<li>ne pas polluer le réseau interne de la boite avec des résolutions de domaines propre à votre poste (imaginez que vous soyez plusieurs à avoir <em>monsite.dev</em> (ce qui est le cas dans notre boite)); une résolution se ferait uniquement vers un seul poste donc impossible de faire sans si vous êtes plusieurs</li>
<li>ne pas dupliquer sur chacun appareil la résolution dns</li>
<li>réussir à résoudre un nom de domaine sur un appareil où le fichier <em>hosts</em> est difficile voire impossible d’accès</li>
</ul>
<p>Cependant, tout n’est pas si rose, je vais vous montrer pourquoi après.</p>
<h3 id="partage-de-connexion">Partage de connexion</h3>
<p>Je vous propose dans un premier temps de partager votre connexion via le Wifi sous Mac OS X afin :</p>
<ul>
<li>d’avoir constamment un débit stable et performant; étant donné que vous êtes souvent devant votre poste pour tester sur différents appareils, en partageant votre connexion via Wifi, vous vous assurez d’avoir un excellent débit, chose qui n’est pas toujours évidente quand le wifi de votre boite est un peu / souvent trop loin</li>
<li>d’utiliser le serveur dns (dnsmasq) que vous allez monter</li>
</ul>
<p>Pour cela, il suffit de faire : <code>System Preferences &gt; Sharing &gt; Internet Sharing</code> puis choisir <code>Ethernet</code> en source, et <code>Wifi</code> en sortie. (Je vous conseille d’ailleurs de protéger votre Wifi avec une clé WPA2).</p>
<figure><img src="../../../images/posts/macosx-network-sharing.png" alt=""></figure>

<p><em>Ici, c’est USB Ethernet en source car je suis sur un Mac Book Air donc aucun port ethernet natif mais choisissez Ethernet si possible.</em></p>
<p>Une fois que le partage de connexion via Wifi est activé, vous pouvez vous y connecter avec votre smartphone (ou tablette).</p>
<p>Cela crée alors un nouveau réseau privé entre votre machine hôte et votre téléphone avec des adresses comme <code>192.168.2.x</code>. La machine hôte aura sûrement l’adresse <code>192.168.2.1</code> et votre téléphone très probablement <code>192.168.2.2</code>.</p>
<p>C’est alors un autre réseau que le réseau interne à la boite en <code>192.168.1.x</code>.</p>
<p>Notez aussi que la machine hôte, faisant bridge, donne les informations en cascade aux appareils connectés. Ce que vous spécifiez comme serveurs dns sur la machine hôte sera alors ceux utilisés par les appareils étant connectés à votre partage de réseau.</p>
<h3 id="aaaah-dnsmasq-">Aaaah dnsmasq !</h3>
<p>On est sous Mac OS X, la vie est si simple, on installe <strong>dnsmasq</strong> via <strong>homebrew</strong>.</p>
<h4 id="dnsmasq-via-homebrew">dnsmasq via homebrew</h4>
<pre><code><span class="hljs-variable">$ </span>brew install dnsmasq
</code></pre><h4 id="configuration-de-dnsmasq">configuration de dnsmasq</h4>
<p>Une fois installé, on copie la configuration :</p>
<pre><code>$ <span class="hljs-keyword">cp</span> /usr/local/opt/dnsmasq/dnsmasq<span class="hljs-preprocessor">.conf</span><span class="hljs-preprocessor">.example</span> /usr/local/etc/dnsmasq<span class="hljs-preprocessor">.conf</span>
</code></pre><p>puis on édite le comme ceci :</p>
<pre><code><span class="hljs-preprocessor"># Add domains which you want to force to an IP address here.</span>
<span class="hljs-preprocessor"># The example below send any host in double-click.net to a local</span>
<span class="hljs-preprocessor"># web-server.</span>
<span class="hljs-preprocessor">#address=/double-click.net/127.0.0.1</span>
address=/monsite.dev/<span class="hljs-number">192.168</span><span class="hljs-number">.1</span><span class="hljs-number">.145</span>

<span class="hljs-preprocessor"># If you want dnsmasq to listen for DHCP and DNS requests only on</span>
<span class="hljs-preprocessor"># specified interfaces (and the loopback) give the name of the</span>
<span class="hljs-preprocessor"># interface (eg eth0) here.</span>
<span class="hljs-preprocessor"># Repeat the line for more than one interface.</span>
<span class="hljs-preprocessor">#interface=</span>
<span class="hljs-preprocessor"># Or you can specify which interface _not_ to listen on</span>
<span class="hljs-preprocessor">#except-interface=</span>
<span class="hljs-preprocessor"># Or which to listen on by address (remember to include 127.0.0.1 if</span>
<span class="hljs-preprocessor"># you use this.)</span>
listen-address=<span class="hljs-number">0.0</span><span class="hljs-number">.0</span><span class="hljs-number">.0</span>
<span class="hljs-preprocessor"># If you don't want dnsmasq to read /etc/hosts, uncomment the</span>
<span class="hljs-preprocessor"># following line.</span>
no-hosts
</code></pre><p>Nous précisons dans un premier temps la résolution du nom de domaine <code>monsite.dev</code> (notez que c’est du wildcard, donc pas besoin de préciser les sous-domaines), puis nous indiquons que le serveur DNS marche sur toutes les IPs de la machine hôte et enfin nous indiquons que nous ne voulons pas prendre en compte le fichier <code>/etc/hosts</code> vu qu’on spécifie les résolutions via <code>address</code>.</p>
<p>Cela permettra à terme de ne plus gérer le fichier <code>/etc/hosts</code> et de tout spécifier dans <code>dnsmasq.conf</code>.</p>
<h4 id="lancer-dnsmasq-au-d-marrage-de-la-machine">lancer dnsmasq au démarrage de la machine</h4>
<p>On copie le fichier de démon dans le dossier qui va bien puis on lance le démon.</p>
<pre><code>$ <span class="hljs-built_in">sudo</span> cp -fv /usr/local/opt/dnsmasq/*.plist /Library/LaunchDaemons
$ <span class="hljs-built_in">sudo</span> launchctl load /Library/LaunchDaemons/homebrew.mxcl.dnsmasq.plist
</code></pre><h4 id="utiliser-le-serveur-dnsmasq">utiliser le serveur dnsmasq</h4>
<p>Etant donné que vous partagez votre connexion et que votre poste fait hôte, le serveur dns utilisé sera celui installé sur votre poste, donc rien à faire.</p>
<p>Sinon :</p>
<ul>
<li><p>vous pouvez changer le serveur dns de la machine hôte dans <code>network</code> et dans ce cas, que ce soit sur vos appareils connectés au wifi ou votre machine principale, vous utiliserez <strong>dnsmasq</strong> mais je vous le déconseile car j’ai constaté que j’atteignais trop facilement le nombre de connexions maximum.</p>
</li>
<li><p>vous pouvez aussi modifier le serveur dns de l’appareil connecté au wifi partagé :</p>
</li>
</ul>
<p><em>(Sous Android)</em></p>
<p><code>Wifi &gt; Press on the current connnection &gt; Modify network &gt; Show advanced options</code></p>
<figure><img src="../../../images/posts/android-network-advanced.jpg" alt=""></figure>

<p>Mais quel intérêt car vous devrez faire cela sur tous vos appareils connectés</p>
<ul>
<li>vous pouvez aussi éditer le fichier <code>/etc/bootpd.plist</code> qui définit toute votre configuration de partage de connexion :</li>
</ul>
<pre><code>$ <span class="hljs-built_in">sudo</span> <span class="hljs-variable">$EDITOR</span> /etc/bootpd.plist
</code></pre><pre><code class="lang-xml"><span class="hljs-pi">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span>
<span class="hljs-doctype">&lt;!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd"&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-title">plist</span> <span class="hljs-attribute">version</span>=<span class="hljs-value">"1.0"</span>&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-title">dict</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-title">key</span>&gt;</span>Subnets<span class="hljs-tag">&lt;/<span class="hljs-title">key</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-title">array</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-title">dict</span>&gt;</span>
      <span class="hljs-tag">&lt;<span class="hljs-title">key</span>&gt;</span>_creator<span class="hljs-tag">&lt;/<span class="hljs-title">key</span>&gt;</span>
      <span class="hljs-tag">&lt;<span class="hljs-title">string</span>&gt;</span>com.apple.InternetSharing<span class="hljs-tag">&lt;/<span class="hljs-title">string</span>&gt;</span>
      <span class="hljs-tag">&lt;<span class="hljs-title">key</span>&gt;</span>allocate<span class="hljs-tag">&lt;/<span class="hljs-title">key</span>&gt;</span>
      <span class="hljs-tag">&lt;<span class="hljs-title">true</span>/&gt;</span>
      <span class="hljs-tag">&lt;<span class="hljs-title">key</span>&gt;</span>dhcp_domain_name_server<span class="hljs-tag">&lt;/<span class="hljs-title">key</span>&gt;</span>
      <span class="hljs-tag">&lt;<span class="hljs-title">array</span>&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-title">string</span>&gt;</span>192.168.2.1<span class="hljs-tag">&lt;/<span class="hljs-title">string</span>&gt;</span>
      <span class="hljs-tag">&lt;/<span class="hljs-title">array</span>&gt;</span>
      <span class="hljs-tag">&lt;<span class="hljs-title">key</span>&gt;</span>dhcp_router<span class="hljs-tag">&lt;/<span class="hljs-title">key</span>&gt;</span>
      <span class="hljs-tag">&lt;<span class="hljs-title">string</span>&gt;</span>192.168.2.1<span class="hljs-tag">&lt;/<span class="hljs-title">string</span>&gt;</span>
      <span class="hljs-tag">&lt;<span class="hljs-title">key</span>&gt;</span>lease_max<span class="hljs-tag">&lt;/<span class="hljs-title">key</span>&gt;</span>
      <span class="hljs-tag">&lt;<span class="hljs-title">integer</span>&gt;</span>86400<span class="hljs-tag">&lt;/<span class="hljs-title">integer</span>&gt;</span>
      <span class="hljs-tag">&lt;<span class="hljs-title">key</span>&gt;</span>lease_min<span class="hljs-tag">&lt;/<span class="hljs-title">key</span>&gt;</span>
      <span class="hljs-tag">&lt;<span class="hljs-title">integer</span>&gt;</span>86400<span class="hljs-tag">&lt;/<span class="hljs-title">integer</span>&gt;</span>
      <span class="hljs-tag">&lt;<span class="hljs-title">key</span>&gt;</span>name<span class="hljs-tag">&lt;/<span class="hljs-title">key</span>&gt;</span>
      <span class="hljs-tag">&lt;<span class="hljs-title">string</span>&gt;</span>192.168.2/24<span class="hljs-tag">&lt;/<span class="hljs-title">string</span>&gt;</span>
      <span class="hljs-tag">&lt;<span class="hljs-title">key</span>&gt;</span>net_address<span class="hljs-tag">&lt;/<span class="hljs-title">key</span>&gt;</span>
      <span class="hljs-tag">&lt;<span class="hljs-title">string</span>&gt;</span>192.168.2.0<span class="hljs-tag">&lt;/<span class="hljs-title">string</span>&gt;</span>
      <span class="hljs-tag">&lt;<span class="hljs-title">key</span>&gt;</span>net_mask<span class="hljs-tag">&lt;/<span class="hljs-title">key</span>&gt;</span>
      <span class="hljs-tag">&lt;<span class="hljs-title">string</span>&gt;</span>255.255.255.0<span class="hljs-tag">&lt;/<span class="hljs-title">string</span>&gt;</span>
      <span class="hljs-tag">&lt;<span class="hljs-title">key</span>&gt;</span>net_range<span class="hljs-tag">&lt;/<span class="hljs-title">key</span>&gt;</span>
      <span class="hljs-tag">&lt;<span class="hljs-title">array</span>&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-title">string</span>&gt;</span>192.168.2.2<span class="hljs-tag">&lt;/<span class="hljs-title">string</span>&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-title">string</span>&gt;</span>192.168.2.254<span class="hljs-tag">&lt;/<span class="hljs-title">string</span>&gt;</span>
      <span class="hljs-tag">&lt;/<span class="hljs-title">array</span>&gt;</span>
    <span class="hljs-tag">&lt;/<span class="hljs-title">dict</span>&gt;</span>
  <span class="hljs-tag">&lt;/<span class="hljs-title">array</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-title">key</span>&gt;</span>bootp_enabled<span class="hljs-tag">&lt;/<span class="hljs-title">key</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-title">false</span>/&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-title">key</span>&gt;</span>detect_other_dhcp_server<span class="hljs-tag">&lt;/<span class="hljs-title">key</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-title">true</span>/&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-title">key</span>&gt;</span>dhcp_enabled<span class="hljs-tag">&lt;/<span class="hljs-title">key</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-title">array</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-title">string</span>&gt;</span>bridge100<span class="hljs-tag">&lt;/<span class="hljs-title">string</span>&gt;</span>
  <span class="hljs-tag">&lt;/<span class="hljs-title">array</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-title">key</span>&gt;</span>use_server_config_for_dhcp_options<span class="hljs-tag">&lt;/<span class="hljs-title">key</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-title">false</span>/&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-title">dict</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-title">plist</span>&gt;</span>
</code></pre>
<p><code>192.168.2.1</code> est l’adresse de votre machine hôte dans le réseau de partage.</p>
<h2 id="oh-oui-j-oubliais-mac-os-x-peut-tre-lourd-parfois">Oh oui, j’oubliais, Mac OS X peut être lourd parfois</h2>
<p>Oui, quand vous créez un partage de connexion sur Mac OS X, il lance son propre serveur dns s’appelant <strong>_mdnsresponder</strong>. C’est le système <em>Bonjour</em> de iOS/Mac OS X permettant à n’importe quel appareil Apple de communiquer entre eux. Le problème c’est qu’il risque de marcher sur les pieds de <strong>dnsmasq</strong>.</p>
<p>Faites donc un <code>$ sudo lsof -i :53</code> et vous pourrez éventuellement voir que <strong>_mdnsresponder</strong> est lancé aussi bien en ipv6 qu’en ipv4 sur le port 53. Cela vous empêchera de lancer <strong>dnsmasq</strong>.</p>
<p>Ce que je vous propose dans ces cas là, c’est de couper votre partage de connexion, puis notez le pid de <strong>_mdnsresponder</strong> via <code>$ sudo lsof -i :53</code>, de le <code>sudo kill :pid</code>, de lancer <code>$ sudo dnsmasq</code> puis de relancer le partage de connexion. Comme ça <strong>_mdnsresponser</strong> ne prendra plus la place de <strong>dnsmasq</strong>.</p>
<p>Autre point, évitez, mais vraiment, de nommer vos noms de domaines personnels en <code>.local</code>. En effet, ceux-ci sont plutôt réservés à l’environnement Mac OS X. Ils sont d’ailleurs en rapport avec <strong>_mdnsresponder</strong>. Les <code>.local</code> permettent à n’importe quel produit Apple sur le réseau de se connecter à d’autres postes Apple via <code>nom-de-l-appareil.local</code>. Votre connexion pourrait alors s’emméler entre le serveur dns de <strong>Bonjour</strong> et votre propre serveur dns.</p>
<p>Happy coding !</p>

]]></description><pubDate>Thu, 20 Feb 2014 00:00:00 GMT</pubDate><link>http://putaindecode.fr/posts/env/la-puissance-de-dnsmasq/</link><guid isPermaLink="true">http://putaindecode.fr/posts/env/la-puissance-de-dnsmasq/</guid></item><item><title>BROWSERIFY ALL THE THINGS</title><description><![CDATA[[
<p>Alors que je prends goût à me passer de frameworks (principalement à cause des
courbes d’apprentissage et des éventuelles lourdeurs et/ou restrictions que cela
impose, mais c’est une autre histoire),
je cherchais la meilleure façon d’écrire des micro composants réutilisables.</p>
<p>Pour le JavaScript, j’ai commencé il y a bien longtemps par des extensions/plugins
<a href="http://prototypejs.org/">Prototype</a>, puis peu de temps après, du plugins
<a href="http://plugins.jquery.com/">jQuery</a> à la pelle.
Souvent à tord puisque j’utilisais peut être 1% de la librairie en dépendance -
exemple avec mon <a href="https://github.com/MoOx/jQuery.Loading-Indicator/">indicateur de chargement avec sémaphore</a>
ou encore mon <a href="https://github.com/MoOx/jQuery.External-Links/">plugin qui ouvre les liens externes avec du target blank automatique</a>.</p>
<p><b>Je ne ferais plus jamais ça pour la simple raison du ratio “poids / % d’utilisation” de la dépendance.</b></p>
<p>Alors oui, utiliser jQuery a peut-être du bon. Mais s’en passer aussi.
<a href="/posts/js/de-jquery-a-vanillajs/">C’est faisable pour pleins de petites choses</a>.
<a href="/posts/js/comment-se-passer-de-libraries-frameworks-javascript/">Et c’est pas forcément difficile</a>.</p>
<p>Car si je veux utiliser mon petit script qui ajoute des targets blank automatiquement,
 devoir inclure jQuery pour si peu, ça fait mal à mes kilobites.</p>
<p>En attendant <a href="http://wiki.ecmascript.org/doku.php?id=harmony:modules">
la gestion de modules via ES6</a>, il nous faut gérer aujourd’hui nos composants
et dépendances à la main.
Encore qu’on pourrait faire un transpiler pour utiliser cette syntaxe (ça existe
déjà, il n’y a qu’à voir sur GitHub), mais là on ne ferait que créer une nouvelle
définition de module.</p>
<p>Côté back-end, on a déjà ce qu’il faut en JavaScript avec la gestion
<a href="http://nodejs.org/api/modules.html">des modules en Node</a>.
Un simple <code>require(&#39;module&#39;)</code> va tenter de récupérer un module avec ce nom.
Un module n’est rien d’autre qu’un fichier JavaScript. Node va essayer de loader
un <code>.js</code>, puis <code>.json</code> et enfin <code>.node</code> si besoin), qui lui même peut
éventuellement charger d’autres dépendances (les dépendances sont gérées localement)
tout en prenant en compte les packages NPM.
Même si <a href="http://nodejs.org/">Node</a> n’implémente pas totalement
<a href="http://wiki.commonjs.org/wiki/CommonJS">CommonJS</a>, un projet de développement d’une API pour
écrire des programmes en JavaScript ailleurs que dans le navigateur,
la façon de faire est assez proche.</p>
<figure><img src="../../../images/posts/browserify.png" alt=""></figure>

<p>L’idée de <a href="http://browserify.org/">Browserify</a> est d’amener cette façon de faire
dans le navigateur.</p>
<p>À côté de ça, vous me direz qu’on a déjà <a href="http://requirejs.org/">RequireJS</a>
pour un résultat similaire.</p>
<p>RequireJS implémente l’API AMD  (Asynchronous Module Definition),
différent de l’API CommonJS.
Cette API, dérivée de CommonJS, se veut adaptée au navigateur. Son principal atout
étant le chargement des modules de manière asynchrone.
En théorie, c’est super.</p>
<p>Sauf que dans la pratique (du moins quelque chose de simple et classique,
disons pour l’exemple du petit JavaScript pour améliorer une page web, ou encore
une simple <em>single page webapp</em> (SPA)) ce n’est pas forcément pertinent.</p>
<p>En effet charger des modules de manières asynchrones n’est forcément pas optimisé
lorsqu’il s’agit de faire des pages qui se chargent rapidement.
Il suffit de penser aux problématiques de débits selon la vitesse de la connexion
au réseau (Edge, faible 3G…) et donc nombre de requêtes HTTP qui peuvent nous
faire souffrir de gros ralentissement pour se rendre compte que cela peut poser
problème.</p>
<p>En plus de cela, je trouve personnellement dégueulasse  la façon de déclarer les
modules AMD, mais ça ce n’est qu’un détail.</p>
<p>Comparons les différentes méthodes comme on nous les montre sur le site de
<a href="http://requirejs.org/docs/whyamd.html">RequireJS</a> :</p>
<p>Le web aujourd’hui:</p>
<pre><code class="lang-js">(<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">()</span> {</span>
    <span class="hljs-keyword">var</span> $ = <span class="hljs-keyword">this</span>.jQuery;

    <span class="hljs-keyword">this</span>.myExample = <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">()</span> {</span>};
}());
</code></pre>
<p>AMD:</p>
<pre><code class="lang-js">define([<span class="hljs-string">'jquery'</span>] , <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">($)</span> {</span>
    <span class="hljs-keyword">return</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">()</span> {</span>};
});
</code></pre>
<p>CommonJS:</p>
<pre><code class="lang-js"><span class="hljs-keyword">var</span> $ = <span class="hljs-built_in">require</span>(<span class="hljs-string">'jquery'</span>);
exports.myExample = <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">()</span> {</span>};
</code></pre>
<p>AMD et CommonJS utilisent tout les deux une identification par chaîne de caractères.
Il faut bien que ces chaînes soient déclarées quelque part.</p>
<p>Côté RequireJS (AMD), on doit éventuellement mapper toutes ces chaînes à la main,
dans le fichier configuration.
De plus la déclaration des dépendances se faisant dans l’entête du module, ça peut
devenir lourd :</p>
<pre><code class="lang-js">define([ <span class="hljs-string">"require"</span>, <span class="hljs-string">"jquery"</span>, <span class="hljs-string">"blade/object"</span>, <span class="hljs-string">"blade/fn"</span>, <span class="hljs-string">"rdapi"</span>,
         <span class="hljs-string">"oauth"</span>, <span class="hljs-string">"blade/jig"</span>, <span class="hljs-string">"blade/url"</span>, <span class="hljs-string">"dispatch"</span>, <span class="hljs-string">"accounts"</span>,
         <span class="hljs-string">"storage"</span>, <span class="hljs-string">"services"</span>, <span class="hljs-string">"widgets/AccountPanel"</span>, <span class="hljs-string">"widgets/TabButton"</span>,
         <span class="hljs-string">"widgets/AddAccount"</span>, <span class="hljs-string">"less"</span>, <span class="hljs-string">"osTheme"</span>, <span class="hljs-string">"jquery-ui-1.8.7.min"</span>,
         <span class="hljs-string">"jquery.textOverflow"</span>],
<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">(require,   $,        object,         fn,         rdapi,
          oauth,   jig,         url,         dispatch,   accounts,
          storage,   services,   AccountPanel,           TabButton,
          AddAccount,           less,   osTheme)</span> {</span>
  <span class="hljs-comment">// ici le corps de la fonction</span>
});
</code></pre>
<p>Bon vous me direz que si un module a autant de dépendances, il y a peut être un
problème en amont et vous n’aurez pas tort.</p>
<p>Côté Browserify (CommonJS like), les dépendances externes proviennent (à la base)
de NPM.
On a donc rien à mapper nul part. Puis pour avoir un module local, il suffit de
faire un <code>require(&#39;./mon/module&#39;)</code>, et Browserify se chargera de régler la
dépendance (et je vous montre encore mieux après).</p>
<p>RequireJS propose un “optimizer”, qui au final ne fait que supprimer son point fort:
le côté asynchrone du téléchargement des modules.
Du coup on se retrouve avec tout RequireJS dans la source ET toutes les dépendances avec le mapping.
Il y a bien une façon de vraiment optimiser par bundle quand on cherche un peu
dans la doc, mais
<a href="http://requirejs.org/docs/optimization.html#wholemultipage">ça n’est pas vraiment mis en avant</a>.
Il existe aussi <a href="https://github.com/jrburke/almond">Almond.js</a> qui se veut être
plus léger, mais du coup, utiliser RequireJS pour optimiser avec Almond, je ne
trouve pas ça cohérent.</p>
<p>Si jusque là, Browserify vous intéresse (plus car les autres solutions ne vous
intéressent pas), attaquons le corps du sujet.</p>
<h2>Installation de Browserify</h2>

<p>Si vous souhaitez accéder à la commande via le terminal, la chose la plus simple
à faire est d’installer le paquet en global.</p>
<pre><code class="lang-bash"><span class="hljs-variable">$ </span>npm install -g browserify
</code></pre>
<p>Si vous ne l’installez pas en global (sans l’option <code>-g</code>, vous aurez la commande
accessible dans <code>./node_modules/.bin/browserify</code>).
Mais selon votre workflow, vous pouvez l’utiliser via une tâche
<a href="https://www.npmjs.org/package/grunt-browserify">grunt-browserify</a>
ou <a href="https://www.npmjs.org/package/gulp-browserify">gulp-browserify</a>.</p>
<h2>Utilisation de Browserify</h2>

<p>Partons d’un simple fichier <code>main.js</code>:</p>
<pre><code class="lang-js"><span class="hljs-function">alert(<span class="hljs-string">'Hello world !'</span>)</span>;
</code></pre>
<p>Sans aucune dépendance, ça n’a que peu de sens, mais c’est plus pour montrer un
dernier point intéressant.</p>
<p>Je le compile avec la commande suivante:</p>
<pre><code class="lang-bash">$ browserify main<span class="hljs-preprocessor">.js</span> -o bundle<span class="hljs-preprocessor">.js</span>
</code></pre>
<p>J’obtiens le fichier suivant.</p>
<pre><code class="lang-js">(function e(t,n,r){function s(o,u){if(!n[<span class="hljs-link_label">o</span>]){if(!t[<span class="hljs-link_label">o</span>]){var a=typeof require=="function"&amp;&amp;require;if(!u&amp;&amp;a)return a(o,!0);if(i)return i(o,!0);throw new Error("Cannot find module '"+o+"'")}var f=n[<span class="hljs-link_label">o</span>]={exports:{}};t[<span class="hljs-link_label">o</span>][<span class="hljs-link_reference">0</span>].call(f.exports,function(e){var n=t[<span class="hljs-link_label">o</span>][<span class="hljs-link_reference">1</span>][<span class="hljs-link_label">e</span>];return s(n?n:e)},f,f.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&amp;&amp;require;for(var o=0;o<span class="xml"><span class="hljs-tag">&lt;<span class="hljs-title">r.length;o++)s(r[o]);return</span> <span class="hljs-attribute">s</span>})({<span class="hljs-attribute">1:</span>[<span class="hljs-attribute">function</span>(<span class="hljs-attribute">require</span>,<span class="hljs-attribute">module</span>,<span class="hljs-attribute">exports</span>){
<span class="hljs-attribute">alert</span>('<span class="hljs-attribute">Hello</span> <span class="hljs-attribute">world</span> !');


},{}]},{},[<span class="hljs-attribute">1</span>])</span></span>
</code></pre>
<p>On reconnaît notre ligne en plein milieu. Avec un ajout conséquent. Ça peut paraître
beaucoup, mais c’est rien comparé à la
<a href="http://requirejs.org/docs/release/2.1.10/minified/require.js">source de RequireJS</a></p>
<p>Bon du coup partons avec un exemple peut être plus représentatif qu’on peut voir
sur la homepage de Browserify.</p>
<pre><code class="lang-js"><span class="hljs-reserved">var</span> foo = <span class="hljs-built_in">require</span>(<span class="hljs-string">'./foo'</span>);
<span class="hljs-reserved">var</span> gamma = <span class="hljs-built_in">require</span>(<span class="hljs-string">'gamma'</span>);

<span class="hljs-reserved">var</span> n = gamma(foo(<span class="hljs-number">5</span>) * <span class="hljs-number">3</span>);
<span class="hljs-reserved">var</span> txt = <span class="hljs-built_in">document</span>.createTextNode(n);
<span class="hljs-built_in">document</span>.body.appendChild(txt);
</code></pre>
<p>Ici on aura en plus <code>foo.js</code></p>
<pre><code class="lang-js"><span class="hljs-built_in">module</span>.exports = <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">(n)</span></span> { <span class="hljs-keyword">return</span> n * <span class="hljs-number">11</span> }
</code></pre>
<p>Et le module <code>gamma</code> qu’on a installé depuis NPM</p>
<pre><code class="lang-bash">$ npm <span class="hljs-built_in">i</span> <span class="hljs-built_in">gamma</span>
</code></pre>
<p><small><i><code>i</code> est l’alias de <code>install</code>.</i></small></p>
<p>Avec la même commande que précédement (et donc le même ajout), Browserify va parser
l’arbre syntaxique abstrait (AST) des appels à <code>require()</code> et va créer un graph
des dépendances du projet.<br>Un fois ceci fait, il va simplement ajuster les chemins et déclarer les fonctions
mappées dans un object par leur identifiant. Lorsqu’une fonction appelle <code>require</code>,
le petit bout de script ajouté va se charger de retourner la dépendance.</p>
<p>Notez qu’on peut aussi simplement utiliser une redirection de sortie de commande
pour gérer le fichier final:</p>
<pre><code class="lang-bash">$ browserify main<span class="hljs-preprocessor">.js</span> &gt; bundle<span class="hljs-preprocessor">.js</span>
</code></pre>
<p>Du coup on a plus qu’à utiliser une simple balise <code>&lt;script&gt;</code> pour incorporer ça
dans nos pages web.</p>
<pre><code class="lang-html"><span class="hljs-tag">&lt;<span class="hljs-title">script</span> <span class="hljs-attribute">src</span>=<span class="hljs-value">"bundle.js"</span>&gt;</span><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-title">script</span>&gt;</span>
</code></pre>
<h2>Les transformations avec Browserify</h2>

<p>Tant qu’à utiliser un outil, autant l’exploiter jusqu’au bout. Car pour l’instant
je n’ai parlé que de NPM.
Que faire si mon module n’est pas sur NPM ?
Bon déjà je double check, car maintenant la plupart des librairies y sont
(jQuery, Backbone et Jean passe).
Si ce n’est pas le cas, je pourrais toujours faire <code>npm i https//adresse.git</code>
mais si le paquet n’a pas de <code>package.json</code> avec le <code>main</code> bien rempli, ça ne va
pas forcément être le mieux.</p>
<p>Cela dit, si mon paquet est prévu pour Bower par exemple, il existe une <i>transformation</i>
prévue pour aider Browserify à résoudre les références aux paquets pour les
consommer depuis Bower: <code>debowerify</code>.
Dans le même esprit, on va retrouver de nombreuses transformations telles que :</p>
<ul>
<li><code>decomponentify</code>: pour consommer des <a href="https://github.com/component/component">component</a>s,</li>
<li><code>deamdify</code>:  pour consommer des modules AMD,</li>
<li><code>deglobalify</code>: pour consommer des modules qui utilisent des variables globales,</li>
<li><code>jadeify</code>: pour consommer des fichiers de templates jade,</li>
<li><code>hbsify</code>: pour consommer des fichiers de templates handlebars,</li>
<li><code>es6ify</code>: pour écrire du JavaScript ES6 (compilé en ES5),</li>
<li><code>uglifyify</code>: appliquer uglify.</li>
</ul>
<p>Il existe plein <a href="https://www.npmjs.org/browse/keyword/browserify">d’autres transformations</a>
qui s’adapteront sûrement à vos besoins.</p>
<p>Du coup la ligne ultime pour consommer a peu près n’importe quel module :</p>
<pre><code class="lang-bash">browserify <span class="hljs-attribute">-t</span> debowerify <span class="hljs-attribute">-t</span> decomponentify <span class="hljs-attribute">-t</span> deamdify <span class="hljs-attribute">-t</span> deglobalify <span class="hljs-attribute">-t</span> es6ify main<span class="hljs-built_in">.</span>js <span class="hljs-subst">&gt;</span> bundle<span class="hljs-built_in">.</span>js
</code></pre>
<p>L’équivalent avec les tâches Grunt ou Gulp sera tout aussi simple via un tableau.
Pensez bien à installer ces dépendances avant:</p>
<pre><code class="lang-bash"><span class="hljs-comment">npm</span> <span class="hljs-comment">install</span> <span class="hljs-comment">debowerify</span> <span class="hljs-comment">decomponentify</span> <span class="hljs-comment">deamdify</span> <span class="hljs-comment">deglobalify</span> <span class="hljs-comment">es6ify</span> <span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-comment">save</span>
</code></pre>
<h2>Ecrire un module pour Browserify (mais pas que)</h2>

<p>Consommer c’est bien, mais faire c’est <del>mieux</del> bien aussi.</p>
<figure><img src="../../../images/posts/browserify-potter.png" alt=""></figure>

<p>Tout droit sorti de <a href="https://github.com/umdjs/umd">UMD</a> (Universal Module Definition),
voici un wrapper qui vous permettra de créer votre module compatible avec CommonJS,
AMD et pour les projets old school !</p>
<pre><code class="lang-js"><span class="hljs-list">(<span class="hljs-title">function</span> <span class="hljs-list">(<span class="hljs-title">root</span>, factory)</span> <span class="hljs-collection">{
  if <span class="hljs-list">(<span class="hljs-title">typeof</span> exports === 'object')</span> <span class="hljs-collection">{
    // CommonJS
    module.exports = factory<span class="hljs-list">(<span class="hljs-title">require</span><span class="hljs-list">(<span class="hljs-title">'b'</span>)</span>)</span><span class="hljs-comment">;</span>
  }</span> else if <span class="hljs-list">(<span class="hljs-title">typeof</span> define === 'function' &amp;&amp; define.amd)</span> <span class="hljs-collection">{
    // AMD
    define<span class="hljs-list">(<span class="hljs-collection">['b']</span>, function <span class="hljs-list">(<span class="hljs-title">b</span>)</span> <span class="hljs-collection">{
      return <span class="hljs-list">(<span class="hljs-title">root.returnExportsGlobal</span> = factory<span class="hljs-list">(<span class="hljs-title">b</span>)</span>)</span><span class="hljs-comment">;</span>
    }</span>)</span><span class="hljs-comment">;</span>
  }</span> else <span class="hljs-collection">{
    // Global Variables
    root.returnExportsGlobal = factory<span class="hljs-list">(<span class="hljs-title">root.b</span>)</span><span class="hljs-comment">;</span>
  }</span>
}</span><span class="hljs-list">(<span class="hljs-title">this</span>, function <span class="hljs-list">(<span class="hljs-title">b</span>)</span> <span class="hljs-collection">{

  // Ici votre module <span class="hljs-list">(<span class="hljs-title">fonction</span>, objet, whatever...)</span>
  return <span class="hljs-collection">{}</span><span class="hljs-comment">;</span>
}</span>)</span>)</span><span class="hljs-comment">;</span>
</code></pre>
<p>Il existe bien sur <a href="https://github.com/umdjs/umd#variations">plusieurs façons de faire</a>
selon vos critères. À vous de choisir.</p>
<p>Maintenant vous aller pouvoir consommer et écrire des modules facilement, et
sans vous prendre la tête.</p>
<p>Bisous.</p>

]]></description><pubDate>Wed, 15 Jan 2014 00:00:00 GMT</pubDate><link>http://putaindecode.fr/posts/js/browserify-all-the-things/</link><guid isPermaLink="true">http://putaindecode.fr/posts/js/browserify-all-the-things/</guid></item><item><title>Responsive webdesign et structure du DOM</title><description><![CDATA[[
<p>Bien, commençons par le commencement, si tu veux bien. Le <strong>responsive
webdesign</strong>, ça te dit quelque chose ? Oui ? Bon. Dans ce cas, tu as peut-être
comme moi déjà été confronté à un cas de figure plutôt ennuyeux. Que tu sois
adepte du <em>mobile-first</em> ou irréductible dégradateur progressiste, il est
forcément arrivé un moment où tu t’es dit cette chose toute bête :</p>
<blockquote>
<p>Ce serait quand même pas mal si cet élément était ici plutôt que là. Sauf que
non.</p>
</blockquote>
<p>Le cas typique est celui d’un menu un minimum complexe, dont on réordonnerait
volontiers les éléments un chouïa au dessus ou en deçà d’une certaine taille
d’écran. Et là, il faut bien avouer qu’il n’existe pas vraiment de solution
miracle.</p>
<p>J’entends déjà les plus teigneux vociférer qu’avec une meilleure réflexion en
amont, le <em>markup</em> aurait été mieux conçu et on n’en serait pas là. Bien qu’un
peu facile, cette réponse peut s’avérer vraie dans un certain nombre de cas
(admire la phrase du mec qui ne se mouille pas). Mais quoi qu’il en soit, si tu
en es au stade de ce type de questionnement, c’est qu’il est de toute façon trop
tard pour faire machine arrière.</p>
<p>Au train où va l’innovation dans notre branche, surtout pour tout ce qui touche
au mobile en général et à la conception web en particulier, il n’est pas exclu
que les bouts de ficelle que je vais t’exposer ici soient obsolètes dans six
mois, et que cet article fasse un comeback incroyable sur Twitter, les RT
moquant gentiment les techniques précolombiennes auxquelles nous étions réduits
il n’y a encore pas si longtemps. Va savoir, je pourrais bien faire l’objet
d’une célébrité paradoxalement décadente à la Rick Astley. En attendant, il
s’agit des seules solutions que je connais pour ce type de cas. Si tu as mieux à
proposer, je te recommande chaudement de l’ouvrir dans les commentaires pour
qu’on en bénéficie tous. C’est bon, on y va ? Je t’attends, moi !</p>
<h2 id="-l-ancienne-do-repeat-yourself">À l’ancienne : Do Repeat Yourself</h2>
<p>Imagine une page de blog, où apparaissent consécutivement le titre de l’article,
la photo l’illustrant, et enfin le texte. Comme une photo, selon la qualité de
ta connexion, ça peut être un peu galère à charger sur mobile (et que la
question des images en responsive design
<a href="http://css-tricks.com/responsive-images-hard/">est encore un sacré bordel</a>), tu
prends la décision de passer la photo en dessous du contenu textuel pour que tes
visiteurs puissent lire leur article peinards même si la photo n’a pas fini de
charger - et tu vas même en profiter pour la remplacer par une version plus
light.</p>
<p>Dans un tel cas, la meilleure solution peut encore être de dupliquer ta balise
<code>img</code>, et de masquer l’une ou l’autre avec CSS en fonction de la taille d’écran,
grâce à une <code>media query</code>. Voilà un exemple rudimentaire :</p>
<pre><code class="lang-html"><span class="hljs-tag">&lt;<span class="hljs-title">article</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-title">h1</span>&gt;</span>Mon super article<span class="hljs-tag">&lt;/<span class="hljs-title">h1</span>&gt;</span>

  <span class="hljs-tag">&lt;<span class="hljs-title">img</span> <span class="hljs-attribute">src</span>=<span class="hljs-value">"/mon/image/desktop.jpg"</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"img-desktop"</span> /&gt;</span>

  <span class="hljs-tag">&lt;<span class="hljs-title">p</span>&gt;</span>Lâche tes comm' !<span class="hljs-tag">&lt;/<span class="hljs-title">p</span>&gt;</span>

  <span class="hljs-tag">&lt;<span class="hljs-title">img</span> <span class="hljs-attribute">src</span>=<span class="hljs-value">"/mon/image/mobile.jpg"</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"img-mobile"</span> /&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-title">article</span>&gt;</span>
</code></pre>
<pre><code class="lang-css"><span class="hljs-class">.img-desktop</span> <span class="hljs-rules">{
  <span class="hljs-comment">/* Par défaut, l'image desktop est cachée */</span>
  <span class="hljs-rule"><span class="hljs-attribute">display</span>:<span class="hljs-value"> none</span></span>;
<span class="hljs-rule">}</span></span>

<span class="hljs-at_rule">@<span class="hljs-keyword">media</span> screen and (min-width: <span class="hljs-number">768</span>px) </span>{
  <span class="hljs-comment">/* Si on est sur "grand" écran, on affiche l'image desktop... */</span>
  <span class="hljs-class">.img-desktop</span> <span class="hljs-rules">{
    <span class="hljs-rule"><span class="hljs-attribute">display</span>:<span class="hljs-value"> block</span></span>;
  <span class="hljs-rule">}</span></span>

  <span class="hljs-comment">/* ...et on masque l'image mobile */</span>
  <span class="hljs-class">.img-mobile</span> <span class="hljs-rules">{
    <span class="hljs-rule"><span class="hljs-attribute">display</span>:<span class="hljs-value"> none</span></span>;
  <span class="hljs-rule">}</span></span>
}
</code></pre>
<p>Évidemment, le gros inconvénient de ce type de solution est que qui dit
duplication de contenu dit augmentation du poids total. Dans le cas d’un contenu
purement textuel, selon sa taille, cela peut être négligeable. J’ai ici
volontairement pris l’exemple le moins adapté : une image, qu’il ne faut
absolument pas faire charger deux fois à nos visiteurs. On va tricher un peu
avec JavaScript :</p>
<pre><code class="lang-html"><span class="hljs-tag">&lt;<span class="hljs-title">article</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-title">h1</span>&gt;</span>Mon super article<span class="hljs-tag">&lt;/<span class="hljs-title">h1</span>&gt;</span>

  <span class="hljs-comment">&lt;!-- Ces images ne seront pas chargées car elles n'ont pas d'attribut src --&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-title">img</span> <span class="hljs-attribute">data-src</span>=<span class="hljs-value">"/mon/image/desktop.jpg"</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"img-desktop"</span> /&gt;</span>

  <span class="hljs-tag">&lt;<span class="hljs-title">p</span>&gt;</span>Lâche tes comm' !<span class="hljs-tag">&lt;/<span class="hljs-title">p</span>&gt;</span>

  <span class="hljs-tag">&lt;<span class="hljs-title">img</span> <span class="hljs-attribute">data-src</span>=<span class="hljs-value">"/mon/image/mobile.jpg"</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"img-mobile"</span> /&gt;</span>

  <span class="hljs-tag">&lt;<span class="hljs-title">noscript</span>&gt;</span>
    <span class="hljs-comment">&lt;!-- Cette image ne sera chargée que si le visiteur n'a pas activé le JS --&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-title">img</span> <span class="hljs-attribute">src</span>=<span class="hljs-value">"/mon/image/mobile.jpg"</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"img-mobile img-noscript"</span> /&gt;</span>
  <span class="hljs-tag">&lt;/<span class="hljs-title">noscript</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-title">article</span>&gt;</span>
</code></pre>
<pre><code class="lang-css"><span class="hljs-class">.img-desktop</span> <span class="hljs-rules">{
  <span class="hljs-rule"><span class="hljs-attribute">display</span>:<span class="hljs-value"> none</span></span>;
<span class="hljs-rule">}</span></span>

<span class="hljs-at_rule">@<span class="hljs-keyword">media</span> screen and (min-width: <span class="hljs-number">768</span>px) </span>{
  <span class="hljs-class">.img-desktop</span> <span class="hljs-rules">{
    <span class="hljs-rule"><span class="hljs-attribute">display</span>:<span class="hljs-value"> block</span></span>;
  <span class="hljs-rule">}</span></span>

  <span class="hljs-class">.img-mobile</span> <span class="hljs-rules">{
    <span class="hljs-rule"><span class="hljs-attribute">display</span>:<span class="hljs-value"> none</span></span>;
  <span class="hljs-rule">}</span></span>
}

<span class="hljs-class">.img-noscript</span> <span class="hljs-rules">{
  <span class="hljs-comment">/* On surcharge le style desktop pour s'assurer
     que cette image s'affiche quelle que soit la taille de l'écran */</span>

  <span class="hljs-rule"><span class="hljs-attribute">display</span>:<span class="hljs-value"> block</span></span>;
<span class="hljs-rule">}</span></span>
</code></pre>
<pre><code class="lang-javascript"><span class="hljs-keyword">var</span> handleImages = <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">()</span> {</span>
  <span class="hljs-comment">// On charge les images ayant l'attribut data-src,</span>
  <span class="hljs-comment">// non encore chargées (attribut src indéfini)</span>
  <span class="hljs-comment">// et non masquées par CSS</span>

  [].<span class="hljs-keyword">forEach</span>.call(document.querySelectorAll(<span class="hljs-string">'img[data-src]:not([src])'</span>), <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">(el)</span> {</span>
    <span class="hljs-keyword">if</span> (window.getComputedStyle(el).display != <span class="hljs-string">'none'</span>) {
      el.src = el.getAttribute(<span class="hljs-string">'data-src'</span>);
    }
  });
};

window.addEventListener(<span class="hljs-string">'load'</span>, handleImages);
window.addEventListener(<span class="hljs-string">'resize'</span>, handleImages);
</code></pre>
<p>Ainsi, seules les images nécessaires seront chargées avec la page. J’applique
également le même traitement au <code>resize</code> ; c’est un peu bourrin, je te
l’accorde, on pourrait probablement faire plus fin avec <code>matchMedia</code>.</p>
<p>Dans le cas d’un visiteur naviguant sans JavaScript, seule l’image mobile est
chargée : je pars du principe qu’étant donné qu’on ne peut pas définir laquelle
des deux versions de l’image est la mieux adaptée pour lui, autant lui envoyer
la plus légère.</p>
<h2 id="js-powa-enquire-js">JS powa : enquire.js</h2>
<p>La seconde solution peut tout à fait être réalisée “à la main”, mais je vais te
parler d’une petite librairie que j’aime beaucoup et que j’ai déjà utilisée dans
ce genre de cas. Elle se nomme <a href="http://wicky.nillia.ms/enquire.js/">enquire.js</a>
et permet tout simplement d’affecter des callbacks à des media queries :</p>
<pre><code class="lang-javascript">enquire.register(<span class="hljs-string">'screen and (min-width: 768px)'</span>, {
  match: <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">()</span> {</span>
    <span class="hljs-comment">// L'écran fait 768px de large ou plus...</span>
  },

  unmatch: <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">()</span> {</span>
    <span class="hljs-comment">// ...et ici, 767px de large ou moins.</span>
    <span class="hljs-comment">// La librairie repose sur matchMedia et matchMedia.addListener</span>
  }
});
</code></pre>
<p>Plutôt sympa, non ? Pour reprendre notre exemple de tout à l’heure (le CSS n’est
plus nécessaire) :</p>
<pre><code class="lang-html"><span class="hljs-tag">&lt;<span class="hljs-title">article</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-title">h1</span>&gt;</span>Mon super article<span class="hljs-tag">&lt;/<span class="hljs-title">h1</span>&gt;</span>

  <span class="hljs-tag">&lt;<span class="hljs-title">img</span> <span class="hljs-attribute">data-src</span>=<span class="hljs-value">"/mon/image/desktop.jpg"</span> <span class="hljs-attribute">data-mobile-src</span>=<span class="hljs-value">"/mon/image/mobile.jpg"</span> /&gt;</span>

  <span class="hljs-tag">&lt;<span class="hljs-title">p</span>&gt;</span>Lâche tes comm' !<span class="hljs-tag">&lt;/<span class="hljs-title">p</span>&gt;</span>

  <span class="hljs-tag">&lt;<span class="hljs-title">noscript</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-title">img</span> <span class="hljs-attribute">src</span>=<span class="hljs-value">"/mon/image/mobile.jpg"</span> /&gt;</span>
  <span class="hljs-tag">&lt;/<span class="hljs-title">noscript</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-title">article</span>&gt;</span>
</code></pre>
<pre><code class="lang-javascript"><span class="hljs-keyword">var</span> content = document.querySelector(<span class="hljs-string">'p'</span>),

  switchImage = <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">(isMobile)</span> {</span>
    <span class="hljs-keyword">var</span> attr = isMobile ? <span class="hljs-string">'data-mobile-src'</span> : <span class="hljs-string">'data-src'</span>;

    [].<span class="hljs-keyword">forEach</span>.call(document.querySelectorAll(<span class="hljs-string">'img['</span> + attr + <span class="hljs-string">']'</span>), <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">(el)</span> {</span>
      <span class="hljs-comment">// On affecte l'une ou l'autre source à notre image,</span>
      <span class="hljs-comment">// entraînant son chargement si nécessaire.</span>
      el.src = el.getAttribute(attr);

      <span class="hljs-comment">// On en profite pour la bouger avant ou après le contenu</span>
      content.parentNode.insertBefore(el, isMobile ? content.nextSibling : content);
    });
  };

enquire.register(<span class="hljs-string">'screen and (min-width: 768px)'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">()</span> {</span>
  switchImage(<span class="hljs-keyword">false</span>);
});

enquire.register(<span class="hljs-string">'screen and (max-width: 767px)'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">()</span> {</span>
  switchImage(<span class="hljs-keyword">true</span>);
});
</code></pre>
<p>On peut ainsi gérer facilement le chargement de l’image, ainsi que son
emplacement. J’utilise ici deux handlers distincts pour m’assurer qu’enquire
fait bien son boulot au chargement aussi, dans tous les cas (les callbacks
<code>unmatch</code> ne sont appelés qu’au redimensionnement, semble-t-il : avec un seul
handler, l’image n’arrive donc jamais si on charge la page avec un écran d’une
largeur inférieure à 768px).</p>
<h2 id="that-s-all-you-ve-got-bitch-">That’s all you’ve got, bitch?</h2>
<p>On peut également, puisque tu y tiens tant, évoquer d’autres solutions plus
marginales mais qui méritent d’être citées.</p>
<h3 id="foundation">Foundation</h3>
<p><a href="http://foundation.zurb.com/">Foundation</a> propose, dans sa version 5 (et
peut-être même avant, j’ai pas vérifié) un peu de sucre syntaxique HTML
permettant de switcher (via JS, œuf corse) simplement entre différents contenus
pour l’élément sur lequel on l’utilise.</p>
<p>C’est pas mal. Ça donne ça (tiré de <a href="http://foundation.zurb.com/docs/components/interchange.html">la doc</a>) :</p>
<blockquote>
<p>We use the data-interchange attribute on a markup container (probably a div)
to do this. Here’s an example which loads up a small, static map on mobile, a
larger static map for medium-sized devices, and a full interactive Google map
on large display devices.</p>
</blockquote>
<pre><code class="lang-html">&lt;<span class="hljs-keyword">div</span> data-interchange=<span class="hljs-string">"[../examples/interchange/default.html, (small)],
                       [../examples/interchange/medium.html, (medium)],
                       [../examples/interchange/large.html, (large)]"</span>&gt;
  &lt;<span class="hljs-keyword">div</span> data-alert <span class="hljs-type">class</span>=<span class="hljs-string">"alert-box secondary radius"</span>&gt;
    This <span class="hljs-keyword">is</span> <span class="hljs-keyword">the</span> default content.
    &lt;a href=<span class="hljs-string">"#"</span> <span class="hljs-type">class</span>=<span class="hljs-string">"close"</span>&gt;&amp;<span class="hljs-keyword">times</span>;&lt;/a&gt;
  &lt;/<span class="hljs-keyword">div</span>&gt;
&lt;/<span class="hljs-keyword">div</span>&gt;
</code></pre>
<p><code>small</code>, <code>medium</code> et <code>large</code> étant des raccourcis pour des media queries données
(c’est dans <a href="http://foundation.zurb.com/docs/components/interchange.html">la doc</a>,
toujours. J’insiste.)</p>
<h3 id="flexbox-pas-toi-david-">Flexbox (pas toi, David)</h3>
<p>On peut également, comme l’a très justement souligné <a href="/#crew">lionelB</a>, se
pencher (mais pas trop) sur le cas de Flexbox, qui est un nouveau type de
positionnement introduit en CSS3. La <a href="http://caniuse.com/#search=flexbox">compatibilité</a>
n’est pas encore au top (surtout grâce à IE, qui l’eût cru) mais autant se tenir
prêts ! Pour ceux qui ont dormi, en gros, tu définis un conteneur :</p>
<pre><code class="lang-css"><span class="hljs-class">.flex-container</span> <span class="hljs-rules">{
  <span class="hljs-rule"><span class="hljs-attribute">display</span>:<span class="hljs-value"> flex</span></span>;

  <span class="hljs-comment">/* ou bien */</span>

  <span class="hljs-rule"><span class="hljs-attribute">display</span>:<span class="hljs-value"> inline-flex</span></span>;
<span class="hljs-rule">}</span></span>
</code></pre>
<p>…et tu donnes des numéros à ses enfants, comme à Bangkok :</p>
<pre><code class="lang-css"><span class="hljs-class">.title</span> <span class="hljs-rules">{
  <span class="hljs-rule"><span class="hljs-attribute">order</span>:<span class="hljs-value"> <span class="hljs-number">1</span></span></span>;
<span class="hljs-rule">}</span></span>

<span class="hljs-class">.content</span> <span class="hljs-rules">{
  <span class="hljs-rule"><span class="hljs-attribute">order</span>:<span class="hljs-value"> <span class="hljs-number">2</span></span></span>;
<span class="hljs-rule">}</span></span>

<span class="hljs-class">.image</span> <span class="hljs-rules">{
  <span class="hljs-rule"><span class="hljs-attribute">order</span>:<span class="hljs-value"> <span class="hljs-number">3</span></span></span>;
<span class="hljs-rule">}</span></span>

<span class="hljs-comment">/*
Bien sûr, tu as été assez malin pour mettre ton image en dernier dans le DOM...
...n'est-ce pas ?
*/</span>

<span class="hljs-at_rule">@<span class="hljs-keyword">media</span> screen and (min-width: <span class="hljs-number">768</span>px) </span>{
  <span class="hljs-class">.content</span> <span class="hljs-rules">{
    <span class="hljs-rule"><span class="hljs-attribute">order</span>:<span class="hljs-value"> <span class="hljs-number">3</span></span></span>;
  <span class="hljs-rule">}</span></span>

  <span class="hljs-class">.image</span> <span class="hljs-rules">{
    <span class="hljs-rule"><span class="hljs-attribute">order</span>:<span class="hljs-value"> <span class="hljs-number">2</span></span></span>;
  <span class="hljs-rule">}</span></span>
}
</code></pre>
<p>Et voilà, pas besoin d’avoir fait Pollypocket pour percevoir à quel point la
flexibilité et la propreté du code que cette technique nous permet d’écrire
résolvent notre problème en deux secondes douze. Ce n’est évidemment ici que la
partie émergée du flexberg ; il y a des tas de bonnes ressources qui vous
expliqueront ça en long, en large et en travers bien mieux que moi, notamment
<a href="http://www.adobe.com/devnet/html5/articles/working-with-flexbox-the-new-spec.html">cet article</a>
sur lequel j’ai honteusement pompé les snippets de cette partie.</p>
<h2 id="conclusion">Conclusion</h2>
<p>Comme tu l’as vu, rien de ce que je t’ai montré n’est réellement satisfaisant :
pour pouvoir contrôler le positionnement d’un élément dans le DOM dans le cadre
d’un webdesign responsive, tu dois soit le dupliquer et jouer à cache-cache,
soit le déplacer avec JavaScript. Aussi, je serais ravi que tu partages ton
opinion, tes idées ou tes retours d’XP à ce sujet. Ça me fera de la lecture pour
passer le temps, et toi tu feras quelque chose de constructif !</p>
<p>Il est temps pour moi de te laisser reprendre le cours de ta vie. Peut-être nos
routes se croiseront-elles de nouveau. Dans l’intervalle, va, vis, et code !</p>

]]></description><pubDate>Thu, 26 Dec 2013 00:00:00 GMT</pubDate><link>http://putaindecode.fr/posts/html/responsive-dom/</link><guid isPermaLink="true">http://putaindecode.fr/posts/html/responsive-dom/</guid></item><item><title>Comment se passer de libraries/frameworks JavaScript</title><description><![CDATA[[
<p><strong> Petite note préalable </strong> : Évidemment que ça ne marche pas sous les vieux navigateurs, cet article s’adresse principalement à toi pour te faire comprendre comment les choses marchent.</p>
<p>De plus en plus, le besoin de légèreté se fait sentir sur les pages. En dépit d’un web plus rapide sur desktop, on a maintenant beaucoup de devices connectés via 3G ou Edge (un petit coucou au métro parisien). Du coup, tu te rendras vite compte qu’embarquer jQuery + jQuery Mobile + jQuery UI et un tas d’autres plug-ins grapillés sur le web, ça commence à peser.</p>
<h2 id="pour-la-s-lection-d-lements">Pour la sélection d’élements</h2>
<p>Pour remplacer ton bon vieux <code>$</code> magique, <code>document.querySelectorAll</code> semble faire l’affaire. En revanche, il retourne une instance de <code>NodeList</code>, pas d’<code>Array</code>, ce qui ne nous arrange pas des masses.</p>
<p>Du coup, on peut écrire une petite function toute con, qui nous retourne un <code>Array</code> et ses méthodes bien utiles.</p>
<pre><code class="lang-javascript"><span class="hljs-keyword">var</span> nativeSlice = [].slice <span class="hljs-comment">// la méthode de conversion</span>

<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">$</span><span class="hljs-params">(selector)</span>{</span>
  <span class="hljs-keyword">var</span> list = document.querySelectorAll(selector)
  <span class="hljs-keyword">return</span> nativeSlice.call(list)
}
</code></pre>
<p>Alternativement, tu peux utiliser <code>Array.apply(null, list)</code> plutôt que <code>nativeSlice.call(list)</code>, si vraiment ça te fait plaisir.</p>
<p>Une troisième solution, un peu plus chiante au quotidien (et terriblement laide), c’est d’utiliser directement les méthodes qui t’intéressent (ex. <code>[].forEach</code>) de cette façon :</p>
<pre><code class="lang-javascript">;[].<span class="hljs-keyword">forEach</span>.call(document.querySelectorAll(selector), <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">(element)</span>{</span>
  <span class="hljs-comment">// do something w/ element</span>
})
</code></pre>
<p>Pour en revenir à notre petite méthode <code>$</code>, on peut du coup faire :</p>
<pre><code class="lang-javascript"><span class="hljs-comment">// prends bien l'habitude de garder</span>
<span class="hljs-comment">// tes nodeLists si tu les réutilises</span>

<span class="hljs-keyword">var</span> elements = $(<span class="hljs-string">".my-elements-className"</span>)

elements.forEach(<span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">(element)</span>{</span>
  <span class="hljs-comment">// do something w/ element</span>
})
</code></pre>
<h3 id="pour-l-event-delegation">Pour l’event delegation</h3>
<p>L’event delegation, c’est bien, mangez-en. Ça permet entre autres de ne pas attacher 150 listeners uniques à 150 elements différents, mais à attacher un seul listener sur un parent commun, et analyser les sources des évenements à l’intérieur en se basant sur le bubbling (remontée d’évenement de la source au plus haut parent) ou capturing (descente d’évenement du plus haut parent à la source, avant même que la source ne le reçoive).</p>
<p>Pour faire de la délégation, on va procéder en trois temps :</p>
<ul>
<li>Choper <code>event.target</code></li>
<li>Vérifier que le sélecteur qui nous intéresse correspond bien à <code>event.target</code> ou un de ses parents (dans le cas où l’on clique sur le <code>.icon-Arrow</code> dans <code>.js-Button-action</code>)</li>
<li>Si ça match, on garde l’élement correspondant au sélecteur, sinon, exit</li>
</ul>
<p>Les browsers relativement récents possèdent une méthode : <code>matchesSelector</code> (et tous ses alias préfixés). Ce qu’on peut donc faire, c’est ceci :</p>
<pre><code class="lang-javascript"><span class="hljs-keyword">var</span> docEl = document.documentElement
    <span class="hljs-comment">// si c'est dans docEl, c'est que c'est dispo</span>
  , nativeMatchesSelector =
      docEl.matchesSelector ||
      docEl.webkitMatchesSelector ||
      docEl.mozMatchesSelector ||
      docEl.oMatchesSelector ||
      docEl.msMatchesSelector
  , matchesSelector = nativeMatchesSelector || matchesPolyfill

<span class="hljs-comment">// le polyfill utilise querySelectorAll</span>
<span class="hljs-comment">// et cherche dans le parent de l'élement</span>
<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">matchesPolyfill</span><span class="hljs-params">(selector)</span>{</span>
  <span class="hljs-keyword">var</span> node = this
    , <span class="hljs-keyword">parent</span> = node.parentNode
    , query, index, length
  <span class="hljs-keyword">if</span>(!<span class="hljs-keyword">parent</span> || <span class="hljs-keyword">parent</span>.nodeType != <span class="hljs-number">1</span>) {
    <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>
  }
  query = <span class="hljs-keyword">parent</span>.querySelectorAll(selector)
  index = -<span class="hljs-number">1</span>
  length = query.length
  <span class="hljs-keyword">while</span>(++index &lt; length) {
    <span class="hljs-keyword">if</span>(query[index] == node) <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>
  }
  <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>
}

<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getCurrentTarget</span><span class="hljs-params">(node, selector)</span>{</span>
  <span class="hljs-keyword">if</span>(matchesSelector.call(node, selector)) <span class="hljs-keyword">return</span> node
  <span class="hljs-keyword">while</span>(node = node.parentNode) {
    <span class="hljs-keyword">if</span>(node.nodeType != <span class="hljs-number">1</span>) <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>
    <span class="hljs-keyword">if</span>(matchesSelector.call(node, selector)) <span class="hljs-keyword">return</span> node
  }
  <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>
}
</code></pre>
<p>Dès lors, dans nos listeners, on pourra directement procéder ainsi :</p>
<pre><code class="lang-javascript">element.addEventListener(<span class="hljs-string">"click"</span>, <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">(evt)</span>{</span>
  <span class="hljs-keyword">var</span> currentTarget = getCurrentTarget(evt.target, <span class="hljs-string">".Button-action"</span>)
  <span class="hljs-keyword">if</span>(!currentTarget) <span class="hljs-keyword">return</span>
  <span class="hljs-comment">// all good with currentTarget</span>
})
</code></pre>
<h3 id="pour-l-ajax">Pour l’Ajax</h3>
<p>Pourquoi est-ce que l’on appelle ça encore Ajax, d’ailleurs ? Bref.</p>
<p>Simple comme bonjour :</p>
<pre><code class="lang-javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">isSuccessStatus</span><span class="hljs-params">(status)</span>{</span>
  <span class="hljs-keyword">return</span> status &gt;= <span class="hljs-number">200</span> &amp;&amp; status &lt; <span class="hljs-number">300</span> || status == <span class="hljs-number">304</span>
}

<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">ajax</span><span class="hljs-params">(options)</span>{</span>
  <span class="hljs-keyword">var</span> xhr = <span class="hljs-keyword">new</span> XMLHttpRequest()
    , done = <span class="hljs-literal">false</span>
    , async = options.hasOwnProperty(<span class="hljs-string">"async"</span>) ? options.async : <span class="hljs-literal">true</span>

  xhr.open(options.method || <span class="hljs-string">"GET"</span>, options.url, async)

  xhr.onreadystatechange = <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">()</span>{</span>
    <span class="hljs-keyword">if</span>(done) <span class="hljs-keyword">return</span>
    <span class="hljs-keyword">if</span>(<span class="hljs-keyword">this</span>.readyState != <span class="hljs-number">4</span>) <span class="hljs-keyword">return</span>
    done = <span class="hljs-literal">true</span>

    <span class="hljs-keyword">if</span>(isSuccessStatus(<span class="hljs-keyword">this</span>.status)) {
      <span class="hljs-keyword">if</span>(options.success) {
        options.success.call(<span class="hljs-keyword">this</span>)
      }
      <span class="hljs-keyword">return</span>
    }

    <span class="hljs-keyword">if</span>(options.error) {
      options.error.call(<span class="hljs-keyword">this</span>)
    }
  }
  <span class="hljs-built_in">Object</span>.keys(options.headers || {})
    .forEach(<span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">(key)</span>{</span>
      xhr.setRequestHeader(key, options.headers[key])
    })
  xhr.send(options.data || <span class="hljs-literal">null</span>)
  <span class="hljs-keyword">return</span> xhr
}
</code></pre>
<p>Cette fonction offre un support basique de XHR :</p>
<pre><code class="lang-javascript"><span class="hljs-keyword">var</span> myXHR = ajax({
    url : <span class="hljs-string">"api/users"</span>
  , success : <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">()</span>{</span>
      doStuff(<span class="hljs-keyword">this</span>.responseText)
    }
  , error : <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">()</span>{</span>
      showError(<span class="hljs-keyword">this</span>.status)
    }
})
</code></pre>
<h3 id="es5-magic">ES5 magic</h3>
<p>EcmaScript 5 délivre des petites méthodes très intéressantes pour se simplifier la vie, fortement inspirées par ce qu’on a l’habitude de trouver dans les bibliothèques ayant connu l’âge d’or, comme <a href="http://prototypejs.org">PrototypeJS</a> ou <a href="http://mootools.net">MooTools</a>.</p>
<p>Dès lors, plutôt qu’un ennuyeux :</p>
<pre><code class="lang-javascript">var key, <span class="hljs-keyword">item</span>
<span class="hljs-keyword">for</span>(key <span class="hljs-operator">in</span> myObject) {
  <span class="hljs-keyword">if</span>(myObject.hasOwnProperty(key)) {
    <span class="hljs-keyword">item</span> = myObject[key]
   <span class="hljs-comment"> // do something</span>
  }
}
</code></pre>
<p>on peut se contenter d’un :</p>
<pre><code class="lang-javascript"><span class="hljs-built_in">Object</span>.keys(myObject)
  .forEach(<span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">(key)</span>{</span>
    <span class="hljs-keyword">var</span> item = myObject[i]
    <span class="hljs-comment">// do something</span>
  })
</code></pre>
<p>De même, on bénéficie de méthodes s’avérant très utiles, comme
<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/prototype"><code>Array.prototype.map</code>, <code>Array.prototype.reduce</code>, <code>Array.prototype.filter</code></a>,
<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object"><code>Object.create</code>, <code>Object.getPrototypeOf</code>, <code>Object.getOwnPropertyNames</code>, <code>Object.defineProperty</code></a>
dont je t’invite, si cela t’intéresse, à te renseigner sur ces méthodes.
Et si tu veux avoir plus de détails, read the fucking manual :
<a href="http://es5.github.io">http://es5.github.io</a>.</p>
<h3 id="des-petits-d-tails-cools-du-c-t-des-events">Des petits détails cools du côté des events</h3>
<p>Avec <code>addEventListener</code>, on peut aussi passer un objet comme listener, avec <code>handleEvent</code> pour interface :</p>
<pre><code class="lang-javascript"><span class="hljs-keyword">var</span> myElementClickEvents = {
    element : myElement
  , callbacks : []
  , handleEvent : <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">(evt)</span>{</span>
      <span class="hljs-keyword">var</span> <span class="hljs-keyword">self</span> = this
      this.callbacks.<span class="hljs-keyword">forEach</span>(<span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">(item)</span>{</span>
        item.call(<span class="hljs-keyword">self</span>.element, evt)
      })
    }
}
myElement.addEventListener(<span class="hljs-string">"click"</span>, myElementClickEvents)

myElementClickEvents.callbacks.push(<span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">(evt)</span>{</span>
  console.log(evt)
})
</code></pre>
<p>Avec ça, on peut facilement garder une trace de ce qu’on passé comme listeners.</p>
<h3 id="du-type-checking-">Du type checking ?</h3>
<pre><code class="lang-javascript"><span class="hljs-keyword">var</span> getClass = <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">(o)</span>{</span> <span class="hljs-keyword">return</span> <span class="hljs-built_in">Object</span>.prototype.toString.call(o) }
  , someString = <span class="hljs-keyword">new</span> <span class="hljs-built_in">String</span>(<span class="hljs-string">"foo"</span>)

<span class="hljs-keyword">typeof</span> someString <span class="hljs-comment">// "object"</span>
getClass(someString) <span class="hljs-comment">// "[object String]", sounds more reasonable</span>
</code></pre>
<h3 id="petit-bonus">Petit bonus</h3>
<p>Un petit bonus rien que pour toi : pour avoir une syntaxe plus sympathique et plus claire que les prototypes.</p>
<p>En principe, on fait comme ça :</p>
<pre><code class="lang-javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Animal</span><span class="hljs-params">(name)</span>{</span>
  <span class="hljs-keyword">this</span>.name = name
}

Animal.prototype.getName = <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">()</span>{</span>
  <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.name
}

<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Cat</span><span class="hljs-params">(name)</span>{</span>
  Animal.call(<span class="hljs-keyword">this</span>, name)
}

<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">K</span><span class="hljs-params">()</span>{</span>}
K.prototype = Animal.prototype

Cat.prototype = <span class="hljs-keyword">new</span> K
Cat.prototype.constructor = Cat
Cat.prototype.type = <span class="hljs-string">"cat"</span>

<span class="hljs-keyword">var</span> myAnimal = <span class="hljs-keyword">new</span> Animal(<span class="hljs-string">"Foo"</span>)
  , myCat = <span class="hljs-keyword">new</span> Cat(<span class="hljs-string">"Bar"</span>)

myCat <span class="hljs-keyword">instanceof</span> Cat <span class="hljs-comment">// true</span>
myCat <span class="hljs-keyword">instanceof</span> Animal <span class="hljs-comment">// true</span>
</code></pre>
<p>Maintenant, à l’aide de deux petites méthodes :</p>
<pre><code class="lang-javascript"><span class="hljs-comment">// wow</span>
<span class="hljs-comment">//         many magic</span>
<span class="hljs-comment">//   very es5</span>
<span class="hljs-comment">//            wow</span>
<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">extend</span><span class="hljs-params">(object)</span>{</span>
  <span class="hljs-keyword">var</span> <span class="hljs-keyword">self</span> = Object.create(this)
  <span class="hljs-keyword">if</span>(!object) <span class="hljs-keyword">return</span> <span class="hljs-keyword">self</span>
  Object.keys(object)
    .<span class="hljs-keyword">forEach</span>(<span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">(key)</span>{</span>
      <span class="hljs-keyword">self</span>[key] = object[key]
    })
  <span class="hljs-keyword">return</span> <span class="hljs-keyword">self</span>
}

<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">create</span><span class="hljs-params">()</span>{</span>
  <span class="hljs-keyword">var</span> <span class="hljs-keyword">self</span> = Object.create(this)
  <span class="hljs-keyword">if</span>(typeof <span class="hljs-keyword">self</span>.constructor == <span class="hljs-string">"function"</span>) {
    <span class="hljs-keyword">self</span>.constructor.apply(<span class="hljs-keyword">self</span>, arguments)
  }
  <span class="hljs-keyword">return</span> <span class="hljs-keyword">self</span>
}

<span class="hljs-keyword">var</span> klass = {
    create : create
  , extend : extend
}
</code></pre>
<p>Tu peux faire ça :</p>
<pre><code class="lang-javascript"><span class="hljs-keyword">var</span> animal = klass.extend({
    constructor : <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">(name)</span>{</span>
      <span class="hljs-keyword">this</span>.name = name
    }
  , getName : <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">()</span>{</span>
      <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.name
    }
})

<span class="hljs-keyword">var</span> cat = animal.extend({
    constructor : <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">(name)</span>{</span>
      animal.constructor.call(<span class="hljs-keyword">this</span>, name)
    }
  , type : <span class="hljs-string">"cat"</span>
})

<span class="hljs-keyword">var</span> myAnimal = animal.create(<span class="hljs-string">"Foo"</span>)
  , myCat = cat.create(<span class="hljs-string">"Bar"</span>)

cat.isPrototypeOf(myCat) <span class="hljs-comment">// true</span>
animal.isPrototypeOf(myCat) <span class="hljs-comment">// true</span>
</code></pre>
<p>Voilà, j’espère que cela a pu attiser ta curiosité d’en apprendre plus sur le langage lui-même et le DOM.</p>

]]></description><pubDate>Fri, 06 Dec 2013 00:00:00 GMT</pubDate><link>http://putaindecode.fr/posts/js/comment-se-passer-de-libraries-frameworks-javascript/</link><guid isPermaLink="true">http://putaindecode.fr/posts/js/comment-se-passer-de-libraries-frameworks-javascript/</guid></item><item><title>ExternalInterface.call() de Flash (et Backbone), toute une histoire</title><description><![CDATA[[
<figure class="putainde-Media putainde-Media--left"><img src="../../../images/posts/occupyflash.png" alt=""></figure>

<p>Je voulais vous parler d’un bug qui m’a bien emmerdé récemment et comme j’aimerais que vous ne perdiez pas de temps avec cela, un article s’imposait.</p>
<p><em>Note de la direction : j’y connais rien en Flash (et je ne crois pas avoir trop envie de connaître en fait).</em></p>
<p>Dans la boite où je travaille, nous utilisons Flash en tant que lecteur vidéo étant donné qu’il est pour le moment très difficile de faire lire sur toutes les plateformes des vidéos au format <em>H.264</em> et/ou passant par du <em>HLS</em>. Longue histoire qui fera office d’un autre article. (Je dis ça à chaque fois, haha).</p>
<h2 id="le-pitch">Le pitch</h2>
<p>Avec notre <em>flasheur</em> attitré, nous nous sommes mis en tête de créer un objet <em>event</em> qui permettrait au Flash de déclencher des évènements lorsqu’il le souhaite afin de communiquer avec l’application JavaScript et que celui-ci fasse en conséquence. Cet objet, nous l’avons appelé <code>App.FlashManager</code> et plus précisemment <code>App.FlashManager.Events</code> dans le cas des évènements. Nous utilisons <strong>Backbone.js</strong> pour gérer ce principe d’évènement mais vous en avez d’<a href="http://microjs.com/#event">autres</a> de disponible. En pratique, voilà ce que ça donne :</p>
<pre><code class="lang-javascript"> // on crée un objet vide
App<span class="hljs-preprocessor">.FlashManager</span><span class="hljs-preprocessor">.Events</span> = {}

// on lui ajoute les fonctionnalités des events Backbone
_<span class="hljs-preprocessor">.extend</span>(App<span class="hljs-preprocessor">.FlashManager</span><span class="hljs-preprocessor">.Events</span>, Backbone<span class="hljs-preprocessor">.Events</span>)
</code></pre>
<p>En soi, pas de souci, tout se passe bien à ce moment, nous avons un <a href="http://backbonejs.org/#Events">objet d’évènement façon Backbone</a>. Il pourra alors s’écouter lui-même, écouter un autre objet, mais aussi déclencher des évènements.</p>
<h2 id="c-t-flash">Côté Flash</h2>
<p>La base est en place, maintenant on souhaite que le Flash déclenche un évènement. On passe par l’objet <code>ExternalInterface</code> :</p>
<pre><code class="lang-javascript">ExternalInterface<span class="hljs-preprocessor">.call</span>(<span class="hljs-string">"window.App.FlashManager.Events.trigger"</span>, <span class="hljs-string">"my-event"</span>)
// http://help<span class="hljs-preprocessor">.adobe</span><span class="hljs-preprocessor">.com</span>/en_US/FlashPlatform/reference/actionscript/<span class="hljs-number">3</span>/flash/external/ExternalInterface<span class="hljs-preprocessor">.html</span><span class="hljs-preprocessor">#call</span>
</code></pre>
<p>Et là, bug.</p>
<h2 id="pourquoi-bug-">Pourquoi bug ?</h2>
<p>Pour le moment, je ne sais pas vraiment. Je me pencherai plus sur le sujet dès que j’ai un peu de temps, mais ce que je sais, c’est que <code>ExtercalInterface.call()</code> ne s’attend pas à recevoir ce que <strong>Backbone.js</strong> lui propose. Lorsque vous faites <code>.trigger()</code>, <strong>Backbone.js</strong> renvoie l’<a href="https://github.com/jashkenas/backbone/blob/master/backbone.js#L144-L153">objet en cours</a>, ce qui provoque un énooooorme bug dans le plugin Flash de votre navigateur.</p>
<h2 id="la-solution-c-t-javascript">La solution côté JavaScript</h2>
<p>Pour contrer cela, je vous propose la solution suivante qui est de ne pas utiliser directement l’objet <code>Backbone.Events|View</code> mais plutôt de passer par une interface, un objet proxy.</p>
<p>Voici le schéma :</p>
<ul>
<li>Créer un objet simple qui contient les mêmes noms de méthodes que les objets évènements <strong>Backbone.js</strong> (en gros, se mapper sur l’API Backbone)</li>
<li>Utiliser <strong>Backbone.js</strong> dans les méthodes de cet objet <em>Proxy</em></li>
</ul>
<p>Exemple :</p>
<pre><code class="lang-javascript">// Bridge between flash <span class="hljs-keyword">and</span> js
App<span class="hljs-preprocessor">.FlashManager</span> = {}
App<span class="hljs-preprocessor">.FlashManager</span><span class="hljs-preprocessor">.Events</span> = {}

// Backbone events used for Flash
App<span class="hljs-preprocessor">.InternalFlashManager</span> = {}
App<span class="hljs-preprocessor">.InternalFlashManager</span><span class="hljs-preprocessor">.Events</span> = {}

_<span class="hljs-preprocessor">.extend</span>(App<span class="hljs-preprocessor">.InternalFlashManager</span><span class="hljs-preprocessor">.Events</span>, Backbone<span class="hljs-preprocessor">.Events</span>)

App<span class="hljs-preprocessor">.FlashManager</span><span class="hljs-preprocessor">.Events</span><span class="hljs-preprocessor">.trigger</span> = function(name, opts) {
    App<span class="hljs-preprocessor">.InternalFlashManager</span><span class="hljs-preprocessor">.Events</span><span class="hljs-preprocessor">.trigger</span>(name, opts)

    // Must return nothing not to loop JavaScript engine, important!
    return
}
</code></pre>
<h2 id="oh-et-">Oh et…</h2>
<p>…il existe une version ayant plus ou moins le même souci que moi disponible là : <a href="https://coderwall.com/p/e-8niw">ExternalInterface#call in a deadly loop (<strong>flash</strong>toXML)</a>.</p>
<h2 id="conclusion">Conclusion</h2>
<p>De manière générale (hors <strong>Backbone.js</strong>), lorsque vous utilisez <code>ExtercalInterface.call()</code>, faites en sorte que votre JavaScript retourne quelque chose de simple (un objet ayant que des atributs, pas de fonctions, ou encore un bouléen ou un <em>integer</em>).</p>

]]></description><pubDate>Thu, 05 Dec 2013 00:00:00 GMT</pubDate><link>http://putaindecode.fr/posts/js/externalinterface-call-flash-backbone-toute-une-histoire/</link><guid isPermaLink="true">http://putaindecode.fr/posts/js/externalinterface-call-flash-backbone-toute-une-histoire/</guid></item><item><title>De jQuery à Vanilla JS</title><description><![CDATA[[
<figure class="putainde-Media putainde-Media--left"><img src="../../../images/posts/jquery-die.jpg" alt=""></figure>

<p>Oui alors jQuery, c’est sûrement très bien, ça simplifie pas mal de choses et le <em>chaining</em> est intéressant mais eeeest-ce que vous connaissez l’équivalent en <em>pur</em> JavaScript ? Pas sûr hein.</p>
<p>Ce petit article vous propose de quoi peut-être vous faire changer d’avis sur la bibliothèque qui pèse tout de même environ ~80ko.</p>
<p><em>Note : <a href="http://vanilla-js.com/">Vanilla JS</a> n’est pas un framework mais veut simplement dire “à nu”, c’est du JavaScript sans bibliothèque.</em></p>
<p>C’est parti !</p>
<h2 id="table-des-mati-res">Table des matières</h2>
<ol>
<li><a href="/posts/js/de-jquery-a-vanillajs/#-v-nements">Évènements</a></li>
<li><a href="/posts/js/de-jquery-a-vanillajs/#s-lecteurs">Sélecteurs</a></li>
<li><a href="/posts/js/de-jquery-a-vanillajs/#attributs">Attributs</a></li>
<li><a href="/posts/js/de-jquery-a-vanillajs/#classes">Classes</a></li>
<li><a href="/posts/js/de-jquery-a-vanillajs/#manipulation">Manipulation</a></li>
<li><a href="/posts/js/de-jquery-a-vanillajs/#navigation">Navigation</a></li>
<li><a href="/posts/js/de-jquery-a-vanillajs/#ajax">AJAX</a></li>
<li><a href="/posts/js/de-jquery-a-vanillajs/#jsonp">JSONP</a></li>
</ol>
<h2 id="-v-nements">Évènements</h2>
<pre><code class="lang-javascript"><span class="hljs-comment">// jQuery</span>
$(document).ready(<span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">()</span> {</span>
  <span class="hljs-comment">// code</span>
})

<span class="hljs-comment">// Vanilla</span>
document.addEventListener(<span class="hljs-string">'DOMContentLoaded'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">()</span> {</span>
  <span class="hljs-comment">// code</span>
})
</code></pre>
<pre><code class="lang-javascript"><span class="hljs-comment">// jQuery</span>
$(<span class="hljs-string">'a'</span>).click(<span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">()</span> {</span>
  <span class="hljs-comment">// code…</span>
})

<span class="hljs-comment">// Vanilla</span>
[].forEach.call(document.querySelectorAll(<span class="hljs-string">'a'</span>), <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">(el)</span> {</span>
  el.addEventListener(<span class="hljs-string">'click'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">()</span> {</span>
    <span class="hljs-comment">// code…</span>
  })
})
</code></pre>
<h2 id="s-lecteurs">Sélecteurs</h2>
<pre><code class="lang-javascript"><span class="hljs-comment">// jQuery</span>
<span class="hljs-keyword">var</span> divs = $(<span class="hljs-string">'div'</span>)

<span class="hljs-comment">// Vanilla</span>
<span class="hljs-keyword">var</span> divs = document.querySelectorAll(<span class="hljs-string">'div'</span>)
</code></pre>
<pre><code class="lang-javascript"><span class="hljs-comment">// jQuery</span>
<span class="hljs-keyword">var</span> newDiv = $(<span class="hljs-string">'&lt;div/&gt;'</span>)

<span class="hljs-comment">// Vanilla</span>
<span class="hljs-keyword">var</span> newDiv = document.createElement(<span class="hljs-string">'div'</span>)
</code></pre>
<h2 id="attributs">Attributs</h2>
<pre><code class="lang-javascript"><span class="hljs-comment">// jQuery</span>
<span class="hljs-variable">$(</span><span class="hljs-string">'img'</span>).<span class="hljs-keyword">filter</span>(<span class="hljs-string">':first'</span>).attr(<span class="hljs-string">'alt'</span>, <span class="hljs-string">'My image'</span>)

<span class="hljs-comment">// Vanilla</span>
document.querySelector(<span class="hljs-string">'img'</span>).setAttribute(<span class="hljs-string">'alt'</span>, <span class="hljs-string">'My image'</span>)
</code></pre>
<h2 id="classes">Classes</h2>
<pre><code class="lang-javascript"><span class="hljs-comment">// jQuery</span>
newDiv.addClass(<span class="hljs-string">'foo'</span>)

<span class="hljs-comment">// Vanilla</span>
newDiv.classList.<span class="hljs-keyword">add</span>(<span class="hljs-string">'foo'</span>)
</code></pre>
<pre><code class="lang-javascript"><span class="hljs-comment">// jQuery</span>
newDiv.toggleClass(<span class="hljs-string">'foo'</span>)

<span class="hljs-comment">// Vanilla</span>
newDiv.classList.<span class="hljs-keyword">toggle</span>(<span class="hljs-string">'foo'</span>)
</code></pre>
<h2 id="manipulation">Manipulation</h2>
<pre><code class="lang-javascript"><span class="hljs-comment">// jQuery</span>
$(<span class="hljs-string">'body'</span>).append($(<span class="hljs-string">'&lt;p/&gt;'</span>))

<span class="hljs-comment">// Vanilla</span>
document.body.appendChild(document.createElement(<span class="hljs-string">'p'</span>))
</code></pre>
<pre><code class="lang-javascript"><span class="hljs-comment">// jQuery</span>
<span class="hljs-keyword">var</span> clonedElement = $(<span class="hljs-string">'#about'</span>).clone()

<span class="hljs-comment">// Vanilla</span>
<span class="hljs-keyword">var</span> clonedElement = document.getElementById(<span class="hljs-string">'about'</span>).cloneNode(<span class="hljs-literal">true</span>)
</code></pre>
<pre><code class="lang-javascript">// jQuery
$(<span class="hljs-string">'#wrap'</span>).<span class="hljs-constant">empty</span>()
<span class="hljs-comment">
// Vanilla</span>
var <span class="hljs-operator">wrap</span> = document.getElementById(<span class="hljs-string">'wrap'</span>)
<span class="hljs-keyword">while</span>(<span class="hljs-operator">wrap</span>.firstChild) <span class="hljs-operator">wrap</span>.removeChild(<span class="hljs-operator">wrap</span>.firstChild)
</code></pre>
<h2 id="navigation">Navigation</h2>
<pre><code class="lang-javascript"><span class="hljs-comment">// jQuery</span>
<span class="hljs-keyword">var</span> <span class="hljs-keyword">parent</span> = $(<span class="hljs-string">'#about'</span>).<span class="hljs-keyword">parent</span>()

<span class="hljs-comment">// Vanilla</span>
<span class="hljs-keyword">var</span> <span class="hljs-keyword">parent</span> = document.getElementById(<span class="hljs-string">'about'</span>).parentNode
</code></pre>
<pre><code class="lang-javascript"><span class="hljs-comment">// jQuery</span>
<span class="hljs-keyword">if</span>($(<span class="hljs-string">'#wrap'</span>).<span class="hljs-keyword">is</span>(<span class="hljs-string">':empty'</span>))

<span class="hljs-comment">// Vanilla</span>
<span class="hljs-keyword">if</span>(!document.getElementById(<span class="hljs-string">'wrap'</span>).hasChildNodes())
</code></pre>
<pre><code class="lang-javascript"><span class="hljs-comment">// jQuery</span>
<span class="hljs-keyword">var</span> nextElement = $(<span class="hljs-string">'#wrap'</span>).next()

<span class="hljs-comment">// Vanilla</span>
<span class="hljs-keyword">var</span> nextElement = document.getElementById(<span class="hljs-string">'wrap'</span>).nextSibling
</code></pre>
<h2 id="ajax">AJAX</h2>
<h3 id="get">GET</h3>
<pre><code class="lang-javascript"><span class="hljs-comment">// jQuery</span>
$.get(<span class="hljs-string">'//example.com'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">(data)</span> {</span>
  <span class="hljs-comment">// code</span>
})

<span class="hljs-comment">// Vanilla</span>
<span class="hljs-keyword">var</span> httpRequest = <span class="hljs-keyword">new</span> XMLHttpRequest()
httpRequest.onreadystatechange = <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">(data)</span> {</span>
  <span class="hljs-comment">// code</span>
}
httpRequest.open(<span class="hljs-string">'GET'</span>, url)
httpRequest.send()
</code></pre>
<h3 id="post">POST</h3>
<pre><code class="lang-javascript"><span class="hljs-comment">// jQuery</span>
$.post(<span class="hljs-string">'//example.com'</span>, { username: username }, <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">(data)</span> {</span>
  <span class="hljs-comment">// code</span>
})

<span class="hljs-comment">// Vanilla</span>
<span class="hljs-keyword">var</span> httpRequest = <span class="hljs-keyword">new</span> XMLHttpRequest()
httpRequest.onreadystatechange = <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">(data)</span> {</span>
  <span class="hljs-comment">// code</span>
}
httpRequest.setRequestHeader(<span class="hljs-string">'Content-Type'</span>, <span class="hljs-string">'application/x-www-form-urlencoded'</span>)
httpRequest.open(<span class="hljs-string">'POST'</span>, url)
httpRequest.send(<span class="hljs-string">'username='</span> + <span class="hljs-built_in">encodeURIComponent</span>(username))
</code></pre>
<h3 id="jsonp">JSONP</h3>
<pre><code class="lang-javascript"><span class="hljs-comment">// jQuery</span>
$.getJSON(<span class="hljs-string">'//openexchangerates.org/latest.json?callback=?'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">(data)</span> {</span>
  <span class="hljs-comment">// code</span>
})

<span class="hljs-comment">// Vanilla</span>
<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">success</span><span class="hljs-params">(data)</span> {</span>
  <span class="hljs-comment">// code</span>
}
<span class="hljs-keyword">var</span> scr = document.createElement(<span class="hljs-string">'script'</span>)
scr.src = <span class="hljs-string">'//openexchangerates.org/latest.json?callback=formatCurrency'</span>
document.body.appendChild(scr)
</code></pre>
<p>Cela vous parait-il encore difficile de vous passer de jQuery ? :)</p>
<p>Un grand merci à <a href="http://playground.deaxon.com/js/vanilla-js/">@deaxon</a> qui est à l’origine de cet éclaircissement.</p>
<h2 id="a-creuser">A creuser</h2>
<p>Il existe une version minimaliste de jQuery basée sur la même API mais beaucoup plus légère s’appelant <a href="http://zeptojs.com/">Zepto</a>. Il est actuellement utilisé en production sur le site mobile de ma boite.</p>

]]></description><pubDate>Thu, 05 Dec 2013 00:00:00 GMT</pubDate><link>http://putaindecode.fr/posts/js/de-jquery-a-vanillajs/</link><guid isPermaLink="true">http://putaindecode.fr/posts/js/de-jquery-a-vanillajs/</guid></item><item><title>Premiers pas avec Grunt</title><description><![CDATA[[
<figure class="putainde-Media putainde-Media--left"><img src="../../../images/posts/gruntjs.png" alt=""></figure>

<p>Vous avez sûrement déjà entendu parler de <strong>Grunt</strong> à droite à gauche, en conférence, voire votre boite l’utilise déjà mais vous ne savez toujours pas trop ce qui se cache derrière ce terme saugrenu digne d’un personnage de Warcraft. Soit, ce n’est pas bien grave. <strong>Grunt</strong> est simplement un <em>JavaScript Task Runner</em>, un outil vous permettant de créer des tâches automatisées en JavaScript. Forcément ce n’est pas très parlant mais c’est tout l’intérêt de cet article, vous expliquer ce qu’est <strong>Grunt</strong> et pourquoi il peut vous être utile dans un <em>workflow</em> de front-end dev.</p>
<h1 id="commen-ons">Commençons</h1>
<p>Vous est-il déjà arrivé(e) de devoir régulièrement lancer, lancer et relancer des processus tels que <em>Sass</em>, <em>LESS</em>, <em>uglify</em> - en somme des préprocesseurs ou des minifiers - régulièrement à la main ? N’est-ce pas pénible ? N’est-ce pas aussi pénible de devoir indiquer à tous ses collègues comment ils doivent bosser pour que vous soyez tous cohérents ? Oui ? <strong>Grunt</strong> permet de résoudre ce genre de choses : respecter un putain de <em>workflow</em> en s’assurant que le parcours soit le même pour tout le monde et d’exécuter tout ça en lançant une seule commande. N’est-ce pas fucking aweeeeesome dude ? Bref.</p>
<p>Voici un <em>workflow</em> assez classique :</p>
<ul>
<li>Compiler mes <code>.scss</code> en <code>.css</code>;</li>
<li>Concaténer mes <code>*.js</code> en un seul fichier;</li>
<li>Minifier (avec <em>uglify</em> par exemple) la résultante de l’action précédente.</li>
</ul>
<p>Voyons maintenant comment l’on peut mettre en place ceci via <strong>Grunt</strong>.</p>
<h2 id="installation">Installation</h2>
<p>Tout d’abord, installons <strong>Grunt</strong>. Notez que <strong>Grunt</strong> est en <em>nodejs</em> et que je considère que vous avez déjà <em>nodejs</em> d’installé. D’autre part, nous allons créer un nouveau projet <strong>npm</strong> afin d’enregistrer tous les packages que vous allez installer. Je vous explique par la suite pourquoi nous faisons ça.</p>
<pre><code class="lang-bash">$ npm init <span class="hljs-comment">// puis plusieurs fois entrée</span>
</code></pre>
<p>En premier lieu, il faut installer le <em>package</em> qui permet de gérer <strong>Grunt</strong> en ligne de commande. C’est le <em>commander</em> de <strong>Grunt</strong> en gros.</p>
<pre><code class="lang-bash">$ npm install <span class="hljs-attribute">-g</span> grunt<span class="hljs-attribute">-cli</span>
</code></pre>
<p>Une fois cela fait, installez <strong>Grunt</strong> en local dans votre projet.</p>
<pre><code class="lang-bash"><span class="hljs-comment">$</span> <span class="hljs-comment">npm</span> <span class="hljs-comment">install</span> <span class="hljs-comment">grunt</span> <span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-comment">save</span><span class="hljs-literal">-</span><span class="hljs-comment">dev</span>
</code></pre>
<p>Ni plus ni moins, <strong>Grunt</strong> est enfin installé dans votre projet.</p>
<h2 id="initialisation">Initialisation</h2>
<p>Maintenant, il est nécessaire de créer un fichier de configuration <strong>Grunt</strong>. Pour cela, nous allons créer un fichier nommé <code>Gruntfile.js</code> à la racine de votre projet.</p>
<pre><code class="lang-bash"><span class="hljs-variable">$ </span>touch <span class="hljs-constant">Gruntfile</span>.js
</code></pre>
<p>Fait ? Voici maintenant à quoi doit ressembler la base d’une configuration <strong>Grunt</strong>.</p>
<pre><code class="lang-javascript">module.exports = <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">(grunt)</span> {</span>

  <span class="hljs-comment">// Configuration de Grunt</span>
  grunt.initConfig({})

  <span class="hljs-comment">// Définition des tâches Grunt</span>
  grunt.registerTask(<span class="hljs-string">'default'</span>, <span class="hljs-string">''</span>)

}
</code></pre>
<p>Nous avons maintenant tout le nécessaire pour débuter notre projet. Nous allons enfin pouvoir attaquer les choses sérieuses. Revenons un peu en arrière où nous expliquions que nous voulons en tout premier lieu compiler nos <code>.scss</code> en <code>.css</code>.</p>
<h2 id="cr-er-sa-premi-re-t-che">Créer sa première tâche</h2>
<p>Une petite recherche sur votre moteur de recherche préféré en tapant <code>grunt sass</code> et vous trouverez le projet <a href="https://github.com/gruntjs/grunt-contrib-sass"><code>grunt-contrib-sass</code></a>.</p>
<p>Toute documentation pour installer une tâche <strong>Grunt</strong> est indiquée sur chaque <code>README.md</code> du projet mais pour un souci de clarté et de compréhension, je vais tout de même vous expliquer ici comment faire.</p>
<p>D’abord, installons le package pour <em>Sass</em>.</p>
<pre><code class="lang-bash">$ npm install grunt<span class="hljs-attribute">-contrib</span><span class="hljs-attribute">-sass</span> <span class="hljs-subst">--</span>save<span class="hljs-attribute">-dev</span>
</code></pre>
<p>Ceci va installer le <em>package</em> <code>grunt-contrib-sass</code> dans votre dossier <code>node_modules</code> où vous pourrez l’utiliser en l’important dans votre <code>Gruntfile.js</code>.</p>
<p>Un exemple d’utilisation :</p>
<pre><code class="lang-javascript">module.exports = <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">(grunt)</span> {</span>

  grunt.initConfig({
    sass: {                              <span class="hljs-comment">// Nom de la tâche</span>
      dist: {                            <span class="hljs-comment">// Nom de la sous-tâche</span>
        options: {                       <span class="hljs-comment">// Options</span>
          style: <span class="hljs-string">'expanded'</span>
        },
        files: {                         <span class="hljs-comment">// Liste des fichiers</span>
          <span class="hljs-string">'main.css'</span>: <span class="hljs-string">'main.scss'</span>,       <span class="hljs-comment">// 'destination': 'source'</span>
          <span class="hljs-string">'widgets.css'</span>: <span class="hljs-string">'widgets.scss'</span>
        }
      }
    }
  })

  <span class="hljs-comment">// Import du package</span>
  grunt.loadNpmTasks(<span class="hljs-string">'grunt-contrib-sass'</span>)

  <span class="hljs-comment">// Redéfinition de la tâche `default` qui est la tâche lancée dès que vous lancez Grunt sans rien spécifier.</span>
  <span class="hljs-comment">// Note : ici, nous définissons sass comme une tâche à lancer si on lance la tâche `default`.</span>
  grunt.registerTask(<span class="hljs-string">'default'</span>, [<span class="hljs-string">'sass:dist'</span>])
}
</code></pre>
<p>Nous avons maintenant tout le nécessaire pour pouvoir compiler nos <code>.scss</code> en  <code>.css</code>.</p>
<p>Vous vous demandez peut-être comment vous pouvez généraliser vos sources plutôt que les définir une par une. Pas de souci.</p>
<pre><code class="lang-javascript">module.exports = <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">(grunt)</span> {</span>

  grunt.initConfig({
    sass: {
      dist: {
        options: {
          style: <span class="hljs-string">'expanded'</span>
        },
        files: { <span class="hljs-comment">// C'est ici que l'on définit le dossier que l'on souhaite importer</span>
          <span class="hljs-string">"expand"</span>: <span class="hljs-literal">true</span>,
          <span class="hljs-string">"cwd"</span>: <span class="hljs-string">"src/styles/"</span>,
          <span class="hljs-string">"src"</span>: [<span class="hljs-string">"*.scss"</span>],
          <span class="hljs-string">"dest"</span>: <span class="hljs-string">"dist/styles/"</span>,
          <span class="hljs-string">"ext"</span>: <span class="hljs-string">".css"</span>
        }
      }
    }
  })

  grunt.loadNpmTasks(<span class="hljs-string">'grunt-contrib-sass'</span>)

  grunt.registerTask(<span class="hljs-string">'default'</span>, [<span class="hljs-string">'sass:dist'</span>])
}
</code></pre>
<h2 id="deuxi-me-t-che-concat-ner-ses-fichiers-javascript">Deuxième tâche : concaténer ses fichiers JavaScript</h2>
<p>Passons maintenant à la concaténation des fichiers JavaScripts.</p>
<p>Comme pour la majorité des tâches que vous aurez besoin avec <strong>Grunt</strong>, un <em>package</em> <strong>Grunt</strong> existe déjà pour ce travail demandé.</p>
<p>-&gt; <a href="https://github.com/gruntjs/grunt-contrib-concat"><code>grunt-contrib-concat</code></a></p>
<p>Installation : <code>npm install grunt-contrib-concat --save-dev</code> (<code>--save-dev</code> permet de sauvegarder le package dans <code>package.json</code> pour pouvoir à tout moment le réinstaller en faisant <code>npm install</code>)</p>
<p>On ajoute alors à notre configuration <strong>Grunt</strong> l’importation de <code>grunt-contrib-concat</code> :</p>
<pre><code class="lang-javascript">module.exports = <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">(grunt)</span> {</span>

  grunt.initConfig({
    sass: {
      dist: {
        options: {
          style: <span class="hljs-string">'expanded'</span>
        },
        files: {
          <span class="hljs-string">"expand"</span>: <span class="hljs-literal">true</span>,
          <span class="hljs-string">"cwd"</span>: <span class="hljs-string">"src/styles/"</span>,
          <span class="hljs-string">"src"</span>: [<span class="hljs-string">"*.scss"</span>],
          <span class="hljs-string">"dest"</span>: <span class="hljs-string">"dist/styles/"</span>,
          <span class="hljs-string">"ext"</span>: <span class="hljs-string">".css"</span>
        }
      }
    }
  })

  grunt.loadNpmTasks(<span class="hljs-string">'grunt-contrib-sass'</span>);
  grunt.loadNpmTasks(<span class="hljs-string">'grunt-contrib-concat'</span>); <span class="hljs-comment">// Voilà l'ajout.</span>

  grunt.registerTask(<span class="hljs-string">'default'</span>, [<span class="hljs-string">'sass:dist'</span>])
}
</code></pre>
<p>Puis on ajoute notre tâche :</p>
<pre><code class="lang-javascript">module.exports = <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">(grunt)</span> {</span>

  grunt.initConfig({
    sass: {
      dist: {
        options: {
          style: <span class="hljs-string">'expanded'</span>
        },
        files: {
          <span class="hljs-string">"expand"</span>: <span class="hljs-literal">true</span>,
          <span class="hljs-string">"cwd"</span>: <span class="hljs-string">"src/styles/"</span>,
          <span class="hljs-string">"src"</span>: [<span class="hljs-string">"*.scss"</span>],
          <span class="hljs-string">"dest"</span>: <span class="hljs-string">"dist/styles/"</span>,
          <span class="hljs-string">"ext"</span>: <span class="hljs-string">".css"</span>
        }
      }
    },
    concat: {
      options: {
        separator: <span class="hljs-string">';'</span>, <span class="hljs-comment">// permet d'ajouter un point-virgule entre chaque fichier concaténé.</span>
      },
      dist: {
        src: [<span class="hljs-string">'src/intro.js'</span>, <span class="hljs-string">'src/project.js'</span>, <span class="hljs-string">'src/outro.js'</span>], <span class="hljs-comment">// la source</span>
        dest: <span class="hljs-string">'dist/built.js'</span> <span class="hljs-comment">// la destination finale</span>
      }
    }
  })

  grunt.loadNpmTasks(<span class="hljs-string">'grunt-contrib-sass'</span>);
  grunt.loadNpmTasks(<span class="hljs-string">'grunt-contrib-concat'</span>);

  grunt.registerTask(<span class="hljs-string">'default'</span>, [<span class="hljs-string">'sass:dist'</span>])
}
</code></pre>
<p>Ne pas oublier d’ajouter la tâche de concaténation à notre tâche par défaut :</p>
<pre><code class="lang-javascript">module.exports = <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">(grunt)</span> {</span>

  grunt.initConfig({
    sass: {
      dist: {
        options: {
          style: <span class="hljs-string">'expanded'</span>
        },
        files: {
          <span class="hljs-string">"expand"</span>: <span class="hljs-literal">true</span>,
          <span class="hljs-string">"cwd"</span>: <span class="hljs-string">"src/styles/"</span>,
          <span class="hljs-string">"src"</span>: [<span class="hljs-string">"*.scss"</span>],
          <span class="hljs-string">"dest"</span>: <span class="hljs-string">"dist/styles/"</span>,
          <span class="hljs-string">"ext"</span>: <span class="hljs-string">".css"</span>
        }
      }
    },
    concat: {
      options: {
        separator: <span class="hljs-string">';'</span>, <span class="hljs-comment">// permet d'ajouter un point-virgule entre chaque fichier concaténé.</span>
      },
      dist: {
        src: [<span class="hljs-string">'src/intro.js'</span>, <span class="hljs-string">'src/project.js'</span>, <span class="hljs-string">'src/outro.js'</span>], <span class="hljs-comment">// la source</span>
        dest: <span class="hljs-string">'dist/built.js'</span> <span class="hljs-comment">// la destination finale</span>
      }
    }
  })

  grunt.loadNpmTasks(<span class="hljs-string">'grunt-contrib-sass'</span>);
  grunt.loadNpmTasks(<span class="hljs-string">'grunt-contrib-concat'</span>);

  grunt.registerTask(<span class="hljs-string">'default'</span>, [<span class="hljs-string">'sass:dist'</span>, <span class="hljs-string">'concat:dist'</span>]) <span class="hljs-comment">// ici même.</span>
}
</code></pre>
<h2 id="compressons-le-tout-">Compressons le tout !</h2>
<p>Pour finir, compressons nos fichiers JavaScript ! Pour cela : <a href="https://github.com/gruntjs/grunt-contrib-uglify"><code>grunt-contrib-uglify</code></a> fera l’affaire.</p>
<p>Je vous passe les détails pour l’installer, si vous avez bien suivi cet article, vous ne devriez avoir aucun problème pour l’installer.</p>
<pre><code class="lang-javascript"><span class="hljs-built_in">module</span>.exports = <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">(grunt)</span></span> {

  grunt.initConfig({
    sass: {
      dist: {
        options: {
          style: <span class="hljs-string">'expanded'</span>
        },
        files: {
          <span class="hljs-string">"expand"</span>: <span class="hljs-keyword">true</span>,
          <span class="hljs-string">"cwd"</span>: <span class="hljs-string">"src/styles/"</span>,
          <span class="hljs-string">"src"</span>: [<span class="hljs-string">"*.scss"</span>],
          <span class="hljs-string">"dest"</span>: <span class="hljs-string">"dist/styles/"</span>,
          <span class="hljs-string">"ext"</span>: <span class="hljs-string">".css"</span>
        }
      }
    },
    concat: {
      options: {
        separator: <span class="hljs-string">';'</span>
      },
      dist: {
        src: [<span class="hljs-string">'src/intro.js'</span>, <span class="hljs-string">'src/project.js'</span>, <span class="hljs-string">'src/outro.js'</span>],
        dest: <span class="hljs-string">'dist/built.js'</span>
      }
    },
    uglify: {
      options: {
        separator: <span class="hljs-string">';'</span>
      },
      dist: {
        src: [<span class="hljs-string">'src/intro.js'</span>, <span class="hljs-string">'src/project.js'</span>, <span class="hljs-string">'src/outro.js'</span>],
        dest: <span class="hljs-string">'dist/built.js'</span>
      }
    }
  })

  grunt.loadNpmTasks(<span class="hljs-string">'grunt-contrib-sass'</span>)
  grunt.loadNpmTasks(<span class="hljs-string">'grunt-contrib-concat'</span>)

  grunt.registerTask(<span class="hljs-string">'default'</span>, [<span class="hljs-string">'sass:dist'</span>, <span class="hljs-string">'concat:dist'</span>])
}
</code></pre>
<p>Ne constatez vous pas un souci ici ? Oui, nous ne voulons sûrement pas à la fois concaténer nos fichiers et les compresser. Alors comment faire ? Pas d’inquiètude, il suffit de créer des tâches d’environnement ou de contexte. On pourrait par exemple créer une tâche développement et une tâche de production, qu’en pensez-vous ? Pas mal non ? :)</p>
<h2 id="optimisons-">Optimisons !</h2>
<p>Supprimons alors dans un premier temps notre tâche par défaut et créons deux tâches : <code>dev</code> et <code>dist</code>.</p>
<pre><code class="lang-javascript"><span class="hljs-built_in">module</span>.exports = <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">(grunt)</span></span> {

  grunt.initConfig({
    sass: {
      dist: {
        options: {
          style: <span class="hljs-string">'expanded'</span>
        },
        files: {
          <span class="hljs-string">"expand"</span>: <span class="hljs-keyword">true</span>,
          <span class="hljs-string">"cwd"</span>: <span class="hljs-string">"src/styles/"</span>,
          <span class="hljs-string">"src"</span>: [<span class="hljs-string">"*.scss"</span>],
          <span class="hljs-string">"dest"</span>: <span class="hljs-string">"dist/styles/"</span>,
          <span class="hljs-string">"ext"</span>: <span class="hljs-string">".css"</span>
        }
      }
    },
    concat: {
      options: {
        separator: <span class="hljs-string">';'</span>
      },
      dist: {
        src: [<span class="hljs-string">'src/intro.js'</span>, <span class="hljs-string">'src/project.js'</span>, <span class="hljs-string">'src/outro.js'</span>],
        dest: <span class="hljs-string">'dist/built.js'</span>
      }
    },
    uglify: {
      options: {
        separator: <span class="hljs-string">';'</span>
      },
      dist: {
        src: [<span class="hljs-string">'src/intro.js'</span>, <span class="hljs-string">'src/project.js'</span>, <span class="hljs-string">'src/outro.js'</span>],
        dest: <span class="hljs-string">'dist/built.js'</span>
      }
    }
  })

  grunt.loadNpmTasks(<span class="hljs-string">'grunt-contrib-sass'</span>)
  grunt.loadNpmTasks(<span class="hljs-string">'grunt-contrib-concat'</span>)

  grunt.registerTask(<span class="hljs-string">'dev'</span>, [])
  grunt.registerTask(<span class="hljs-string">'dist'</span>, [])
}
</code></pre>
<p>Sauf que comme ça, vous le voyez, cela ne va pas faire grand chose, voire rien du tout. Agrémentons alors nos deux tâches par ce qu’on souhaite faire.</p>
<pre><code class="lang-javascript">module.exports = <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">(grunt)</span> {</span>

  grunt.initConfig({
    sass: {
      dist: {
        options: {
          style: <span class="hljs-string">'expanded'</span>
        },
        files: {
          <span class="hljs-string">"expand"</span>: <span class="hljs-literal">true</span>,
          <span class="hljs-string">"cwd"</span>: <span class="hljs-string">"src/styles/"</span>,
          <span class="hljs-string">"src"</span>: [<span class="hljs-string">"*.scss"</span>],
          <span class="hljs-string">"dest"</span>: <span class="hljs-string">"dist/styles/"</span>,
          <span class="hljs-string">"ext"</span>: <span class="hljs-string">".css"</span>
        }
      }
    },
    concat: {
      options: {
        separator: <span class="hljs-string">';'</span>
      },
      dist: {
        src: [<span class="hljs-string">'src/intro.js'</span>, <span class="hljs-string">'src/project.js'</span>, <span class="hljs-string">'src/outro.js'</span>],
        dest: <span class="hljs-string">'dist/built.js'</span>
      }
    },
    uglify: {
      options: {
        separator: <span class="hljs-string">';'</span>
      },
      dist: {
        src: [<span class="hljs-string">'src/intro.js'</span>, <span class="hljs-string">'src/project.js'</span>, <span class="hljs-string">'src/outro.js'</span>],
        dest: <span class="hljs-string">'dist/built.js'</span>
      }
    }
  })

  grunt.loadNpmTasks(<span class="hljs-string">'grunt-contrib-sass'</span>)
  grunt.loadNpmTasks(<span class="hljs-string">'grunt-contrib-concat'</span>)

  grunt.registerTask(<span class="hljs-string">'dev'</span>, [<span class="hljs-string">'sass:dist'</span>, <span class="hljs-string">'concat:dist'</span>]) <span class="hljs-comment">// C'est pas chouette ça ?</span>
  grunt.registerTask(<span class="hljs-string">'dist'</span>, [<span class="hljs-string">'sass:dist'</span>, <span class="hljs-string">'uglify:dist'</span>]) <span class="hljs-comment">// Et hop, je compresse si je lance $ grunt dist</span>
}
</code></pre>
<p>Ha ! Nous y voilà ! Nous avons alors deux tâches <code>grunt dev</code> et <code>grunt dist</code> qui nous permettent dans tous les cas de générer nos css et dans un cas concaténer nos js, dans l’autre les compresser (la compression fait aussi la concaténation implicitement).</p>
<p>Sauf que comme tout bon(ne) développeur/euse, vous êtes une grosse feignasse et compiler à chaque fois que vous faites des modifications sur vos fichiers va vite être saoulant.</p>
<p>Pour cela, une tâche existe, elle s’appelle <code>watch</code> (via le package <a href="https://github.com/gruntjs/grunt-contrib-watch/"><code>grunt-contrib-watch</code></a>).</p>
<h2 id="regarde-ce-fichier-que-je-ne-euh-bref-">Regarde ce fichier que je ne… euh bref.</h2>
<p>Très simple, <code>watch</code> va vous permettre de “regarder” vos fichiers, savoir lesquels ont changé et donc lancer une action en fonction du type de fichiers.</p>
<p>Imaginons que l’on veut par exemple compiler nos css à chaque fois que l’on change un fichier <em>Sass</em>. Ou encore que l’on concatène nos fichiers JavaScript dès que l’on touche à l’un d’entre eux.</p>
<pre><code class="lang-javascript">module.exports = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-title">grunt</span>) {</span>

  grunt.initConfig({
    sass: {
      dist: {
        options: {
          style: <span class="hljs-string">'expanded'</span>
        },
        <span class="hljs-built_in">files</span>: {
          <span class="hljs-string">"expand"</span>: <span class="hljs-constant">true</span>,
          <span class="hljs-string">"cwd"</span>: <span class="hljs-string">"src/styles/"</span>,
          <span class="hljs-string">"src"</span>: [<span class="hljs-string">"*.scss"</span>],
          <span class="hljs-string">"dest"</span>: <span class="hljs-string">"dist/styles/"</span>,
          <span class="hljs-string">"ext"</span>: <span class="hljs-string">".css"</span>
        }
      }
    },
    concat: {
      options: {
        separator: <span class="hljs-string">';'</span>
      },
      dist: {
        src: [<span class="hljs-string">'src/intro.js'</span>, <span class="hljs-string">'src/project.js'</span>, <span class="hljs-string">'src/outro.js'</span>],
        dest: <span class="hljs-string">'dist/built.js'</span>
      }
    },
    uglify: {
      options: {
        separator: <span class="hljs-string">';'</span>
      },
      dist: {
        src: [<span class="hljs-string">'src/intro.js'</span>, <span class="hljs-string">'src/project.js'</span>, <span class="hljs-string">'src/outro.js'</span>]
        dest: <span class="hljs-string">'dist/built.js'</span>
      }
    },
    watch: {
      scripts: {
        <span class="hljs-built_in">files</span>: <span class="hljs-string">'**/*.js'</span>,<span class="hljs-comment"> // tous les fichiers JavaScript de n'importe quel dossier</span>
        tasks: [<span class="hljs-string">'concat:dist'</span>]
      },
      styles: {
        <span class="hljs-built_in">files</span>: <span class="hljs-string">'**/*.scss'</span>,<span class="hljs-comment"> // tous les fichiers Sass de n'importe quel dossier</span>
        tasks: [<span class="hljs-string">'sass:dist'</span>]
      }
    }
  })

  grunt.loadNpmTasks(<span class="hljs-string">'grunt-contrib-sass'</span>)
  grunt.loadNpmTasks(<span class="hljs-string">'grunt-contrib-concat'</span>)
  grunt.loadNpmTasks(<span class="hljs-string">'grunt-contrib-watch'</span>)

  grunt.registerTask(<span class="hljs-string">'dev'</span>, [<span class="hljs-string">'sass:dist'</span>, <span class="hljs-string">'concat:dist'</span>])
  grunt.registerTask(<span class="hljs-string">'dist'</span>, [<span class="hljs-string">'sass:dist'</span>, <span class="hljs-string">'uglify:dist'</span>])
}
</code></pre>
<p>Maintenant, vous êtes capable à tout moment de compiler automatiquement vos fichiers en lançant simplement <code>$ grunt watch</code>.</p>
<p>Oui, comprenez bien que lorsque vous ajoutez une tâche dans la définition de la configuration de <strong>Grunt</strong>, elle est appelable directement. Typiquement, vous pouvez faire <code>$ grunt premier-niveau:deuxieme-niveau</code> soit par exemple <code>$ grunt sass:dist</code>. Vous n’êtes pas obligé(e) de (re)définir chaque tâche via <code>grunt.registerTask()</code>.</p>
<p>Je ne sais pas si vous vous rappelez mais nous avions crée une tâche de base s’appelant <code>default</code>. Cette tâche se lance dès que vous ne passez aucun paramètre à <strong>Grunt</strong> soit <code>$ grunt</code>. Vous pouvez aussi l’appeler via <code>$ grunt default</code> mais aucun intérêt.</p>
<p>Tout ça pour dire qu’il est serait sûrement intéressant de lancer la tâche <code>watch</code> dès qu’on souhaite lancer <strong>Grunt</strong> étant donné que c’est sûrement la tâche la plus récurrente que vous utiliserez.</p>
<p>C’est parti !</p>
<pre><code class="lang-javascript">module.exports = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-title">grunt</span>) {</span>

  grunt.initConfig({
    sass: {
      dist: {
        options: {
          style: <span class="hljs-string">'expanded'</span>
        },
        <span class="hljs-built_in">files</span>: {
          <span class="hljs-string">"expand"</span>: <span class="hljs-constant">true</span>,
          <span class="hljs-string">"cwd"</span>: <span class="hljs-string">"src/styles/"</span>,
          <span class="hljs-string">"src"</span>: [<span class="hljs-string">"*.scss"</span>],
          <span class="hljs-string">"dest"</span>: <span class="hljs-string">"dist/styles/"</span>,
          <span class="hljs-string">"ext"</span>: <span class="hljs-string">".css"</span>
        }
      }
    },
    concat: {
      options: {
        separator: <span class="hljs-string">';'</span>
      },
      dist: {
        src: [<span class="hljs-string">'src/intro.js'</span>, <span class="hljs-string">'src/project.js'</span>, <span class="hljs-string">'src/outro.js'</span>],
        dest: <span class="hljs-string">'dist/built.js'</span>
      }
    },
    uglify: {
      options: {
        separator: <span class="hljs-string">';'</span>
      },
      dist: {
        src: [<span class="hljs-string">'src/intro.js'</span>, <span class="hljs-string">'src/project.js'</span>, <span class="hljs-string">'src/outro.js'</span>]
        dest: <span class="hljs-string">'dist/built.js'</span>
      }
    },
    watch: {
      scripts: {
        <span class="hljs-built_in">files</span>: <span class="hljs-string">'**/*.js'</span>,<span class="hljs-comment"> // tous les fichiers JavaScript de n'importe quel dossier</span>
        tasks: [<span class="hljs-string">'concat:dist'</span>]
      },
      styles: {
        <span class="hljs-built_in">files</span>: <span class="hljs-string">'**/*.scss'</span>,<span class="hljs-comment"> // tous les fichiers Sass de n'importe quel dossier</span>
        tasks: [<span class="hljs-string">'sass:dist'</span>]
      }
    }
  })

  grunt.loadNpmTasks(<span class="hljs-string">'grunt-contrib-sass'</span>)
  grunt.loadNpmTasks(<span class="hljs-string">'grunt-contrib-concat'</span>)
  grunt.loadNpmTasks(<span class="hljs-string">'grunt-contrib-watch'</span>)

  grunt.registerTask(<span class="hljs-string">'default'</span>, [<span class="hljs-string">'dev'</span>, <span class="hljs-string">'watch'</span>])<span class="hljs-comment"> // Oui, je conseille de toujours compiler une fois avant de lancer watch.</span>
  grunt.registerTask(<span class="hljs-string">'dev'</span>, [<span class="hljs-string">'sass:dist'</span>, <span class="hljs-string">'concat:dist'</span>])
  grunt.registerTask(<span class="hljs-string">'dist'</span>, [<span class="hljs-string">'sass:dist'</span>, <span class="hljs-string">'uglify:dist'</span>])
}
</code></pre>
<p>That’s it. Nous avons maintenant tout le nécessaire pour compiler des css, du js, l’optimiser, ainsi qu’avoir une commande de développement avec compilation automatique.</p>
<p>Et puisque je suis maniaque, nous allons ranger un peu :</p>
<pre><code class="lang-javascript">module.exports = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-title">grunt</span>) {</span>

 <span class="hljs-comment"> // Je préfère définir mes imports tout en haut</span>
  grunt.loadNpmTasks(<span class="hljs-string">'grunt-contrib-sass'</span>)
  grunt.loadNpmTasks(<span class="hljs-string">'grunt-contrib-concat'</span>)
  grunt.loadNpmTasks(<span class="hljs-string">'grunt-contrib-watch'</span>)

  var jsSrc = [<span class="hljs-string">'src/intro.js'</span>, <span class="hljs-string">'src/project.js'</span>, <span class="hljs-string">'src/outro.js'</span>]
    , jsDist = <span class="hljs-string">'dist/built.js'</span>

 <span class="hljs-comment"> // Configuration de Grunt</span>
  grunt.initConfig({
    sass: {
      dist: {
        options: {
          style: <span class="hljs-string">'expanded'</span>
        },
        <span class="hljs-built_in">files</span>: {
          <span class="hljs-string">"expand"</span>: <span class="hljs-constant">true</span>,
          <span class="hljs-string">"cwd"</span>: <span class="hljs-string">"src/styles/"</span>,
          <span class="hljs-string">"src"</span>: [<span class="hljs-string">"*.scss"</span>],
          <span class="hljs-string">"dest"</span>: <span class="hljs-string">"dist/styles/"</span>,
          <span class="hljs-string">"ext"</span>: <span class="hljs-string">".css"</span>
        }
      },
      dev: {}<span class="hljs-comment"> // A vous de le faire ! vous verrez que certaines options Sass sont plus intéressantes en mode dev que d'autres.</span>
    },
    concat: {
      options: {
        separator: <span class="hljs-string">';'</span>
      },
      compile: {<span class="hljs-comment"> // On renomme vu qu'on a pas de mode dev/dist. Dist étant une autre tâche : uglify</span>
        src: jsSrc,<span class="hljs-comment"> // Vu qu'on doit l'utiliser deux fois, autant en faire une variable.</span>
        dest: jsDist<span class="hljs-comment"> // Il existe des hacks plus intéressants mais ce n'est pas le sujet du post.</span>
      }
    },
    uglify: {
      options: {
        separator: <span class="hljs-string">';'</span>
      },
      compile: {
        src: jsSrc,
        dest: jsDist
      }
    },
    watch: {
      scripts: {
        <span class="hljs-built_in">files</span>: <span class="hljs-string">'**/*.js'</span>,
        tasks: [<span class="hljs-string">'scripts:dev'</span>]
      },
      styles: {
        <span class="hljs-built_in">files</span>: <span class="hljs-string">'**/*.scss'</span>,
        tasks: [<span class="hljs-string">'styles:dev'</span>]
      }
    }
  })

  grunt.registerTask(<span class="hljs-string">'default'</span>, [<span class="hljs-string">'dev'</span>, <span class="hljs-string">'watch'</span>])
  grunt.registerTask(<span class="hljs-string">'dev'</span>, [<span class="hljs-string">'styles:dev'</span>, <span class="hljs-string">'scripts:dev'</span>])
  grunt.registerTask(<span class="hljs-string">'dist'</span>, [<span class="hljs-string">'styles:dist'</span>, <span class="hljs-string">'scripts:dist'</span>])

 <span class="hljs-comment"> // J'aime bien avoir des noms génériques</span>
  grunt.registerTask(<span class="hljs-string">'scripts:dev'</span>, [<span class="hljs-string">'concat:compile'</span>])
  grunt.registerTask(<span class="hljs-string">'scripts:dist'</span>, [<span class="hljs-string">'uglify:compile'</span>])

  grunt.registerTask(<span class="hljs-string">'styles:dev'</span>, [<span class="hljs-string">'sass:dev'</span>])
  grunt.registerTask(<span class="hljs-string">'styles:dist'</span>, [<span class="hljs-string">'sass:dist'</span>])
}
</code></pre>
<p>Avec ça, je pense qu’on est pas trop mal. Il reste des optimisations éventuelles à faire et nombreuses autres tâches intéressantes peuvent être ajoutées comme <a href="https://github.com/gruntjs/grunt-contrib-jshint/">jshint</a>. Cela fera probablement office d’un autre article.</p>
<p>J’espère que vous y voyez maintenant un peu plus clair dans <strong>Grunt</strong> ainsi que dans la compilation côté front-end. <strong>Grunt</strong> est un excellent produit, avec une communauté réactive et il est rare qu’une tâche que vous souhaitiez mettre en place n’existe pas.</p>
<p>Bon workflow !</p>

]]></description><pubDate>Sat, 16 Nov 2013 00:00:00 GMT</pubDate><link>http://putaindecode.fr/posts/js/premiers-pas-avec-grunt/</link><guid isPermaLink="true">http://putaindecode.fr/posts/js/premiers-pas-avec-grunt/</guid></item><item><title>Structurer son projet avec Revel et Mgo</title><description><![CDATA[[
<p>Tu te sens l’âme d’un rebelle ? Tu veux tester de la techno atypique ? Ça tombe
bien, aujourd’hui on est là pour ça. On va toucher à un sujet pas forcément
majoritaire : le langage Go. Si tu ne connais pas les bases, je t’invite à aller
sur la <a href="http://golang.org/">homepage du projet</a> et à parcourir le
<a href="http://tour.golang.org/">go-tour anglais</a> ou
<a href="http://go-tour-fr.appspot.com/">celui en français</a>, c’est un showcase complet du langage
(et très bien fichu).
Mais si t’es juste curieux et que comprendre chaque pixel de l’article n’est pas
une obsession pour toi, tu devrais pouvoir voir de quoi on parle. Même
<a href="/#crew">Nyalab</a> y est arrivé.</p>
<p>Dans cet article on va voir <strong>comment brancher un projet go+revel à une base de
données mongodb</strong> et obtenir ainsi une base de travail sympa pour explorer le
développement web avec Go.</p>
<h2 id="les-technos-utilis-es">Les technos utilisées</h2>
<h3 id="-golang-http-golang-org-"><a href="http://golang.org">Golang</a></h3>
<p>Langage compilé, publié en 2009, communément considéré comme “désorienté objet”,
c’est une alternative solide au C/C++ qui prône un découpage modulaire (par
“package”) des applications. Il est prédisposé à une utilisation en
développement web grâce à un package natif de gestion des réseaux et du
protocole http.</p>
<h3 id="-revel-http-robfig-github-io-revel-"><a href="http://robfig.github.io/revel/">Revel</a></h3>
<p>Framework développé en Go et pour Go. Il intègre tout ce qu’il faut pour
développer une application web : rechargement du code à chaud, gestion des urls
par routing, parsing des paramètres GET et POST, mécanisme de validation des
données, gestion de sessions, gestion du cache, framework de tests et même
moteur de tâches planifiées cron-likes. Il a pour particularité d’être
complètement découplé sur la partie modèle et ne fourni aucun ORM ou ODM,
juste un petit module pour gérer des transactions sur des bases sql-like.</p>
<h3 id="-mgo-http-labix-org-mgo-"><a href="http://labix.org/mgo">Mgo</a></h3>
<p>Driver Go complet pour MongoDB, permettant d’établir la connexion et d’envoyer
des requêtes. Il dispose d’un mécanisme de mapping des documents mongodb sur les
type struct de Go.</p>
<h3 id="-mongodb-http-www-mongodb-org-"><a href="http://www.mongodb.org/">MongoDB</a></h3>
<p>Base de données NoSql agile et scalable, les documents sont stockés au format
json dans des collections. Le requêtage se fait en manipulant des objets et des
fonctions javascript.</p>
<h2 id="attends-attends-pourquoi-go-">Attends, attends … Pourquoi Go ?</h2>
<p>Le premier vrai argument, c’est la <strong>performance</strong>. Sans rentrer dans
l’explication hyper poussée d’un <a href="http://jaxbot.me/articles/benchmarks_nodejs_vs_go_vs_php_3_14_2013">benchmark</a>, on peut
affirmer sans trop de risque que Go se hisse au moins au niveau de node.js. On
va pas risquer de vexer les autres membres du crew avec des affirmations
trollesques dès le premier post.</p>
<p>On peut aussi ajouter que Go est un <strong>langage moderne</strong>, qui inclut toutes les
<strong>petites friandises pour attirer le développeur</strong> curieux et assoiffé de
qualité. Framework de tests et outil de mise en forme du code sont natifs et
permettent à la techno d’échapper aux interminables guerres de conventions :</p>
<blockquote>
<p>De toutes façons le no-newline avant “{“ c’est vraiment pour les pourritures
responsables de 99% des maux de la Terre.</p>
<ul>
<li><cite>Un évangeliste du PSR</cite></li>
</ul>
</blockquote>
<p>Troisième argument de choix en Go : la <strong>simplicité de parallélisation</strong>.
Personne ne viendra te dire <em>“ça c’est synchrone, sry bro.”</em> ou <em>“ça c’est
asynchrone, callback it bitch.”</em>. Tout repose sur le mot clef qui a donné son
nom au langage (ou l’inverse) <code>go</code>. Tu peux te faire un <code>go myFunc()</code> et paf !
Tout ce qui est appelé dans myFunc() saute sur un thread séparé. Et pour gérer
la synchronicité entre plusieurs thread il y a un mécanisme de canaux. Ce sont
des files FIFO (the First In is the First Out) dont la lecture est bloquante
(il existe des techniques évoluées pour faire du polling, cf
<a href="http://tour.golang.org/#68">gotour#68</a>).</p>
<p>Pour finir, cerise sur le gateau, <strong>Go compile vite</strong>, extrêment vite, et ça va
sauver ton intégrité mentale sur les gros projets. Par contre c’est foutu pour
tes pauses cafés aux prétextes douteux.</p>
<h2 id="let-s-go-nojoke-siriouz-bizness-">Let’s Go (#nojoke, siriouz bizness)</h2>
<p>On va partir du principe que tu as Go et Revel prêts pour la baston. On attaque
direct à sec par le classique “revel new” puisqu’on va partir de la structure de
base.</p>
<pre><code class="lang-shell">$ revel <span class="hljs-keyword">new</span> github.com/OwlyCode/PutainDeProjet
</code></pre>
<p>Là théoriquement, tu te retrouves avec la structure par défaut du boilerplate
revel, quelque chose comme ça:</p>
<ul>
<li>app<ul>
<li>controllers</li>
<li>views</li>
</ul>
</li>
<li>conf</li>
<li>messages</li>
<li>public</li>
<li>tests</li>
</ul>
<p>C’est là qu’on se met au boulot. On a de quoi faire un site complet avec ça mais
 aucune trace de gestion de base de données là dedans. On commence donc par
 créer un dossier <code>app/modules</code> et un sous dossier <code>app/modules/mongo</code>. C’est
 dans ce dossier que va se trouver notre gestionnaire de connexion à mongoDB.
 En fait ce n’est rien de plus qu’un binding entre Revel et Mgo. La technique
 utilisée pour brancher ce binding côté Revel est celle des
 <a href="http://robfig.github.io/revel/manual/interceptors.html">interceptors</a>.</p>
<pre><code class="lang-go"><span class="hljs-keyword">package</span> mongo

<span class="hljs-keyword">import</span> (
    <span class="hljs-string">"github.com/robfig/revel"</span>
    <span class="hljs-string">"labix.org/v2/mgo"</span>
    <span class="hljs-string">"sync"</span>
)

<span class="hljs-comment">// Extension du controlleur.</span>
<span class="hljs-keyword">type</span> Mongo <span class="hljs-keyword">struct</span> {
    *revel.Controller
    MongoSession  *mgo.Session
    MongoDatabase *mgo.Database
}

<span class="hljs-comment">// Stockage global de la session dont la visibilité est restreinte au package.</span>
<span class="hljs-keyword">var</span> session *mgo.Session

<span class="hljs-comment">// Singleton</span>
<span class="hljs-keyword">var</span> dial sync.Once

<span class="hljs-comment">// Renvoie la session mgo en cours, si aucune n'existe, elle est créée.</span>
<span class="hljs-keyword">func</span> GetSession() *mgo.Session {

    host, _ := revel.Config.String(<span class="hljs-string">"mongo.host"</span>)

    <span class="hljs-comment">// Grâce au package sync cette fonction n'est appelée</span>
    <span class="hljs-comment">// qu'une seule fois et de manière synchrone.</span>
    dial.Do(<span class="hljs-keyword">func</span>() {
        <span class="hljs-keyword">var</span> err error
        session, err = mgo.Dial(host)
        <span class="hljs-keyword">if</span> err != <span class="hljs-constant">nil</span> {
            <span class="hljs-built_in">panic</span>(err)
        }
    })

    <span class="hljs-keyword">return</span> session
}

<span class="hljs-comment">// Alimente les propriétés affectées au controlleur en clonant la session mongo.</span>
<span class="hljs-keyword">func</span> (c *Mongo) Bind() revel.Result {
    <span class="hljs-comment">// Oublie pas de mettre mongo.database dans le app.conf, genre "localhost"</span>
    databaseName, _ := revel.Config.String(<span class="hljs-string">"mongo.database"</span>)

    c.MongoSession = GetSession().Clone()
    c.MongoDatabase = c.MongoSession.DB(databaseName)

    <span class="hljs-keyword">return</span> <span class="hljs-constant">nil</span>
}

<span class="hljs-comment">// Ferme un clone</span>
<span class="hljs-keyword">func</span> (c *Mongo) Close() revel.Result {

    <span class="hljs-keyword">if</span> c.MongoSession != <span class="hljs-constant">nil</span> {
        c.MongoSession.Close()
    }

    <span class="hljs-keyword">return</span> <span class="hljs-constant">nil</span>
}

<span class="hljs-comment">// Fonction appelée au chargement de l'application.</span>
<span class="hljs-comment">// Elle effectue un appel a notre fonction Bind avant</span>
<span class="hljs-comment">// chaque execution du controlleur.</span>
<span class="hljs-keyword">func</span> init() {
    revel.InterceptMethod((*Mongo).Bind, revel.BEFORE)
    revel.InterceptMethod((*Mongo).Close, revel.AFTER)
    <span class="hljs-comment">// On veut aussi fermer le clone si le controlleur plante.</span>
    revel.InterceptMethod((*Mongo).Close, revel.PANIC)
}
</code></pre>
<p>On a créé notre connexion à mongo, mais maintenant on va aussi l’utiliser. Dans
le contrôleur, rien de plus simple :</p>
<pre><code class="lang-go">import (
    <span class="hljs-string">"github.com/robfig/revel"</span>
    <span class="hljs-string">"github.com/OwlyCode/PutainDeProjet/app/modules/mongo"</span>
)

type AppController struct {
    *revel.Controller
    mongo.Mongo // Le controlleur doit étendre notre type Mongo.
}

func (c *AppController) Index() revel.Result {
    usersCollection := c.MongoDatabase.C(<span class="hljs-string">"users"</span>)
    // tu peux maintenant manipuler ta mgo.Collection.
    // [ <span class="hljs-keyword">...</span> ]
}
</code></pre>
<p>Mais tu peux aussi l’appeler ailleurs dans le projet, par exemple dans un autre
module :</p>
<pre><code class="lang-go">import (
    <span class="hljs-string">"github.com/OwlyCode/PutainDeProjet/app/modules/mongo"</span>
)

func DoStuff(user *models.User) {
    session := mongo.GetSession()
    defer session.Close() // Oublie pas de fermer le robinet à la fin!

    // tu peux maintenant manipuler ta mgo.Session.
    // [ <span class="hljs-keyword">...</span> ]
}
</code></pre>
<p><strong>C’est bien beau de copier coller mais …</strong></p>
<p>… tu te demandes certainement pourquoi on a créé un dossier <code>app/modules</code>, si
c’est pour n’y mettre qu’un sous dossier mongo dedans. Et c’est une très bonne
question. En fait, notre dossier mongo représente un module du projet bien
délimité. A l’avenir, si tu veux aussi brancher du mysql, et bien y a juste à
créer <code>app/modules/mysql</code>. Rien ne change pour l’existant et tu ne pollues pas
la racine de ton projet. L’autre avantage c’est qu’en un coup d’oeil dans ce
dossier tu as un aperçu direct des features de l’application.</p>
<p>Enfin, l’approche module, c’est aussi un gage de MVC. Admettons qu’on veuille
coder une application de facturation, il nous suffit de créer un dossier
<code>app/modules/invoicing</code> et de travailler dans ce dossier sur toute la partie
métier. Comme par exemple le calcul des totaux, le calcul de la TVA etc… Grâce
 à cette approche, on garde des contrôleurs très fins et restreints à ce que
 doit être leur rôle premier : faire communiquer le modèle et la vue.</p>
<h2 id="mod-les-globaux-mod-les-locaux">Modèles globaux, modèles locaux</h2>
<p>J’ai évoqué plus haut dans la liste des technos une feature hyper sexy de mgo :
le mapping des documents mongodb en json sur les types struct. Ce qui veut dire
qu’avec mgo, on peut définir des modèles bien structurés. Certains seront
communs à toute l’application, par exemple un utilisateur, mais d’autres seront
spécifiques à un module, comme par exemple une facture.</p>
<p>Une bonne pratique est d’approcher le rangement des modèles selon cette
structure:</p>
<ul>
<li>app<ul>
<li>controllers</li>
<li><strong>models</strong></li>
<li>modules<ul>
<li>invoicing<ul>
<li>engine</li>
<li><strong>models</strong></li>
</ul>
</li>
<li>mongo</li>
</ul>
</li>
<li>views</li>
</ul>
</li>
<li>conf</li>
<li>messages</li>
<li>public</li>
<li>tests</li>
</ul>
<p>Le but du jeu évidemment c’est d’avoir le moins de modèles globaux possibles.
Idéalement, si le dossier <code>app/models</code> n’existe pas ce n’est pas plus mal. Mais
attention à ne pas chercher à l’éliminer au prix de la modularité du code. Il
vaut mieux avoir un modèle explicitement déclaré comme global plutot que de
l’isoler dans un module et de rendre tous les autres modules du projet
dépendants de ce dernier.</p>
<p>Pourquoi c’est important ? C’est surtout parce que ça pose les bonnes questions
et amène les bonnes remarques. “Vais-je avoir besoin de ce modèle réellement
PARTOUT ?”, “C’est étrange j’ai créé deux modules mais au final je passe mon
temps à faire des va-et-vient de l’un à l’autre… Peut être que je devrais les
fusionner.” ou encore “90% de mon projet se trouve dans un seul module, il y a
peut être un problème.”. Mais au delà de ça, ça te permets d’isoler des modules
quasi autonomes (deux ou trois coups d’abstraction avec des interfaces et ça
roule). Tu pourras plus tard les sortir de ton projet si par exemple tu veux les
réutiliser sur un autre (svn include pour les ancêtres, git submodules pour les
autres).</p>
<h2 id="pour-aller-plus-loin">Pour aller plus loin</h2>
<p>Isoler distinctement le gestionnaire de connexion, la logique métier et les
modèles dans des modules est une première étape vers une architecture propre et
évolutive. Tu peux même pousser ça plus loin en utilisant des interfaces comme
je l’ai brièvement mentionné un peu plus tôt, c’est même d’ailleurs ce que je te
conseille. Si tu veux creuser ce sujet là tu trouveras pas mal de monde qui s’y
intéresse en fouinant sur le
<a href="https://groups.google.com/forum/#!forum/Golang-Nuts">groupe de discussion des utilisateurs golang</a>.
Tu as par exemple ce gars là qui a
<a href="https://groups.google.com/forum/#!searchin/Golang-Nuts/interface/golang-nuts/Q0WhF7vhw5Q/T1tSJHT4aCoJ">remplacé sa dépendance à la librairie mgo par des interfaces</a>
pour éviter d’inclure le package a chaque fois et faciliter ses tests. Tu peux
envisager de faire la même chose pour découpler tes modèles et la logique métier
.</p>
<p>En attendant il ne me reste qu’à te souhaiter une bonne coding night, tu as
toutes les armes nécessaires pour gérer mongo dans ton projet revel. ;-)</p>

]]></description><pubDate>Mon, 11 Nov 2013 00:00:00 GMT</pubDate><link>http://putaindecode.fr/posts/backend/golang-structurer-revel-et-mgo/</link><guid isPermaLink="true">http://putaindecode.fr/posts/backend/golang-structurer-revel-et-mgo/</guid></item><item><title>Vagrant, enlarge your VM</title><description><![CDATA[[
<p>Vagrant, au cas où tu ne connaîtrais pas encore, permet de fournir des
environnements de développements reproductibles, facilement configurables et
qui se partagent entre les membres de l’équipe. En gros, tu vas pouvoir décrire
et configurer des machines virtuelles (VM) depuis un seul fichier texte,
le <code>Vagrantfile</code>.  Plutôt pratique pour avoir un environnement de dev
équivalent à celui de la prod. Et tout cela avec un processus simplifié
à l’extrême.</p>
<h1 id="et-c-est-pour-qui-le-beau-joujou-">Et c’est pour qui le beau joujou ?</h1>
<p>Vagrant s’adresse principalement à toi, mais aussi à un public
de <strong>développeurs</strong> qui souhaitent pouvoir mettre en place rapidement
un environnement de dev avec une machine virtuelle (genre apache-php-<em>sql)
sans y passer trop de temps.
Vagrant, c’est aussi pour des <em>*devops</em></em> qui voudraient tester la mise en
place et le provisioning de leur infra.
Dans la doc, ils disent même que ça s’adresse aux designers
(pour dire si c’est simple) mais faut pas déconner non plus,
on a jamais vu un designer dégainer une console :)</p>
<p>Globalement le workflow vagrant se résume à 2-3 commandes,</p>
<ol>
<li><code>vagrant init</code> au début du projet
Puis</li>
<li><code>vagrant up</code> pour lancer la VM.</li>
<li><code>vagrant halt</code>pour l’arrêter.</li>
</ol>
<h1 id="etape-1-vagrant-init">Etape 1 - vagrant init</h1>
<p>Vagrant fournit un support pour les principales plateformes de virtualisation,
appelées Provider dans la langue de Justin Bieber et avec par défaut celui
pour virtualbox.  Et  cerise sur le clafoutis, tu as aussi la possibilité
de configurer / provisionner tes box avec des scripts Chef ou Puppet
(ou juste un script shell si t’es old-school \o/ ).</p>
<p>Bon, je suppose que c’est encore un peu flou, alors voilà comme ça se présente.
Une fois installé ( <a href="http://downloads.vagrantup.com/">http://downloads.vagrantup.com/</a> ), tu devrais avoir
une nouvelle commande de dispo.
Alors dégaine ton terminal et envoie un <code>vagrant init</code>. Ça devrait créer
un fichier <code>Vagrantfile</code>  qui va décrire ta machine virtuelle
(ne t’inquiète pas, c’est juste écrit en Ruby).
En gros de quelle box de base tu pars, comment tu la configures (réseaux,
dossier partagé entre la VM et le Host, ta machine réelle) et comment tu
la provisionnes (via un shell, avec un script Puppet…)</p>
<h2 id="la-config-de-la-box">La config de la box</h2>
<p>Ensuite voilà les quelques points à paramétrer.</p>
<ul>
<li><code>config.vm.box = &quot;base&quot;</code>pour spécifier le nom d’une box préalablement
téléchargée.</li>
<li><code>config.vm.box_url = &quot;http://domain.com/path/to/above.box&quot;</code> Tu remplaces
par l’url de la box de tes rêves. Tu peux trouver une liste assez complètes
de box plus ou moins configurées sur le site <a href="http://www.vagrantbox.es/">http://www.vagrantbox.es/</a>
( ProTip™: Choisis bien le provider correspondant à ton gestionnaire de VM)</li>
<li><code>config.vm.network :forwarded_port, guest: 80, host: 8080</code> Pratique
pour accéder au serveur qui tourne sur la VM. Après tu retrouves un peu
les mêmes options de config réseaux qu’avec virtualbox
(réseaux privés, connexion par pont…)</li>
<li><code># config.vm.synced_folder &quot;../data&quot;, &quot;/vagrant_data&quot;</code> Avec ça,
tu vas pouvoir ajouter un répertoire qui sera partagé
avec ta machine virtuelle.
Par défaut, Vagrant te permet d’accéder au répertoire courant
depuis <code>/home/vagrant</code> dans la VM.</li>
</ul>
<h2 id="le-provisioning-de-box">le provisioning de box</h2>
<p>Alors attention, c’est un des trucs cools avec vagrant. Avant, quand tu
voulais te monter une VM pour travailler, il fallait aussi la configurer,
installer les bonnes versions de chaque brique que le projet utilisé. Ça‎
pouvait être long, pénible, et surtout prendre du temps.
Avec Vagrant, tu peux automatiser cette partie, soit en utilisant simplement
un script, soit avec un moyen moderne comme Chef ou Puppet. Et si jamais t’as
besoin d’un truc particulier, une config que tu utilises souvent, tu peux
toujours packager la box que t’as configuré avec amour pour pouvoir la
réutiliser dès que l’occasion se présente. Sinon tu peux déjà trouver pas mal
de box déjà prêtes à l’emploi, avec ou sans support pour puppet, chef…</p>
<p>La suite du fichier contient des exemples de type de provisioning
(Puppet, Chef solo ou Chef server)
Et si jamais tu souhaites lancer un script de provisioning :</p>
<pre><code class="lang-ruby">Vagrant.configure(<span class="hljs-string">"2"</span>) <span class="hljs-built_in">do</span> |config|
  config.vm.provision <span class="hljs-string">"shell"</span>, path: <span class="hljs-string">"provision.sh"</span>
<span class="hljs-function"><span class="hljs-keyword">end</span></span>
</code></pre>
<blockquote>
<p>Vagrant te permet aussi de créer tes propres box déjà provisionnées via
la commande vagrant package. C’est assez pratique quand tu dois
télécharger-compiler-installer tout l’internet</p>
</blockquote>
<h1 id="etape-2-vagrant-up">Etape 2 - vagrant up</h1>
<p>Bon, la première fois risque de prendre du temps, parce que vagrant
va télécharger ta box, puis lancer le provisioning. Profites-en pour faire
un tour sur <a href="http://vim-adventures.com/">http://vim-adventures.com/</a> et jouer un peu en attendant.</p>
<p>Une fois terminé, tu as maintenant une box dispo avec laquelle travailler.</p>
<h1 id="etape-3-joie-o-">Etape 3 - Joie \o/.</h1>
<p>Je pensais faire une troisième partie sur comment arrêter la VM mais
ça présente pas vraiment d’intérêt car ça tient en une ligne de commande.</p>
<p>Bref, le point important de tout ça, c’est que les autres relous de ton équipe
ne pourront plus dire que pourtant ça marche bien chez eux, et qu’ils
comprennent pas, c’est vraiment étrange… enfin sauf s’ils sont
de mauvaise foi :)</p>
<ul>
<li>L’intégrateur n’aura plus à se taper 14 installations de trucs en
ligne de commande qu’il ne retient jamais, pour rajouter un bout de css
ou de js.
(ProTip™: là, ça rentre sur un post-it !)</li>
<li>Le dev backend n’aura plus à pleurer quand on lui demande de remettre le nez
dans une projet vieux de 2 ans avec que des versions de php / ruby ou mysql
dépassées qui vont casser la superbe config qu’il a mis 1 semaine à fignoler
avec les dernières techno à la mode.</li>
<li>l’admin sys pourra packager les box de chaque projets, provisionnées
et configurées et pour éviter d’avoir à configurer les postes des autres
dev à chaque changement de projet.</li>
</ul>
<h1 id="quelques-commande-pratiques">Quelques commande pratiques</h1>
<blockquote>
<p><code>vagrant ssh</code> te permet de te connecter en mode terminal
<code>vagrant status</code> pour les têtes <del>à claques</del> en l’air</p>
</blockquote>
<h1 id="quelques-liens">Quelques liens</h1>
<ul>
<li><a href="http://docs.vagrantup.com/v2/">la documentation officielle de <del>viagra</del> vagrant</a></li>
<li><a href="https://github.com/putaindecode/propositions-de-posts/issues/4">Virtualisation sur OSx et accès à localhost</a></li>
<li><a href="http://jolicode.com/blog/cuisinez-vos-serveurs-comme-un-chef-premiere-partie">Cuisinez vos serveurs comme un Chef – Première partie</a></li>
</ul>

]]></description><pubDate>Fri, 08 Nov 2013 00:00:00 GMT</pubDate><link>http://putaindecode.fr/posts/env/vagrant-enlarge-your-vm/</link><guid isPermaLink="true">http://putaindecode.fr/posts/env/vagrant-enlarge-your-vm/</guid></item><item><title>HTML ? Hâche-Thé-Aime-Elle vous dites ?</title><description><![CDATA[[
<p>Ahh, le HTML. LE <a href="http://fr.wikipedia.org/wiki/HTML">H.T.M.L</a>. Sacré langage hein ?</p>
<p>On le connait tous ce fameux truc qu’on retrouve dans pas mal d’URLs : <code>.html</code>.
Oui d’accord par le passé on avait l’extension de radin <code>.htm</code>, mais elle n’a
clairement pas duré.</p>
<p>Vous vous demandez déjà ce qu’il-y-a à raconter sur l’HTML peut être ? Et bien,
je ne suis pas là pour vous apprendre toutes les balises, leurs enfants, parents,
les cousins cousines, patati patata… Ah ça non, j’ai autre chose à faire,
et vous aussi. Et si c’est ce que vous cherchez, vous trouverez ce qu’il vous
faut sur <a href="http://docs.webplatform.org/wiki/html/elements">tout</a>
<a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element">un</a>
<a href="http://www.w3.org/html/wg/drafts/html/CR/dom.html#elements">tas</a>
<a href="http://en.wikipedia.org/wiki/HTML_element">d’autres</a>
<a href="http://www.vectorskin.com/referentiels-standards-w3c/balises-html5/">sites</a>.</p>
<p>Ce que je vais faire par contre, c’est tenter de partager un document sérieux
(dans le fond hein) avec tout pleins de conseils super pertinents pour que vous
écriviez de l’HTML comme personne.
Non je déconne. En fait, ça va être la grosse marrade avec les trucs
les plus nazes que je peux vous raconter. C’est parti mon jQuéri.</p>
<h2 id="l-ancien-testament">L’ancien testament</h2>
<p>Si vous avez ouvert ne serait-ce que quelques documents HTML dans votre vie,
vous avez du croiser ce qu’on appelle un <a href="http://fr.wikipedia.org/wiki/Doctype">doctype</a>
qui ressemble à ça:</p>
<pre><code class="lang-html"><span class="hljs-doctype">&lt;!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
   "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"&gt;</span>
</code></pre>
<p>Vous pourrez remarquer dans ce <del>petit</del> gros bout de code bien relou qu’il y’a
une <a href="http://fr.wikipedia.org/wiki/Uniform_Resource_Locator">URL</a>:
c’est tout simplement la DTD (doctype) du langage en question.
Avec les spécifications pour la validation, toussa toussa…
Si vous avez 2 minutes, allez jeter un coup d’oeil.</p>
<p>Je ne vais pas vous le cacher, et même si en théorie, par héritage de SGML/XML
ça part d’une bonne intention, dans la pratique ça sert juste à se toucher la
nouille sur la validation.
Car aujourd’hui HTML (5) n’est clairement plus du XML.</p>
<p>Oui bon ok, moi même à une époque j’ai eu ma passe où je collais ce petit badge
partout dans mes footers:</p>
<figure>
  <a href="http://validator.w3.org/check?uri=referer">
    <img src="http://www.w3.org/Icons/valid-xhtml10"
        alt="Valid XHTML 1.0 Transitional" height="31" width="88" />
  </a>
  <figcaption>Ça pète la classe hein ?</figcaption>
</figure>

<p>Mais bon les conneries, ça va un moment.
Pour info, j’ai du valider le code suivant pour obtenir ce logo:</p>
<pre><code class="lang-html"><span class="hljs-doctype">&lt;!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
   "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"&gt;</span>
 <span class="hljs-tag">&lt;<span class="hljs-title">html</span> <span class="hljs-attribute">xmlns</span>=<span class="hljs-value">"http://www.w3.org/1999/xhtml"</span>&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-title">head</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-title">title</span>&gt;</span> <span class="hljs-tag">&lt;/<span class="hljs-title">title</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-title">head</span>&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-title">body</span>&gt;</span>

<span class="hljs-tag">&lt;/<span class="hljs-title">body</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-title">html</span>&gt;</span>
</code></pre>
<p>Ben dites donc, c’est propre tout ça. Un petit document tout vide mais déjà
bien rempli.
Mais attendez en 2013, on peut pas faire mieux ? Oh si !</p>
<h2 id="le-nouveau-testament">Le nouveau testament</h2>
<pre><code class="lang-html"><span class="hljs-doctype">&lt;!doctype html&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-title">title</span>&gt;</span> <span class="hljs-tag">&lt;/<span class="hljs-title">title</span>&gt;</span>
</code></pre>
<p>Il faut savoir qu’un simple document <em>valide</em>, peut se résumer à ça.
Oui oui mes cocos, ce document est parfaitement valide. Voilà j’voulais vous le
dire. Arrêtez d’utiliser des doctypes dans tous les sens, ça ne sert à rien.
Sachant la qualité du code qu’on trouve sur les internets, les navigateurs
s’arrêtent au parsing lorsqu’ils voient ça <code>&lt;!doctype html</code>
(C’est <a href="http://paulrouget.com/">Paul Rouget</a> qui me l’a dit, je le crois donc
sur parole).
Et après ma petite parenthèse ci dessous, je vais vous expliquer pourquoi.</p>
<p>Car je sais ce que certains vont me rétorquer.</p>
<blockquote>
<p>Oui mais moi monsieur, je valide en <strong>XHTML 1.1 Strict Turbo X Prime Ultra</strong><br />
Puis ton document valide là, il sera valide quand HTML5 sera finalisé…</p>
</blockquote>
<p>Dans un sens ils n’auraient pas tort. Mais dans la pratique, les navigateurs
s’en contre branlent de savoir quel type d’HTML vous utilisez
<small>(à moins que vous aimiez jouer avec la mort et que vous utilisez le
prologue XML lorsque vous servez de l’XHTML…)</small>.
Car quand bien même vous utilisez un doctype à rallonge, il est tout à fait
possible que vous vous chiiez, et que vous laissiez des erreurs.
Oui, l’erreur est humaine…
Puis HTML 5 est déjà bien implémenté dans les grandes lignes. Et ça car il est
presque rétrocompatible.
Vous devriez le comprendre d’ici la fin de cet écrit. Ou pas. Mais je vous le
dit, il a été pensé dans ce sens.</p>
<p>Revenons à la validation. Du coup à quoi ça sert de valider ?
On va voir ça par un exemple digne des plus grands diplômes.</p>
<h2 id="ce-p-fout-la-merde-">Ce <code>&lt;p&gt;</code> fout la merde.</h2>
<p>Prenons le code suivant:</p>
<pre><code class="lang-html"><span class="xml"><span class="vbscript"></span></span><span class="hljs-expression">{{<span class="hljs-variable">include</span> <span class="hljs-string">"src/posts/html/hache-the-aime-elle-vous-dites/notvalid.html.hbs"</span>}}</span><span class="xml"><span class="vbscript"></span></span>
</code></pre>
<p>Certains d’entre vous ont du remarquer la coquille.
Celle-là, mes élèves qui découvrent le HTML me la font à chaque fois lorsqu’ils
codent leur super CV
(super exercice tavu, ils apprécient particulièrement le titre).</p>
<p>Toi là au fond, t’as pas repéré le souci encore ?</p>
<p>Regarde plutôt le rendu:</p>
<iframe
  class="putainde-Post-iframe"
  height="350"
  src="/posts/html/hache-the-aime-elle-vous-dites/notvalid.html">
</iframe>

<blockquote>
<p>WAT ?
ET MON MARGIN BOTTOM KESSIFÉLÀ EN DEUBEULE ?</p>
</blockquote>
<p>Le rapport avec la validation me direz-vous ? Et bien plutôt que de perdre du
temps à comprendre le pourquoi du comment, en validant le code ci dessus,
l’erreur vous est implicitement expliquée
(oui ce code n’a qu’une seule erreur à la validation).</p>
<blockquote>
<p>Line 17, Column 4: <strong>No p element in scope but a p end tag seen.</strong></p>
</blockquote>
<p>Typiquement, il faut savoir comprendre un message d’erreur et savoir lire entre
les lignes. Pas faire “mais monsieur, j’comprends pas là” (d’ailleurs mes élèves
valident tous leur code, pour apprendre sur le tas, c’est une bonne façon).</p>
<p>Celui là nous dit en gros : <em>je ne vois pas d’element <strong>p</strong> à fermer dans le coin</em>.
Ca veut dire que… Ça veut dire que mon <strong>p</strong> ouvert n’est pas reconnu ?
Mais attend qu’est-ce que c’est que cette histoire ?!</p>
<p>Si vous prenez 10 secondes pour inspecter ce code, vous allez vite vous
aperçevoir qu’il est parsé ainsi:</p>
<pre><code class="lang-html"><span class="hljs-tag">&lt;<span class="hljs-title">p</span>&gt;</span>…<span class="hljs-tag">&lt;/<span class="hljs-title">p</span>&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-title">ul</span>&gt;</span>…<span class="hljs-tag">&lt;/<span class="hljs-title">ul</span>&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-title">p</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-title">p</span>&gt;</span>
</code></pre>
<p><em>Mais qu’est-ce que… ? Hein ? Mais ? Quoi ? Comment ?</em></p>
<p>Oui vous avez bien vu. L’HTML est parsé n’importe comment. Enfin non il est parsé
comme il peut, au mieux.
Je pense que là vous commencez à comprendre ?</p>
<p>Ce que j’essaye de vous montrer par là, ce qu’il faut toujours faire attention
entre ce qu’on écrit et ce qu’on pense avoir comme résultat, même avec du
<em>simple</em> HTML.</p>
<p><strong>Bon après j’espère qu’en 2013, vous avez tous le réflexe d’inspecter
l’HTML dès que vous avez un truc bizarre en CSS ou en JavaScript… Si
c’est pas encore le cas, prenez l’habitude.</strong></p>
<h2 id="mais-du-coup-le-navigateur-il-fait-n-importe-quoi-">Mais du coup le navigateur il fait n’importe quoi ?</h2>
<p>Le navigateur essaye clairement de faire au mieux.
Si vous inspectez l’exemple précédent, vous vous apercevrez aussi que je n’ai
mis aucune balise <code>&lt;html&gt;</code>, <code>&lt;head&gt;</code> ou <code>&lt;body&gt;</code>.
Pourquoi ? Ben car le parseur le fait à ma place.
Mais pourquoi il fait ça ?
Tout simplement car on oublie (très - trop ?) souvent de bien écrire.
Comme quand j’écris en.</p>
<p>La balise <a href="https://developer.mozilla.org/fr/docs/Web/HTML/Element/tbody"><code>&lt;tbody&gt;</code></a>
est un bon exemple.
Si vous inspectez vos tableaux HTML, vous verrez vite fait que cette balise, que
quasiment personne ne connait/utilise, est pourtant nécessaire/utile.
Mais du coup, si je me fais une petite requête JavaScript
<code>document.querySelectorAll(&#39;table &gt; tr&#39;)</code>,
il est fort possible que je n’aie pas ce que je souhaite.
<a href="http://codepen.io/MoOx/pen/esFjx">La preuve</a>.</p>
<p>Voyons une autre exemple: mettons nous à la place d’un navigateur si,
alors que je suis en XHTML 1.1 Strict, je lui glisse une balise <code>&lt;center&gt;</code>.</p>
<ul>
<li><p><strong>Cas 1.</strong> Je n’ai pas fait attention au doctype et je veux vraiment une balise
<code>&lt;center&gt;</code> : bah là, rien à dire à part <em>Merci</em>. Le navigateur essaye clairement
de faire au mieux, et dans un cas comme celui là, on ne peut que le remercier.</p>
</li>
<li><p><strong>Cas 2.</strong> Je sais exactement dans quel doctype je suis, j’ai conscience de ce
que je fais: je joue au con, tant pis pour ma gueule !</p>
</li>
</ul>
<p>Dans tous les cas, le navigateur va laisser passer cette balise au cas où que.
Puis bon faut avouer que c’est super pratique cette balise hein ?
Comme <code>&lt;blink&gt;</code> et <code>&lt;marquee&gt;</code> quoi. ❤</p>
<figure>
  <img src="../../../images/posts/memes/canthandlemyswag.gif" alt="Can&#39;t handle my swag">
  <figcaption><marquee>Marquee for the win.</marquee></figcaption>
</figure>

<h2 id="note-de-service">Note de service</h2>
<p>S’il vous plaît mesdames messieurs, lorsque vous faites du CSS inline, ou que
vous incorporez un JavaScript, arrêtez vous à des choses simples,
qui fonctionnent :</p>
<ul>
<li><p><code>&lt;style&gt;</code> suffit. Pas besoin de mettre un type, un langage etc. Et ça vous
évitera des <a href="http://codepen.io/MoOx/pen/sEzuJ">prises de têtes à la con</a>.
Puis vous avez déjà utilisé autre chose que du CSS vous ?!</p>
</li>
<li><p><code>&lt;script&gt;</code>, idem, même sur IE 6.
Pareil que précédement, pas besoin de mettre un hideux
<code>&lt;script type=&quot;text/javascript&quot; language=&quot;JavaScript 1.1&quot;&gt;</code>.
La moindre faute de frappe ne pardonne pas.
Aucun intêret de se fatiguer, sauf si votre <a href="https://code.google.com/p/ruby-in-browser/">script n’est pas du JavaScript</a>.</p>
</li>
</ul>
<h2 id="le-mot-de-la-fin">Le mot de la fin</h2>
<p>Ne soyez jamais sûr de vous, que ce soit pour écrire de l’HTML ou faire une mise
en prod’ un vendredi soir à <a href="http://www.miximum.fr/le-bug-de-17h30.html">17h30</a>.
Faites pas les malins. Ne sous-estimez pas HTML.
Si ça merde quelque part, vérifiez plus loin que le bout de votre nez, que votre
règle CSS qui marche pas, ou votre morceau de JavaScript buggé.</p>
<h2 id="-aller-plus-loiiin-allez-plus-haaauuut-https-www-youtube-com-watch-v-bcylqudsn5g-t-39s-"><a href="https://www.youtube.com/watch?v=BCYLQUdsN5g&amp;t=39s">Aller plus loiiin, allez plus haaauuut… !</a></h2>
<ul>
<li><a href="https://github.com/necolas/idiomatic-html" lang="en">idiomatic-html</a>
(<a href="http://fr.wikipedia.org/wiki/Idiomatique">ceci n’est pas une contraction d’<em>idiot</em> et d’<em>automatique</em></a>).</li>
<li><a href="https://github.com/necolas/idiomatic-css" lang="en">idiomatic-css</a> (traduction incluse)</li>
<li>Validation automatique dans un workflow Grunt:<ul>
<li><a href="https://github.com/praveenvijayan/grunt-html-validation">praveenvijayan/grunt-html-validation</a></li>
<li><a href="https://github.com/jzaefferer/grunt-html">jzaefferer/grunt-html</a> (basé sur validator.nu)</li>
</ul>
</li>
</ul>

]]></description><pubDate>Thu, 07 Nov 2013 00:00:00 GMT</pubDate><link>http://putaindecode.fr/posts/html/hache-the-aime-elle-vous-dites/</link><guid isPermaLink="true">http://putaindecode.fr/posts/html/hache-the-aime-elle-vous-dites/</guid></item><item><title>Versionner avec Git</title><description><![CDATA[[
<p>Chez Putain de Code, on aime se servir de <a href="http://git-scm.com/">Git</a> (et de GitHub, mais
c’est une autre histoire), même si certains d’entre nous (comme Lionel) ne s’en
servent pas forcément bien.</p>
<p>Pour éviter ce genre de mésaventures, on s’est dit qu’on allait consacrer une
série d’articles à ce merveilleux gestionnaire de versions, et de vous en faire
profiter par la même occasion.</p>
<p>Et si Git permet de faire à peu près ce qu’on veut sur un dépôt, vous verrez
qu’on peut assez facilement réparer ses erreurs (et même celles des autres
parfois !).</p>
<h2 id="c-est-quoi-git-">C’est quoi Git ?</h2>
<p>Si vous êtes un développeur un tant soit peu consciencieux, vous utilisez un
gestionnaire de versions pour suivre l’évolution de votre code. Non,
<a href="http://roland.entierement.nu/blog/2008/01/22/cpold-la-poudre-verte-du-suivi-de-versions.html">CPOLD</a> n’est pas un gestionnaire de versions.</p>
<p>Git, c’est un gestionnaire de versions décentralisé, aussi connu sous le terme
de DVCS (pour Distributed Version Control System) pour les amateurs.</p>
<p>Le terme <em>distribué</em> est très important car c’est ce qui le différencie d’autres
gestionnaires historiquement plus connus comme Subversion (SVN) ou le vénérable
CVS.</p>
<p>Ça veut dire que chaque développeur possède sa propre copie du dépôt, chez lui,
localement, contraîrement à un gestionnaire centralisé ou tout est… centralisé
sur un même serveur (merci Captain Obvious).</p>
<p>Git est principalement utilisable en ligne de commande, mais il existe des
interfaces graphiques sous les principaux OS du marché (OS X, Linux, Windows).
Ici on va traiter de la ligne de commande, car c’est l’arme de base du bon
développeur.</p>
<p>Je vous passe l’installation, référez-vous à la documentation officielle pour
cette partie. (Ça se résume souvent à un <code>nom-du-package-manager install git</code>)</p>
<h2 id="comment-a-marche-">Comment ça marche ?</h2>
<p>Avant d’attaquer la partie pratique, on va s’attarder un peu à comment Git
fonctionne, parce qu’à mon sens c’est essentiel pour comprendre rapidement ce
qu’il est possible de faire et pour se construire un modèle mental des
opérations.</p>
<p>Dans Git les commits sont tous reliés avec leur(s) parent(s) comme les maillons
d’une chaîne qui pourrait avoir des bifurcations. Chaque commit stocke des
informations sur l’état du dépôt à un instant donné (l’état complet, pas
uniquement un diff).</p>
<p>On construit cette chaîne et ses bifurcations en créant des commits, en
branchant et en fusionant une branche dans une autre.</p>
<p>Enfin, une dernière chose que vous devez garder en tête c’est qu’un commit est
définitif dans le sens ou on ne pourra jamais modifier son contenu (on pourra
par contre le remplacer par un autre). Comme il est unique, il a un numéro qui
est un haché <code>SHA1</code> de diverses informations.</p>
<p>Ces <code>SHA1</code> sont utilisé à foison, habituez-y vous !</p>
<p>Voilà, maintenant sortons nous les doigts et regardons comment ça marche
concrètement.</p>
<h2 id="cr-er-ou-r-cup-rer-un-repo">Créer ou récupérer un repo</h2>
<p>Il y a deux manières de créer un dépôt Git : soit on en veut un tout neuf et on
utilise <code>git init</code>, soit on veut cloner un dépôt déjà existant et on utilise le
bien nommé <code>git clone</code>.</p>
<p>Appellé sans argument, <code>git init</code> initialise un dépôt dans le dossier courant,
on peut lui passer un nom de dépôt en argument pour le créer dans un
sous-dossier spécifique du dossier courant.</p>
<p>Du côté de <code>git clone</code>, on va passer l’adresse d’un dépôt, et optionnellement un
nom local pour le dépôt. Il va récupérer le dépôt à l’adresse spécifiée (c’est
bien foutu hein ?) puis le mettre soit dans un dossier du même nom soit dans un
dossier du nom spécifié en dernier argument.</p>
<p>Par exemple, si je veux cloner le dépôt du site :</p>
<pre><code class="lang-bash"><span class="hljs-variable">$ </span>git clone <span class="hljs-symbol">https:</span>/<span class="hljs-regexp">/github.com/putaindecode</span><span class="hljs-regexp">/website.git</span>
</code></pre>
<p>Ça va créer un dossier <code>website</code> avec le contenu du dépôt.</p>
<p><code>clone</code> accepte plusieurs types d’adresse : HTTP(S), SSH, protocole Git dédié et
même des chemins locaux pour cloner un dépôt situé ailleurs sur le système de
fichiers.</p>
<p>Pour la suite, il va falloir se placer dans un dépôt avec le petit <code>cd</code> qui va
bien pour lancer les vraies commandes intéressantes de Git.</p>
<h2 id="premiers-commits">Premiers commits</h2>
<p>Pour commencer à s’amuser, écrivez un bout de code dans un fichier et
sauvegardez le :</p>
<pre><code class="lang-bash"><span class="hljs-variable">$ </span>cat &gt; putain_de_hello_world.rb
puts <span class="hljs-string">"Hello, putain de codeur !"</span>
^<span class="hljs-constant">D</span>
</code></pre>
<p>On va tout se suite introduire l’un des concepts déroutants de Git, <em>l’Index</em>.
Git utilise trois zones distinctes pour les fichiers : le dossier de travail
(<em>Working Dir</em>) qui contient les fichiers dans leur version actuelle, <em>l’Index</em>
qui permet de stocker les modifications et <code>HEAD</code> qui pointe vers le dernier
commit.</p>
<p>L’idée, c’est qu’on peut modifier les fichiers comme on le souhaite, et
constuire le commit avec seulement les modifications que l’on souhaite voir
apparaître.</p>
<p>Cette possibilité permet d’avoir des commits atomiques, c’est à dire qui
introduisent une modification simple. Ça évite de se retrouver avec un commit
mammouth qui change tout le programme d’un coup et qui est un enfer pour le
futur développeur qui revient sur le code et qui cherche à comprendre la logique
de sa construction. Ce développeur, c’est vous dans 1 ou 2 semaines.</p>
<p>Pour info, vous verrez parfois <em>l’Index</em> appellé <em>Staging Area</em>, ou encore
<em>Cache</em>.</p>
<p>Git fournit des commandes pour passer les fichiers d’un état à l’autre. Elles
sont certes parfois un peu obscures, mais dans l’ensemble c’est pas si
difficile.</p>
<p>Dans notre cas, notre fichier n’est même pas encore suivi par Git ! Vous pouvez
vérifier ça en utilisant <code>git status</code>, dont vous ne pourrez bientôt plus vous
passer :</p>
<pre><code class="lang-bash">$ git status
<span class="hljs-preprocessor"># Sur la branche master</span>
<span class="hljs-preprocessor">#</span>
<span class="hljs-preprocessor"># Validation initiale.</span>
<span class="hljs-preprocessor">#</span>
<span class="hljs-preprocessor"># Fichiers non suivis:</span>
<span class="hljs-preprocessor">#   (utilisez "git add &lt;fichier&gt;..." pour inclure dans ce qui sera validé)</span>
<span class="hljs-preprocessor">#</span>
<span class="hljs-preprocessor">#    putain_de_hello_world.rb</span>
Aucune modification indexée mais des fichiers non suivis sont présents (utilisez <span class="hljs-string">"git add"</span> pour les suivre)
</code></pre>
<p>Pour pallier celà, on utilise <code>git add</code> pour l’ajouter direct à l’index.</p>
<p>Dans notre cas, ça donne <code>git add putain_de_hello_world.rb</code></p>
<p>On peut utilise <code>git add</code> pour ajouter des dossiers entiers, des motifs, … Mais
soyez vigilants, c’est une bonne source d’erreurs souvent chiantes.</p>
<p>Vous pouvez vérifier que <code>git add</code> a bien marché avec la commande <code>git status</code>,</p>
<pre><code class="lang-bash">$ git status
<span class="hljs-preprocessor"># Sur la branche master</span>
<span class="hljs-preprocessor">#</span>
<span class="hljs-preprocessor"># Validation initiale.</span>
<span class="hljs-preprocessor">#</span>
<span class="hljs-preprocessor"># Modifications qui seront validées :</span>
<span class="hljs-preprocessor">#   (utilisez "git rm --cached &lt;fichier&gt;..." pour désindexer)</span>
<span class="hljs-preprocessor">#</span>
<span class="hljs-preprocessor">#    nouveau : putain_de_hello_world.rb</span>
<span class="hljs-preprocessor">#</span>
</code></pre>
<p>Ok c’est prêt ! On lance maintenant <code>git commit</code> pour créer notre premier commit
(pas con le <em>naming</em> de la commande hein ?). Si tout se passe bien vous devriez
avoir un éditeur qui s’ouvre pour écrire un message de commit. Prenez l’habitude
de décrire votre changement sur la première ligne succintement et, si vous avez
besoin de détails, sautez une ligne et détaillez les modifications.</p>
<p>Un petit <code>git status</code> nous confirme qu’on s’est pas foiré (la preuve, tout est
propre) :</p>
<pre><code class="lang-bash"><span class="hljs-variable">$ </span>git status
<span class="hljs-comment"># Sur la branche master</span>
rien à valider, la copie de travail est propre
</code></pre>
<h2 id="inspecter">Inspecter</h2>
<p>Bon, c’est bien beau de commiter, mais à un moment on arrive sur un projet en
cours et on aimerait bien savoir où on en est. Pour ça vous pouvez utiliser un
outil graphique (il y en a pour <a href="https://wiki.gnome.org/Apps/Gitg">Linux</a>, <a href="http://gitx.frim.nl/">OS X</a> et même sûrement
Windows) ou retrousser vos poils de barbe et sortir le bon vieux <code>git log</code>.</p>
<p>C’est un vrai couteau-suisse qui va vous permettre d’inspecter tout l’historique
de votre dépôt, avec des options en veux-tu en voilà pour personnaliser
l’affichage.</p>
<p>Un <code>git log</code> basique ça ressemble à ça :</p>
<pre><code class="lang-bash">$ git log
<span class="hljs-operator"><span class="hljs-keyword">commit</span> <span class="hljs-number">8120</span>de7b7139e46b9cbc1c3ee89a02962dbc198e
Author: madx &lt;madx+github@yapok.org&gt;
<span class="hljs-keyword">Date</span>:   Mon Nov <span class="hljs-number">4</span> <span class="hljs-number">23</span>:<span class="hljs-number">28</span>:<span class="hljs-number">11</span> <span class="hljs-number">2013</span> +<span class="hljs-number">0100</span>

    Premier <span class="hljs-keyword">commit</span></span>
</code></pre>
<p>Oui, c’est le commit que je viens de faire dans la partie précédente. Comment
j’en suis sûr ? Car je peux utiliser <code>git show</code> pour afficher les détails d’un
objet Git (il n’y a pas que des commits, mais on verra ça une prochaine fois).</p>
<p><code>git show</code> prend en argument le fameux <code>SHA1</code> du commit :</p>
<pre><code class="lang-bash">$ git show <span class="hljs-number">8120</span>de7b7139e46b9cbc1c3ee89a02962dbc198e
commit <span class="hljs-number">8120</span>de7b7139e46b9cbc1c3ee89a02962dbc198e
<span class="hljs-label">Author:</span> madx &lt;madx+github@yapok<span class="hljs-preprocessor">.org</span>&gt;
<span class="hljs-label">Date:</span>   Mon Nov <span class="hljs-number">4</span> <span class="hljs-number">23</span>:<span class="hljs-number">28</span>:<span class="hljs-number">11</span> <span class="hljs-number">2013</span> +<span class="hljs-number">0100</span>

    Premier commit

diff --git a/putain_de_hello_world<span class="hljs-preprocessor">.rb</span> b/putain_de_hello_world<span class="hljs-preprocessor">.rb</span>
new file mode <span class="hljs-number">100644</span>
index <span class="hljs-number">0000000.</span><span class="hljs-preprocessor">.ded</span>37dc
--- /dev/null
+++ b/putain_de_hello_world<span class="hljs-preprocessor">.rb</span>
@@ -<span class="hljs-number">0</span>,<span class="hljs-number">0</span> +<span class="hljs-number">1</span> @@
+puts <span class="hljs-string">"Hello, putain de codeur !!!"</span>
</code></pre>
<p>Dit comme ça, ça a pas l’air de casser trois pattes à un canard, mais c’est la
base de la base de la praticité. Je vous fait pas l’insulte de vous expliquer le
détails, vous êtes sans doute assez malins pour comprendre ce que git raconte
sur la sortie de ces deux commandes.</p>
<p>Remarquez que <code>git show</code> affiche en bonus les différences introduites par un
fichier. Ces différences on peut aussi les voir avant de commiter avec <code>git
diff</code>, ce qui est bien pratique.</p>
<p>Entraînez vous maintenant à faire des commits, à inspecter et à farfouiller les
pages de <code>man</code>, c’est la meilleure façon d’apprendre. Après on va attaquer le
gros morceau, celui qui fait la force de Git.</p>
<figure>
  <img src="../../../images/posts/memes/mind_blown.gif" alt="Mind blown">
</figure>

<h2 id="branchement-et-fusions">Branchement et fusions</h2>
<p>Créer une branche, ça permet de travailler sur une fonctionnalité ou un bug
précis, sans encombrer la ligne de conduite principale, qui peut évoluer sous
d’autres contraintes.</p>
<p>Dans Git, les branches sont une partie essentielle de quasiment tout <em>workflow</em>,
et leur manipulation est très rapide et très légère.</p>
<p>Pour en revenir à mon histoire de maillon, créer une branche revient à créer un
point à partir duquel deux chaînes vont être possibles.</p>
<p>C’est aussi simple qu’un <code>git branch le-nom-de-ma-branche</code>. Cette commande se
contente de créer la branche, pour se positionner dessus on utilise <code>git
checkout</code> qui permet de naviguer de branche en branche tel Tarzan sur ses
lianes.</p>
<p>Comme c’est super chiant à écrire, il existe un raccourci bien pratique : <code>git
checkout -b</code>, auquel on passe un nom de branche comme pour <code>git branch</code>.</p>
<p>Une fois qu’on est bien sur la branche, tous les commits suivants seront liés à
cette branche.</p>
<p>On peut utiliser <code>git branch</code> sans argument pour lister les branches, celle avec
un petit asterisque devant c’est la branche courante.</p>
<p>Essayons ça avec notre petit dépôt :</p>
<pre><code class="lang-bash"><span class="hljs-variable">$ </span>git branch
* master
<span class="hljs-variable">$ </span>git checkout -b add-shebang
<span class="hljs-constant">Basculement</span> sur la nouvelle branche <span class="hljs-string">'add-shebang'</span>
<span class="hljs-variable">$ </span>vim putain_de_hello_world.rb
<span class="hljs-variable">$ </span>git status
<span class="hljs-comment"># Sur la branche add-shebang</span>
<span class="hljs-comment"># Modifications qui ne seront pas validées :</span>
<span class="hljs-comment">#   (utilisez "git add &lt;fichier&gt;..." pour mettre à jour ce qui sera validé)</span>
<span class="hljs-comment">#   (utilisez "git checkout -- &lt;fichier&gt;..." pour annuler les modifications dans la copie de travail)</span>
<span class="hljs-comment">#</span>
<span class="hljs-comment">#    modifié : putain_de_hello_world.rb</span>
<span class="hljs-comment">#</span>
aucune modification n<span class="hljs-string">'a été ajoutée au commit (utilisez "git add" ou "git commit -a")
$ git add putain_de_hello_world.rb
$ git commit
[add-shebang 5d48735] Add shebang
 1 file changed, 1 insertion(+)
$ git log --pretty=oneline --decorate
5d48735fcc805d51e2e294df5d9d22d481250789 (HEAD, add-shebang) Add shebang
8120de7b7139e46b9cbc1c3ee89a02962dbc198e (master) Premier commit</span>
</code></pre>
<p>Comme vous le voyez grâce à l’option <code>--decorate--</code> de <code>git log</code>, on a bien
notre branche qui pointe sur le dernier commit fait, alors que la branche de
base fournie par Git, <code>master</code>, reste au commit précédent.</p>
<p>Dernière étape avant la fin de cette article : le redouté et redoutable
<code>merge</code> !</p>
<p>Pour fusionner nos deux branches on va utiliser cette commande en se plaçant sur
la branche dans laquelle on va fusionner et en passant en argument la branche à
fusionner.</p>
<p>Si vous avez bien suivi, on va donc faire les choses suivantes :</p>
<pre><code class="lang-bash">$ git checkout master
Basculement sur la branche <span class="hljs-string">'master'</span>
$ git <span class="hljs-built_in">merge</span> <span class="hljs-built_in">add</span>-shebang
Updating <span class="hljs-number">8120</span>de7.<span class="hljs-number">.5</span>d48735
Fast-forward
 putain_de_hello_world.rb | <span class="hljs-number">1</span> +
 <span class="hljs-number">1</span> <span class="hljs-built_in">file</span> changed, <span class="hljs-number">1</span> insertion(+)
</code></pre>
<p>Vous remarquez que Git signale <em>Fast-forward</em>. Comme le commit pointé par
<code>add-shebang</code> est un fils direct de celui de <code>master</code>, Git se contente de faire
pointer <code>master</code> sur celui-ci, ce qui est beaucoup plus rapide.</p>
<p>Dans le cas où on a eu des modifications sur <code>master</code> entre temps, on aurait eu
une vraie fusion des contenus des commits, avec éventuellement une résolution de
conflits, mais on verra ça dans un prochain article !</p>
<h2 id="la-suite">La suite</h2>
<p>On a vu les bases, et très bientôt on va approfondir le sujet, en voyant
notamment comment collaborer, comment résoudre des conflits ou des problèmes
d’utilisation de Git, tout ça dans la joie et la bonne humeur.</p>
<h2 id="r-f-rences">Références</h2>
<p>Si vous voulez en savoir plus sur Git, la <a href="http://git-scm.com/documentation">documentation officielle</a> est plutôt
bien foutue.</p>
<p>Si vous aimez les petites références rapides et illustrées, le <a href="http://rogerdudler.github.io/git-guide/">Git
Guide</a> de Roger Dudler est une bonne manière d’apprendre.</p>
<h2 id="hey-tu-veux-appliquer-a-pour-contribuer-putain-de-code-">Hey ! Tu veux appliquer ça pour contribuer à Putain de Code ?</h2>
<p>Pas de problème, on a écrit un post exprès :
<a href="/posts/comment-contribuer/">Comment contribuer</a> !</p>

]]></description><pubDate>Wed, 06 Nov 2013 00:00:00 GMT</pubDate><link>http://putaindecode.fr/posts/git/versionner-avec-git/</link><guid isPermaLink="true">http://putaindecode.fr/posts/git/versionner-avec-git/</guid></item></channel></rss>